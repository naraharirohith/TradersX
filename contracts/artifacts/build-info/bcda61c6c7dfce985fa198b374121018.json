{
	"id": "bcda61c6c7dfce985fa198b374121018",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Vault.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract LiquidityVault is ERC4626 {\n    // Track locked collateral for each user\n    mapping(address => uint256) public lockedCollateral;\n\n    address public tokenAddress;\n\n    // Event emitted when collateral is locked\n    event CollateralLocked(address indexed user, uint256 amount);\n\n    // Event emitted when collateral is unlocked\n    event CollateralUnlocked(address indexed user, uint256 amount);\n\n    constructor(address assetAddress_) ERC4626(IERC20(assetAddress_)) ERC20(\"MyVaultShares\", \"MVS\"){ }\n\n    // Override deposit function to lock collateral\n    function deposit(uint256 assets, address receiver) public override returns (uint256) {\n        uint256 shares = super.deposit(assets, receiver);\n        lockedCollateral[receiver] += assets; // Lock collateral\n        emit CollateralLocked(receiver, assets);\n        return shares;\n    }\n\n    // Override withdraw function to handle locked collateral\n    function withdraw(uint256 assets, address receiver, address owner) public override returns (uint256) {\n        require(assets <= maxWithdraw(owner), \"Exceeds max withdraw amount\");\n        require(assets <= lockedCollateral[owner], \"Cannot withdraw locked collateral\");\n        uint256 shares = super.withdraw(assets, receiver, owner);\n        lockedCollateral[owner] -= assets; // Unlock collateral\n        emit CollateralUnlocked(owner, assets);\n        return shares;\n    }\n\n    // Override previewWithdraw function to consider locked collateral\n    function previewWithdraw(uint256 assets) public view override returns (uint256) {\n        uint256 availableAssets = super.previewWithdraw(assets);\n        uint256 lockedAssets = lockedCollateral[msg.sender];\n        if (availableAssets > lockedAssets) {\n            return availableAssets - lockedAssets;\n        }\n        return 0;\n    }\n\n    // Override maxWithdraw function to consider locked collateral\n    // function maxWithdraw(address owner) public view override returns (uint256) {\n    //     uint256 maxWithdrawAmount = super.maxWithdraw(owner);\n    //     uint256 lockedAssets = lockedCollateral[owner];\n    //     if (maxWithdrawAmount > lockedAssets) {\n    //         return maxWithdrawAmount - lockedAssets;\n    //     }\n    //     return 0;\n    // }\n\n    // Override maxWithdraw function to consider locked collateral\n    function maxWithdraw(address owner) public view override returns (uint256) {\n        uint256 maxWithdrawAmount = super.maxWithdraw(owner);\n        uint256 lockedAssets = lockedCollateral[owner];\n        if (maxWithdrawAmount > lockedAssets) {\n            return maxWithdrawAmount - lockedAssets;\n        }\n        return 0;\n    }\n}"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20, IERC20Metadata, ERC20} from \"../ERC20.sol\";\nimport {SafeERC20} from \"../utils/SafeERC20.sol\";\nimport {IERC4626} from \"../../../interfaces/IERC4626.sol\";\nimport {Math} from \"../../../utils/math/Math.sol\";\n\n/**\n * @dev Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\n *\n * This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for\n * underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n * the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n * contract and not the \"assets\" token which is an independent contract.\n *\n * [CAUTION]\n * ====\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\n * with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n *\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\n * expensive than it is profitable. More details about the underlying math can be found\n * xref:erc4626.adoc#inflation-attack[here].\n *\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\n * `_convertToShares` and `_convertToAssets` functions.\n *\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\n * ====\n */\nabstract contract ERC4626 is ERC20, IERC4626 {\n    using Math for uint256;\n\n    IERC20 private immutable _asset;\n    uint8 private immutable _underlyingDecimals;\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    /**\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\n     */\n    constructor(IERC20 asset_) {\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\n        _underlyingDecimals = success ? assetDecimals : 18;\n        _asset = asset_;\n    }\n\n    /**\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\n     */\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\n            abi.encodeCall(IERC20Metadata.decimals, ())\n        );\n        if (success && encodedDecimals.length >= 32) {\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\n            if (returnedDecimals <= type(uint8).max) {\n                return (true, uint8(returnedDecimals));\n            }\n        }\n        return (false, 0);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\n     * \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\n        return _underlyingDecimals + _decimalsOffset();\n    }\n\n    /** @dev See {IERC4626-asset}. */\n    function asset() public view virtual returns (address) {\n        return address(_asset);\n    }\n\n    /** @dev See {IERC4626-totalAssets}. */\n    function totalAssets() public view virtual returns (uint256) {\n        return _asset.balanceOf(address(this));\n    }\n\n    /** @dev See {IERC4626-convertToShares}. */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-convertToAssets}. */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-maxDeposit}. */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxMint}. */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxWithdraw}. */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-maxRedeem}. */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /** @dev See {IERC4626-previewDeposit}. */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-previewMint}. */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /** @dev See {IERC4626-previewWithdraw}. */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /** @dev See {IERC4626-previewRedeem}. */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-deposit}. */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /** @dev See {IERC4626-withdraw}. */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-redeem}. */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\n        _mint(receiver, shares);\n\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        SafeERC20.safeTransfer(_asset, receiver, assets);\n\n        emit Withdraw(caller, receiver, owner, assets, shares);\n    }\n\n    function _decimalsOffset() internal view virtual returns (uint8) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC4626.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/interfaces/IERC4626.sol": {
				"IERC4626": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Withdraw",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "asset",
							"outputs": [
								{
									"internalType": "address",
									"name": "assetTokenAddress",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "convertToAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "convertToShares",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "maxDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "maxAssets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "maxMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "maxShares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "maxShares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "maxAssets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "redeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "totalManagedAssets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "withdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"asset()": {
								"details": "Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"convertToAssets(uint256)": {
								"details": "Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
							},
							"convertToShares(uint256)": {
								"details": "Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"deposit(uint256,address)": {
								"details": "Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
							},
							"maxDeposit(address)": {
								"details": "Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert."
							},
							"maxMint(address)": {
								"details": "Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert."
							},
							"maxRedeem(address)": {
								"details": "Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert."
							},
							"maxWithdraw(address)": {
								"details": "Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert."
							},
							"mint(uint256,address)": {
								"details": "Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"previewDeposit(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
							},
							"previewMint(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting."
							},
							"previewRedeem(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming."
							},
							"previewWithdraw(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
							},
							"redeem(uint256,address,address)": {
								"details": "Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalAssets()": {
								"details": "Returns the total amount of the underlying asset that is “managed” by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"withdraw(uint256,address,address)": {
								"details": "Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"asset()": "38d52e0f",
							"balanceOf(address)": "70a08231",
							"convertToAssets(uint256)": "07a2d13a",
							"convertToShares(uint256)": "c6e6f592",
							"decimals()": "313ce567",
							"deposit(uint256,address)": "6e553f65",
							"maxDeposit(address)": "402d267d",
							"maxMint(address)": "c63d75b6",
							"maxRedeem(address)": "d905777e",
							"maxWithdraw(address)": "ce96cb77",
							"mint(uint256,address)": "94bf804d",
							"name()": "06fdde03",
							"previewDeposit(uint256)": "ef8b30f7",
							"previewMint(uint256)": "b3d7f6b9",
							"previewRedeem(uint256)": "4cdad506",
							"previewWithdraw(uint256)": "0a28a477",
							"redeem(uint256,address,address)": "ba087652",
							"symbol()": "95d89b41",
							"totalAssets()": "01e1d114",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256,address,address)": "b460af94"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"assetTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalManagedAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"asset()\":{\"details\":\"Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"convertToAssets(uint256)\":{\"details\":\"Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"convertToShares(uint256)\":{\"details\":\"Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"deposit(uint256,address)\":{\"details\":\"Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"maxDeposit(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert.\"},\"maxMint(address)\":{\"details\":\"Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert.\"},\"maxRedeem(address)\":{\"details\":\"Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert.\"},\"maxWithdraw(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert.\"},\"mint(uint256,address)\":{\"details\":\"Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"previewMint(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting.\"},\"previewRedeem(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming.\"},\"previewWithdraw(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"redeem(uint256,address,address)\":{\"details\":\"Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalAssets()\":{\"details\":\"Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"withdraw(uint256,address,address)\":{\"details\":\"Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":\"IERC4626\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 329,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 335,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 337,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 339,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 341,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol": {
				"ERC4626": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxDeposit",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxMint",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxRedeem",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxWithdraw",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Withdraw",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "asset",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "convertToAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "convertToShares",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "redeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "withdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in https://eips.ethereum.org/EIPS/eip-4626[EIP-4626]. This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this contract and not the \"assets\" token which is an independent contract. [CAUTION] ==== In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by verifying the amount received is as expected, using a wrapper that performs these checks such as https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router]. Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()` corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more expensive than it is profitable. More details about the underlying math can be found xref:erc4626.adoc#inflation-attack[here]. The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets will cause the first user to exit to experience reduced losses in detriment to the last users that will experience bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the `_convertToShares` and `_convertToAssets` functions. To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide]. ====",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC4626ExceededMaxDeposit(address,uint256,uint256)": [
								{
									"details": "Attempted to deposit more assets than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxMint(address,uint256,uint256)": [
								{
									"details": "Attempted to mint more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxRedeem(address,uint256,uint256)": [
								{
									"details": "Attempted to redeem more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxWithdraw(address,uint256,uint256)": [
								{
									"details": "Attempted to withdraw more assets than the max amount for `receiver`."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"asset()": {
								"details": "See {IERC4626-asset}. "
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777)."
							},
							"convertToAssets(uint256)": {
								"details": "See {IERC4626-convertToAssets}. "
							},
							"convertToShares(uint256)": {
								"details": "See {IERC4626-convertToShares}. "
							},
							"decimals()": {
								"details": "Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}."
							},
							"deposit(uint256,address)": {
								"details": "See {IERC4626-deposit}. "
							},
							"maxDeposit(address)": {
								"details": "See {IERC4626-maxDeposit}. "
							},
							"maxMint(address)": {
								"details": "See {IERC4626-maxMint}. "
							},
							"maxRedeem(address)": {
								"details": "See {IERC4626-maxRedeem}. "
							},
							"maxWithdraw(address)": {
								"details": "See {IERC4626-maxWithdraw}. "
							},
							"mint(uint256,address)": {
								"details": "See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"previewDeposit(uint256)": {
								"details": "See {IERC4626-previewDeposit}. "
							},
							"previewMint(uint256)": {
								"details": "See {IERC4626-previewMint}. "
							},
							"previewRedeem(uint256)": {
								"details": "See {IERC4626-previewRedeem}. "
							},
							"previewWithdraw(uint256)": {
								"details": "See {IERC4626-previewWithdraw}. "
							},
							"redeem(uint256,address,address)": {
								"details": "See {IERC4626-redeem}. "
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalAssets()": {
								"details": "See {IERC4626-totalAssets}. "
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"withdraw(uint256,address,address)": {
								"details": "See {IERC4626-withdraw}. "
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"asset()": "38d52e0f",
							"balanceOf(address)": "70a08231",
							"convertToAssets(uint256)": "07a2d13a",
							"convertToShares(uint256)": "c6e6f592",
							"decimals()": "313ce567",
							"deposit(uint256,address)": "6e553f65",
							"maxDeposit(address)": "402d267d",
							"maxMint(address)": "c63d75b6",
							"maxRedeem(address)": "d905777e",
							"maxWithdraw(address)": "ce96cb77",
							"mint(uint256,address)": "94bf804d",
							"name()": "06fdde03",
							"previewDeposit(uint256)": "ef8b30f7",
							"previewMint(uint256)": "b3d7f6b9",
							"previewRedeem(uint256)": "4cdad506",
							"previewWithdraw(uint256)": "0a28a477",
							"redeem(uint256,address,address)": "ba087652",
							"symbol()": "95d89b41",
							"totalAssets()": "01e1d114",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256,address,address)": "b460af94"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in https://eips.ethereum.org/EIPS/eip-4626[EIP-4626]. This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this contract and not the \\\"assets\\\" token which is an independent contract. [CAUTION] ==== In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by verifying the amount received is as expected, using a wrapper that performs these checks such as https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router]. Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()` corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more expensive than it is profitable. More details about the underlying math can be found xref:erc4626.adoc#inflation-attack[here]. The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets will cause the first user to exit to experience reduced losses in detriment to the last users that will experience bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the `_convertToShares` and `_convertToAssets` functions. To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide]. ====\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC4626ExceededMaxDeposit(address,uint256,uint256)\":[{\"details\":\"Attempted to deposit more assets than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxMint(address,uint256,uint256)\":[{\"details\":\"Attempted to mint more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxRedeem(address,uint256,uint256)\":[{\"details\":\"Attempted to redeem more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxWithdraw(address,uint256,uint256)\":[{\"details\":\"Attempted to withdraw more assets than the max amount for `receiver`.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"See {IERC4626-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\"},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4626-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4626-convertToShares}. \"},\"decimals()\":{\"details\":\"Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}.\"},\"deposit(uint256,address)\":{\"details\":\"See {IERC4626-deposit}. \"},\"maxDeposit(address)\":{\"details\":\"See {IERC4626-maxDeposit}. \"},\"maxMint(address)\":{\"details\":\"See {IERC4626-maxMint}. \"},\"maxRedeem(address)\":{\"details\":\"See {IERC4626-maxRedeem}. \"},\"maxWithdraw(address)\":{\"details\":\"See {IERC4626-maxWithdraw}. \"},\"mint(uint256,address)\":{\"details\":\"See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"See {IERC4626-previewDeposit}. \"},\"previewMint(uint256)\":{\"details\":\"See {IERC4626-previewMint}. \"},\"previewRedeem(uint256)\":{\"details\":\"See {IERC4626-previewRedeem}. \"},\"previewWithdraw(uint256)\":{\"details\":\"See {IERC4626-previewWithdraw}. \"},\"redeem(uint256,address,address)\":{\"details\":\"See {IERC4626-redeem}. \"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"See {IERC4626-totalAssets}. \"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"withdraw(uint256,address,address)\":{\"details\":\"See {IERC4626-withdraw}. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":\"ERC4626\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"keccak256\":\"0x1837547e04d5fe5334eeb77a345683c22995f1e7aa033020757ddf83a80fc72d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40d6031bc0e6f70edceb4e63fd624fe6be09dc48f5201c7a9078c26e6a9ef95f\",\"dweb:/ipfs/QmPTEBH7dmU3NgE6vtjMy7xEK54as9VHSgf9ojupwnvoke\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 329,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 335,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 337,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 339,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 341,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentAllowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestedDecrease",
									"type": "uint256"
								}
							],
							"name": "SafeERC20FailedDecreaseAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"errors": {
							"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failed `decreaseAllowance` request."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":751:5769  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":751:5769  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122000840fa72512133acbe1fa59dfc491535cd1a951920b11430d489aa1712b6a7864736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122000840fa72512133acbe1fa59dfc491535cd1a951920b11430d489aa1712b6a7864736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP DUP5 0xF 0xA7 0x25 SLT SGT GASPRICE 0xCB 0xE1 STATICCALL MSIZE 0xDF 0xC4 SWAP2 MSTORE8 TLOAD 0xD1 0xA9 MLOAD SWAP3 SIGNEXTEND GT NUMBER 0xD BASEFEE SWAP11 LOG1 PUSH18 0x2B6A7864736F6C634300081A003300000000 ",
							"sourceMap": "751:5018:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122000840fa72512133acbe1fa59dfc491535cd1a951920b11430d489aa1712b6a7864736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP DUP5 0xF 0xA7 0x25 SLT SGT GASPRICE 0xCB 0xE1 STATICCALL MSIZE 0xDF 0xC4 SWAP2 MSTORE8 TLOAD 0xD1 0xA9 MLOAD SWAP3 SIGNEXTEND GT NUMBER 0xD BASEFEE SWAP11 LOG1 PUSH18 0x2B6A7864736F6C634300081A003300000000 ",
							"sourceMap": "751:5018:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122000840fa72512133acbe1fa59dfc491535cd1a951920b11430d489aa1712b6a7864736f6c634300081a0033",
									".code": [
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC4626.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"contracts/Vault.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":195:6261  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":195:6261  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122088136072b9f4c078ed84d9aed48871292807a66bde8217a15371a57aab632c0064736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122088136072b9f4c078ed84d9aed48871292807a66bde8217a15371a57aab632c0064736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 SGT PUSH1 0x72 0xB9 DELEGATECALL 0xC0 PUSH25 0xED84D9AED48871292807A66BDE8217A15371A57AAB632C0064 PUSH20 0x6F6C634300081A00330000000000000000000000 ",
							"sourceMap": "195:6066:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122088136072b9f4c078ed84d9aed48871292807a66bde8217a15371a57aab632c0064736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP9 SGT PUSH1 0x72 0xB9 DELEGATECALL 0xC0 PUSH25 0xED84D9AED48871292807A66BDE8217A15371A57AAB632C0064 PUSH20 0x6F6C634300081A00330000000000000000000000 ",
							"sourceMap": "195:6066:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"_revert(bytes memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122088136072b9f4c078ed84d9aed48871292807a66bde8217a15371a57aab632c0064736f6c634300081a0033",
									".code": [
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC4626.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"contracts/Vault.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"errors": {
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220203246029dab93f34b327ba02915d37e6c29f598a14b59593a6c7ca26ac8c1c664736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220203246029dab93f34b327ba02915d37e6c29f598a14b59593a6c7ca26ac8c1c664736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 ORIGIN CHAINID MUL SWAP14 0xAB SWAP4 RETURN 0x4B ORIGIN PUSH28 0xA02915D37E6C29F598A14B59593A6C7CA26AC8C1C664736F6C634300 ADDMOD BYTE STOP CALLER ",
							"sourceMap": "203:14914:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220203246029dab93f34b327ba02915d37e6c29f598a14b59593a6c7ca26ac8c1c664736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 ORIGIN CHAINID MUL SWAP14 0xAB SWAP4 RETURN 0x4B ORIGIN PUSH28 0xA02915D37E6C29F598A14B59593A6C7CA26AC8C1C664736F6C634300 ADDMOD BYTE STOP CALLER ",
							"sourceMap": "203:14914:10:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite",
								"unsignedRoundsUp(enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 10,
									"value": "B"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "BYTE",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE8",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220203246029dab93f34b327ba02915d37e6c29f598a14b59593a6c7ca26ac8c1c664736f6c634300081a0033",
									".code": [
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSHDEPLOYADDRESS",
											"source": 10
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC4626.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"contracts/Vault.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Vault.sol": {
				"LiquidityVault": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "assetAddress_",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxDeposit",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxMint",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxRedeem",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxWithdraw",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "CollateralLocked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "CollateralUnlocked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Withdraw",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "asset",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "convertToAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "convertToShares",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "lockedCollateral",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "redeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tokenAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "withdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC4626ExceededMaxDeposit(address,uint256,uint256)": [
								{
									"details": "Attempted to deposit more assets than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxMint(address,uint256,uint256)": [
								{
									"details": "Attempted to mint more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxRedeem(address,uint256,uint256)": [
								{
									"details": "Attempted to redeem more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxWithdraw(address,uint256,uint256)": [
								{
									"details": "Attempted to withdraw more assets than the max amount for `receiver`."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"asset()": {
								"details": "See {IERC4626-asset}. "
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"convertToAssets(uint256)": {
								"details": "See {IERC4626-convertToAssets}. "
							},
							"convertToShares(uint256)": {
								"details": "See {IERC4626-convertToShares}. "
							},
							"decimals()": {
								"details": "Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}."
							},
							"deposit(uint256,address)": {
								"details": "See {IERC4626-deposit}. "
							},
							"maxDeposit(address)": {
								"details": "See {IERC4626-maxDeposit}. "
							},
							"maxMint(address)": {
								"details": "See {IERC4626-maxMint}. "
							},
							"maxRedeem(address)": {
								"details": "See {IERC4626-maxRedeem}. "
							},
							"maxWithdraw(address)": {
								"details": "See {IERC4626-maxWithdraw}. "
							},
							"mint(uint256,address)": {
								"details": "See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"previewDeposit(uint256)": {
								"details": "See {IERC4626-previewDeposit}. "
							},
							"previewMint(uint256)": {
								"details": "See {IERC4626-previewMint}. "
							},
							"previewRedeem(uint256)": {
								"details": "See {IERC4626-previewRedeem}. "
							},
							"previewWithdraw(uint256)": {
								"details": "See {IERC4626-previewWithdraw}. "
							},
							"redeem(uint256,address,address)": {
								"details": "See {IERC4626-redeem}. "
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalAssets()": {
								"details": "See {IERC4626-totalAssets}. "
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"withdraw(uint256,address,address)": {
								"details": "See {IERC4626-withdraw}. "
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Vault.sol\":193:2835  contract LiquidityVault is ERC4626 {... */\n  mstore(0x40, 0xc0)\n    /* \"contracts/Vault.sol\":603:701  constructor(address assetAddress_) ERC4626(IERC20(assetAddress_)) ERC20(\"MyVaultShares\", \"MVS\"){ } */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/Vault.sol\":653:666  assetAddress_ */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1896:2009  constructor(string memory name_, string memory symbol_) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x0d\n  dup2\n  mstore\n  0x20\n  add\n  0x4d795661756c7453686172657300000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x03\n  dup2\n  mstore\n  0x20\n  add\n  0x4d56530000000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1970:1975  name_ */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1967  _name */\n  0x03\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1975  _name = name_ */\n  swap1\n  dup2\n  tag_8\n  swap2\n  swap1\n  tag_9\n  jump\t// in\ntag_8:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1995:2002  symbol_ */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:1992  _symbol */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:2002  _symbol = symbol_ */\n  swap1\n  dup2\n  tag_10\n  swap2\n  swap1\n  tag_9\n  jump\t// in\ntag_10:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1896:2009  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4203:4215  bool success */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4217:4236  uint8 assetDecimals */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4240:4268  _tryGetAssetDecimals(asset_) */\n  tag_12\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4261:4267  asset_ */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4240:4260  _tryGetAssetDecimals */\n  shl(0x20, tag_13)\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4240:4268  _tryGetAssetDecimals(asset_) */\n  0x20\n  shr\n  jump\t// in\ntag_12:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4202:4268  (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_) */\n  swap2\n  pop\n  swap2\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4300:4307  success */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4300:4328  success ? assetDecimals : 18 */\n  tag_14\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4326:4328  18 */\n  0x12\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4300:4328  success ? assetDecimals : 18 */\n  jump(tag_15)\ntag_14:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4310:4323  assetDecimals */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4300:4328  success ? assetDecimals : 18 */\ntag_15:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4278:4328  _underlyingDecimals = success ? assetDecimals : 18 */\n  0xff\n  and\n  0xa0\n  dup2\n  0xff\n  and\n  dup2\n  mstore\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4347:4353  asset_ */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4338:4353  _asset = asset_ */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x80\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4192:4360  {... */\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4165:4360  constructor(IERC20 asset_) {... */\n  pop\n    /* \"contracts/Vault.sol\":603:701  constructor(address assetAddress_) ERC4626(IERC20(assetAddress_)) ERC20(\"MyVaultShares\", \"MVS\"){ } */\n  pop\n    /* \"contracts/Vault.sol\":193:2835  contract LiquidityVault is ERC4626 {... */\n  jump(tag_17)\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4503:5036  function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {... */\ntag_13:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4570:4574  bool */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4576:4581  uint8 */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4594:4606  bool success */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4608:4636  bytes memory encodedDecimals */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4648:4654  asset_ */\n  dup5\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4640:4666  address(asset_).staticcall */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4680:4723  abi.encodeCall(IERC20Metadata.decimals, ()) */\n  add(0x24, mload(0x40))\n  mload(0x40)\n  0x20\n  dup2\n  dup4\n  sub\n  sub\n  dup2\n  mstore\n  swap1\n  0x40\n  mstore\n  shl(0xe0, 0x313ce567)\n  0x20\n  dup3\n  add\n  dup1\n  mload\n  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n  dup4\n  dup2\n  dup4\n  and\n  or\n  dup4\n  mstore\n  pop\n  pop\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4640:4733  address(asset_).staticcall(... */\n  mload(0x40)\n  tag_19\n  swap2\n  swap1\n  tag_20\n  jump\t// in\ntag_19:\n  0x00\n  mload(0x40)\n  dup1\n  dup4\n  sub\n  dup2\n  dup6\n  gas\n  staticcall\n  swap2\n  pop\n  pop\n  returndatasize\n  dup1\n  0x00\n  dup2\n  eq\n  tag_23\n  jumpi\n  mload(0x40)\n  swap2\n  pop\n  and(add(returndatasize, 0x3f), not(0x1f))\n  dup3\n  add\n  0x40\n  mstore\n  returndatasize\n  dup3\n  mstore\n  returndatasize\n  0x00\n  0x20\n  dup5\n  add\n  returndatacopy\n  jump(tag_22)\ntag_23:\n  0x60\n  swap2\n  pop\ntag_22:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4593:4733  (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(... */\n  swap2\n  pop\n  swap2\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4747:4754  success */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4747:4786  success && encodedDecimals.length >= 32 */\n  dup1\n  iszero\n  tag_24\n  jumpi\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4784:4786  32 */\n  0x20\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4758:4773  encodedDecimals */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4758:4780  encodedDecimals.length */\n  mload\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4758:4786  encodedDecimals.length >= 32 */\n  lt\n  iszero\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4747:4786  success && encodedDecimals.length >= 32 */\ntag_24:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4743:5003  if (success && encodedDecimals.length >= 32) {... */\n  iszero\n  tag_25\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4802:4826  uint256 returnedDecimals */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4840:4855  encodedDecimals */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4829:4867  abi.decode(encodedDecimals, (uint256)) */\n  dup1\n  0x20\n  add\n  swap1\n  mload\n  dup2\n  add\n  swap1\n  tag_26\n  swap2\n  swap1\n  tag_27\n  jump\t// in\ntag_26:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4802:4867  uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256)) */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4905:4920  type(uint8).max */\n  0xff\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4885:4920  returnedDecimals <= type(uint8).max */\n  dup1\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4885:4901  returnedDecimals */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4885:4920  returnedDecimals <= type(uint8).max */\n  gt\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4881:4993  if (returnedDecimals <= type(uint8).max) {... */\n  tag_28\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4948:4952  true */\n  0x01\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4960:4976  returnedDecimals */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4940:4978  return (true, uint8(returnedDecimals)) */\n  swap5\n  pop\n  swap5\n  pop\n  pop\n  pop\n  pop\n  jump(tag_18)\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4881:4993  if (returnedDecimals <= type(uint8).max) {... */\ntag_28:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4788:5003  {... */\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4743:5003  if (success && encodedDecimals.length >= 32) {... */\ntag_25:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5020:5025  false */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5027:5028  0 */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5012:5029  return (false, 0) */\n  swap4\n  pop\n  swap4\n  pop\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4503:5036  function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {... */\ntag_18:\n  swap2\n  pop\n  swap2\n  jump\t// out\n    /* \"#utility.yul\":88:205   */\ntag_30:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:460   */\ntag_32:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":411:453   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":404:409   */\n  dup3\n    /* \"#utility.yul\":400:454   */\n  and\n    /* \"#utility.yul\":389:454   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:460   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":466:562   */\ntag_33:\n    /* \"#utility.yul\":503:510   */\n  0x00\n    /* \"#utility.yul\":532:556   */\n  tag_68\n    /* \"#utility.yul\":550:555   */\n  dup3\n    /* \"#utility.yul\":532:556   */\n  tag_32\n  jump\t// in\ntag_68:\n    /* \"#utility.yul\":521:556   */\n  swap1\n  pop\n    /* \"#utility.yul\":466:562   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":568:690   */\ntag_34:\n    /* \"#utility.yul\":641:665   */\n  tag_70\n    /* \"#utility.yul\":659:664   */\n  dup2\n    /* \"#utility.yul\":641:665   */\n  tag_33\n  jump\t// in\ntag_70:\n    /* \"#utility.yul\":634:639   */\n  dup2\n    /* \"#utility.yul\":631:666   */\n  eq\n    /* \"#utility.yul\":621:684   */\n  tag_71\n  jumpi\n    /* \"#utility.yul\":680:681   */\n  0x00\n    /* \"#utility.yul\":677:678   */\n  dup1\n    /* \"#utility.yul\":670:682   */\n  revert\n    /* \"#utility.yul\":621:684   */\ntag_71:\n    /* \"#utility.yul\":568:690   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":696:839   */\ntag_35:\n    /* \"#utility.yul\":753:758   */\n  0x00\n    /* \"#utility.yul\":784:790   */\n  dup2\n    /* \"#utility.yul\":778:791   */\n  mload\n    /* \"#utility.yul\":769:791   */\n  swap1\n  pop\n    /* \"#utility.yul\":800:833   */\n  tag_73\n    /* \"#utility.yul\":827:832   */\n  dup2\n    /* \"#utility.yul\":800:833   */\n  tag_34\n  jump\t// in\ntag_73:\n    /* \"#utility.yul\":696:839   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":845:1196   */\ntag_3:\n    /* \"#utility.yul\":915:921   */\n  0x00\n    /* \"#utility.yul\":964:966   */\n  0x20\n    /* \"#utility.yul\":952:961   */\n  dup3\n    /* \"#utility.yul\":943:950   */\n  dup5\n    /* \"#utility.yul\":939:962   */\n  sub\n    /* \"#utility.yul\":935:967   */\n  slt\n    /* \"#utility.yul\":932:1051   */\n  iszero\n  tag_75\n  jumpi\n    /* \"#utility.yul\":970:1049   */\n  tag_76\n  tag_30\n  jump\t// in\ntag_76:\n    /* \"#utility.yul\":932:1051   */\ntag_75:\n    /* \"#utility.yul\":1090:1091   */\n  0x00\n    /* \"#utility.yul\":1115:1179   */\n  tag_77\n    /* \"#utility.yul\":1171:1178   */\n  dup5\n    /* \"#utility.yul\":1162:1168   */\n  dup3\n    /* \"#utility.yul\":1151:1160   */\n  dup6\n    /* \"#utility.yul\":1147:1169   */\n  add\n    /* \"#utility.yul\":1115:1179   */\n  tag_35\n  jump\t// in\ntag_77:\n    /* \"#utility.yul\":1105:1179   */\n  swap2\n  pop\n    /* \"#utility.yul\":1061:1189   */\n  pop\n    /* \"#utility.yul\":845:1196   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1202:1301   */\ntag_36:\n    /* \"#utility.yul\":1254:1260   */\n  0x00\n    /* \"#utility.yul\":1288:1293   */\n  dup2\n    /* \"#utility.yul\":1282:1294   */\n  mload\n    /* \"#utility.yul\":1272:1294   */\n  swap1\n  pop\n    /* \"#utility.yul\":1202:1301   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1307:1487   */\ntag_37:\n    /* \"#utility.yul\":1355:1432   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":1352:1353   */\n  0x00\n    /* \"#utility.yul\":1345:1433   */\n  mstore\n    /* \"#utility.yul\":1452:1456   */\n  0x41\n    /* \"#utility.yul\":1449:1450   */\n  0x04\n    /* \"#utility.yul\":1442:1457   */\n  mstore\n    /* \"#utility.yul\":1476:1480   */\n  0x24\n    /* \"#utility.yul\":1473:1474   */\n  0x00\n    /* \"#utility.yul\":1466:1481   */\n  revert\n    /* \"#utility.yul\":1493:1673   */\ntag_38:\n    /* \"#utility.yul\":1541:1618   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":1538:1539   */\n  0x00\n    /* \"#utility.yul\":1531:1619   */\n  mstore\n    /* \"#utility.yul\":1638:1642   */\n  0x22\n    /* \"#utility.yul\":1635:1636   */\n  0x04\n    /* \"#utility.yul\":1628:1643   */\n  mstore\n    /* \"#utility.yul\":1662:1666   */\n  0x24\n    /* \"#utility.yul\":1659:1660   */\n  0x00\n    /* \"#utility.yul\":1652:1667   */\n  revert\n    /* \"#utility.yul\":1679:1999   */\ntag_39:\n    /* \"#utility.yul\":1723:1729   */\n  0x00\n    /* \"#utility.yul\":1760:1761   */\n  0x02\n    /* \"#utility.yul\":1754:1758   */\n  dup3\n    /* \"#utility.yul\":1750:1762   */\n  div\n    /* \"#utility.yul\":1740:1762   */\n  swap1\n  pop\n    /* \"#utility.yul\":1807:1808   */\n  0x01\n    /* \"#utility.yul\":1801:1805   */\n  dup3\n    /* \"#utility.yul\":1797:1809   */\n  and\n    /* \"#utility.yul\":1828:1846   */\n  dup1\n    /* \"#utility.yul\":1818:1899   */\n  tag_82\n  jumpi\n    /* \"#utility.yul\":1884:1888   */\n  0x7f\n    /* \"#utility.yul\":1876:1882   */\n  dup3\n    /* \"#utility.yul\":1872:1889   */\n  and\n    /* \"#utility.yul\":1862:1889   */\n  swap2\n  pop\n    /* \"#utility.yul\":1818:1899   */\ntag_82:\n    /* \"#utility.yul\":1946:1948   */\n  0x20\n    /* \"#utility.yul\":1938:1944   */\n  dup3\n    /* \"#utility.yul\":1935:1949   */\n  lt\n    /* \"#utility.yul\":1915:1933   */\n  dup2\n    /* \"#utility.yul\":1912:1950   */\n  sub\n    /* \"#utility.yul\":1909:1993   */\n  tag_83\n  jumpi\n    /* \"#utility.yul\":1965:1983   */\n  tag_84\n  tag_38\n  jump\t// in\ntag_84:\n    /* \"#utility.yul\":1909:1993   */\ntag_83:\n    /* \"#utility.yul\":1730:1999   */\n  pop\n    /* \"#utility.yul\":1679:1999   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2005:2146   */\ntag_40:\n    /* \"#utility.yul\":2054:2058   */\n  0x00\n    /* \"#utility.yul\":2077:2080   */\n  dup2\n    /* \"#utility.yul\":2069:2080   */\n  swap1\n  pop\n    /* \"#utility.yul\":2100:2103   */\n  dup2\n    /* \"#utility.yul\":2097:2098   */\n  0x00\n    /* \"#utility.yul\":2090:2104   */\n  mstore\n    /* \"#utility.yul\":2134:2138   */\n  0x20\n    /* \"#utility.yul\":2131:2132   */\n  0x00\n    /* \"#utility.yul\":2121:2139   */\n  keccak256\n    /* \"#utility.yul\":2113:2139   */\n  swap1\n  pop\n    /* \"#utility.yul\":2005:2146   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2152:2245   */\ntag_41:\n    /* \"#utility.yul\":2189:2195   */\n  0x00\n    /* \"#utility.yul\":2236:2238   */\n  0x20\n    /* \"#utility.yul\":2231:2233   */\n  0x1f\n    /* \"#utility.yul\":2224:2229   */\n  dup4\n    /* \"#utility.yul\":2220:2234   */\n  add\n    /* \"#utility.yul\":2216:2239   */\n  div\n    /* \"#utility.yul\":2206:2239   */\n  swap1\n  pop\n    /* \"#utility.yul\":2152:2245   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2251:2358   */\ntag_42:\n    /* \"#utility.yul\":2295:2303   */\n  0x00\n    /* \"#utility.yul\":2345:2350   */\n  dup3\n    /* \"#utility.yul\":2339:2343   */\n  dup3\n    /* \"#utility.yul\":2335:2351   */\n  shl\n    /* \"#utility.yul\":2314:2351   */\n  swap1\n  pop\n    /* \"#utility.yul\":2251:2358   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2364:2757   */\ntag_43:\n    /* \"#utility.yul\":2433:2439   */\n  0x00\n    /* \"#utility.yul\":2483:2484   */\n  0x08\n    /* \"#utility.yul\":2471:2481   */\n  dup4\n    /* \"#utility.yul\":2467:2485   */\n  mul\n    /* \"#utility.yul\":2506:2603   */\n  tag_89\n    /* \"#utility.yul\":2536:2602   */\n  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":2525:2534   */\n  dup3\n    /* \"#utility.yul\":2506:2603   */\n  tag_42\n  jump\t// in\ntag_89:\n    /* \"#utility.yul\":2624:2663   */\n  tag_90\n    /* \"#utility.yul\":2654:2662   */\n  dup7\n    /* \"#utility.yul\":2643:2652   */\n  dup4\n    /* \"#utility.yul\":2624:2663   */\n  tag_42\n  jump\t// in\ntag_90:\n    /* \"#utility.yul\":2612:2663   */\n  swap6\n  pop\n    /* \"#utility.yul\":2696:2700   */\n  dup1\n    /* \"#utility.yul\":2692:2701   */\n  not\n    /* \"#utility.yul\":2685:2690   */\n  dup5\n    /* \"#utility.yul\":2681:2702   */\n  and\n    /* \"#utility.yul\":2672:2702   */\n  swap4\n  pop\n    /* \"#utility.yul\":2745:2749   */\n  dup1\n    /* \"#utility.yul\":2735:2743   */\n  dup7\n    /* \"#utility.yul\":2731:2750   */\n  and\n    /* \"#utility.yul\":2724:2729   */\n  dup5\n    /* \"#utility.yul\":2721:2751   */\n  or\n    /* \"#utility.yul\":2711:2751   */\n  swap3\n  pop\n    /* \"#utility.yul\":2440:2757   */\n  pop\n  pop\n    /* \"#utility.yul\":2364:2757   */\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2763:2840   */\ntag_44:\n    /* \"#utility.yul\":2800:2807   */\n  0x00\n    /* \"#utility.yul\":2829:2834   */\n  dup2\n    /* \"#utility.yul\":2818:2834   */\n  swap1\n  pop\n    /* \"#utility.yul\":2763:2840   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2846:2906   */\ntag_45:\n    /* \"#utility.yul\":2874:2877   */\n  0x00\n    /* \"#utility.yul\":2895:2900   */\n  dup2\n    /* \"#utility.yul\":2888:2900   */\n  swap1\n  pop\n    /* \"#utility.yul\":2846:2906   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2912:3054   */\ntag_46:\n    /* \"#utility.yul\":2962:2971   */\n  0x00\n    /* \"#utility.yul\":2995:3048   */\n  tag_94\n    /* \"#utility.yul\":3013:3047   */\n  tag_95\n    /* \"#utility.yul\":3022:3046   */\n  tag_96\n    /* \"#utility.yul\":3040:3045   */\n  dup5\n    /* \"#utility.yul\":3022:3046   */\n  tag_44\n  jump\t// in\ntag_96:\n    /* \"#utility.yul\":3013:3047   */\n  tag_45\n  jump\t// in\ntag_95:\n    /* \"#utility.yul\":2995:3048   */\n  tag_44\n  jump\t// in\ntag_94:\n    /* \"#utility.yul\":2982:3048   */\n  swap1\n  pop\n    /* \"#utility.yul\":2912:3054   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3060:3135   */\ntag_47:\n    /* \"#utility.yul\":3103:3106   */\n  0x00\n    /* \"#utility.yul\":3124:3129   */\n  dup2\n    /* \"#utility.yul\":3117:3129   */\n  swap1\n  pop\n    /* \"#utility.yul\":3060:3135   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3141:3410   */\ntag_48:\n    /* \"#utility.yul\":3251:3290   */\n  tag_99\n    /* \"#utility.yul\":3282:3289   */\n  dup4\n    /* \"#utility.yul\":3251:3290   */\n  tag_46\n  jump\t// in\ntag_99:\n    /* \"#utility.yul\":3312:3403   */\n  tag_100\n    /* \"#utility.yul\":3361:3402   */\n  tag_101\n    /* \"#utility.yul\":3385:3401   */\n  dup3\n    /* \"#utility.yul\":3361:3402   */\n  tag_47\n  jump\t// in\ntag_101:\n    /* \"#utility.yul\":3353:3359   */\n  dup5\n    /* \"#utility.yul\":3346:3350   */\n  dup5\n    /* \"#utility.yul\":3340:3351   */\n  sload\n    /* \"#utility.yul\":3312:3403   */\n  tag_43\n  jump\t// in\ntag_100:\n    /* \"#utility.yul\":3306:3310   */\n  dup3\n    /* \"#utility.yul\":3299:3404   */\n  sstore\n    /* \"#utility.yul\":3217:3410   */\n  pop\n    /* \"#utility.yul\":3141:3410   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3416:3489   */\ntag_49:\n    /* \"#utility.yul\":3461:3464   */\n  0x00\n    /* \"#utility.yul\":3416:3489   */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":3495:3684   */\ntag_50:\n    /* \"#utility.yul\":3572:3604   */\n  tag_104\n  tag_49\n  jump\t// in\ntag_104:\n    /* \"#utility.yul\":3613:3678   */\n  tag_105\n    /* \"#utility.yul\":3671:3677   */\n  dup2\n    /* \"#utility.yul\":3663:3669   */\n  dup5\n    /* \"#utility.yul\":3657:3661   */\n  dup5\n    /* \"#utility.yul\":3613:3678   */\n  tag_48\n  jump\t// in\ntag_105:\n    /* \"#utility.yul\":3548:3684   */\n  pop\n    /* \"#utility.yul\":3495:3684   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3690:3876   */\ntag_51:\n    /* \"#utility.yul\":3750:3870   */\ntag_107:\n    /* \"#utility.yul\":3767:3770   */\n  dup2\n    /* \"#utility.yul\":3760:3765   */\n  dup2\n    /* \"#utility.yul\":3757:3771   */\n  lt\n    /* \"#utility.yul\":3750:3870   */\n  iszero\n  tag_109\n  jumpi\n    /* \"#utility.yul\":3821:3860   */\n  tag_110\n    /* \"#utility.yul\":3858:3859   */\n  0x00\n    /* \"#utility.yul\":3851:3856   */\n  dup3\n    /* \"#utility.yul\":3821:3860   */\n  tag_50\n  jump\t// in\ntag_110:\n    /* \"#utility.yul\":3794:3795   */\n  0x01\n    /* \"#utility.yul\":3787:3792   */\n  dup2\n    /* \"#utility.yul\":3783:3796   */\n  add\n    /* \"#utility.yul\":3774:3796   */\n  swap1\n  pop\n    /* \"#utility.yul\":3750:3870   */\n  jump(tag_107)\ntag_109:\n    /* \"#utility.yul\":3690:3876   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3882:4425   */\ntag_52:\n    /* \"#utility.yul\":3983:3985   */\n  0x1f\n    /* \"#utility.yul\":3978:3981   */\n  dup3\n    /* \"#utility.yul\":3975:3986   */\n  gt\n    /* \"#utility.yul\":3972:4418   */\n  iszero\n  tag_112\n  jumpi\n    /* \"#utility.yul\":4017:4055   */\n  tag_113\n    /* \"#utility.yul\":4049:4054   */\n  dup2\n    /* \"#utility.yul\":4017:4055   */\n  tag_40\n  jump\t// in\ntag_113:\n    /* \"#utility.yul\":4101:4130   */\n  tag_114\n    /* \"#utility.yul\":4119:4129   */\n  dup5\n    /* \"#utility.yul\":4101:4130   */\n  tag_41\n  jump\t// in\ntag_114:\n    /* \"#utility.yul\":4091:4099   */\n  dup2\n    /* \"#utility.yul\":4087:4131   */\n  add\n    /* \"#utility.yul\":4284:4286   */\n  0x20\n    /* \"#utility.yul\":4272:4282   */\n  dup6\n    /* \"#utility.yul\":4269:4287   */\n  lt\n    /* \"#utility.yul\":4266:4315   */\n  iszero\n  tag_115\n  jumpi\n    /* \"#utility.yul\":4305:4313   */\n  dup2\n    /* \"#utility.yul\":4290:4313   */\n  swap1\n  pop\n    /* \"#utility.yul\":4266:4315   */\ntag_115:\n    /* \"#utility.yul\":4328:4408   */\n  tag_116\n    /* \"#utility.yul\":4384:4406   */\n  tag_117\n    /* \"#utility.yul\":4402:4405   */\n  dup6\n    /* \"#utility.yul\":4384:4406   */\n  tag_41\n  jump\t// in\ntag_117:\n    /* \"#utility.yul\":4374:4382   */\n  dup4\n    /* \"#utility.yul\":4370:4407   */\n  add\n    /* \"#utility.yul\":4357:4368   */\n  dup3\n    /* \"#utility.yul\":4328:4408   */\n  tag_51\n  jump\t// in\ntag_116:\n    /* \"#utility.yul\":3987:4418   */\n  pop\n  pop\n    /* \"#utility.yul\":3972:4418   */\ntag_112:\n    /* \"#utility.yul\":3882:4425   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4431:4548   */\ntag_53:\n    /* \"#utility.yul\":4485:4493   */\n  0x00\n    /* \"#utility.yul\":4535:4540   */\n  dup3\n    /* \"#utility.yul\":4529:4533   */\n  dup3\n    /* \"#utility.yul\":4525:4541   */\n  shr\n    /* \"#utility.yul\":4504:4541   */\n  swap1\n  pop\n    /* \"#utility.yul\":4431:4548   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4554:4723   */\ntag_54:\n    /* \"#utility.yul\":4598:4604   */\n  0x00\n    /* \"#utility.yul\":4631:4682   */\n  tag_120\n    /* \"#utility.yul\":4679:4680   */\n  0x00\n    /* \"#utility.yul\":4675:4681   */\n  not\n    /* \"#utility.yul\":4667:4672   */\n  dup5\n    /* \"#utility.yul\":4664:4665   */\n  0x08\n    /* \"#utility.yul\":4660:4673   */\n  mul\n    /* \"#utility.yul\":4631:4682   */\n  tag_53\n  jump\t// in\ntag_120:\n    /* \"#utility.yul\":4627:4683   */\n  not\n    /* \"#utility.yul\":4712:4716   */\n  dup1\n    /* \"#utility.yul\":4706:4710   */\n  dup4\n    /* \"#utility.yul\":4702:4717   */\n  and\n    /* \"#utility.yul\":4692:4717   */\n  swap2\n  pop\n    /* \"#utility.yul\":4605:4723   */\n  pop\n    /* \"#utility.yul\":4554:4723   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4728:5023   */\ntag_55:\n    /* \"#utility.yul\":4804:4808   */\n  0x00\n    /* \"#utility.yul\":4950:4979   */\n  tag_122\n    /* \"#utility.yul\":4975:4978   */\n  dup4\n    /* \"#utility.yul\":4969:4973   */\n  dup4\n    /* \"#utility.yul\":4950:4979   */\n  tag_54\n  jump\t// in\ntag_122:\n    /* \"#utility.yul\":4942:4979   */\n  swap2\n  pop\n    /* \"#utility.yul\":5012:5015   */\n  dup3\n    /* \"#utility.yul\":5009:5010   */\n  0x02\n    /* \"#utility.yul\":5005:5016   */\n  mul\n    /* \"#utility.yul\":4999:5003   */\n  dup3\n    /* \"#utility.yul\":4996:5017   */\n  or\n    /* \"#utility.yul\":4988:5017   */\n  swap1\n  pop\n    /* \"#utility.yul\":4728:5023   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5028:6423   */\ntag_9:\n    /* \"#utility.yul\":5145:5182   */\n  tag_124\n    /* \"#utility.yul\":5178:5181   */\n  dup3\n    /* \"#utility.yul\":5145:5182   */\n  tag_36\n  jump\t// in\ntag_124:\n    /* \"#utility.yul\":5247:5265   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":5239:5245   */\n  dup2\n    /* \"#utility.yul\":5236:5266   */\n  gt\n    /* \"#utility.yul\":5233:5289   */\n  iszero\n  tag_125\n  jumpi\n    /* \"#utility.yul\":5269:5287   */\n  tag_126\n  tag_37\n  jump\t// in\ntag_126:\n    /* \"#utility.yul\":5233:5289   */\ntag_125:\n    /* \"#utility.yul\":5313:5351   */\n  tag_127\n    /* \"#utility.yul\":5345:5349   */\n  dup3\n    /* \"#utility.yul\":5339:5350   */\n  sload\n    /* \"#utility.yul\":5313:5351   */\n  tag_39\n  jump\t// in\ntag_127:\n    /* \"#utility.yul\":5398:5465   */\n  tag_128\n    /* \"#utility.yul\":5458:5464   */\n  dup3\n    /* \"#utility.yul\":5450:5456   */\n  dup3\n    /* \"#utility.yul\":5444:5448   */\n  dup6\n    /* \"#utility.yul\":5398:5465   */\n  tag_52\n  jump\t// in\ntag_128:\n    /* \"#utility.yul\":5492:5493   */\n  0x00\n    /* \"#utility.yul\":5516:5520   */\n  0x20\n    /* \"#utility.yul\":5503:5520   */\n  swap1\n  pop\n    /* \"#utility.yul\":5548:5550   */\n  0x1f\n    /* \"#utility.yul\":5540:5546   */\n  dup4\n    /* \"#utility.yul\":5537:5551   */\n  gt\n    /* \"#utility.yul\":5565:5566   */\n  0x01\n    /* \"#utility.yul\":5560:6178   */\n  dup2\n  eq\n  tag_130\n  jumpi\n    /* \"#utility.yul\":6222:6223   */\n  0x00\n    /* \"#utility.yul\":6239:6245   */\n  dup5\n    /* \"#utility.yul\":6236:6313   */\n  iszero\n  tag_131\n  jumpi\n    /* \"#utility.yul\":6288:6297   */\n  dup3\n    /* \"#utility.yul\":6283:6286   */\n  dup8\n    /* \"#utility.yul\":6279:6298   */\n  add\n    /* \"#utility.yul\":6273:6299   */\n  mload\n    /* \"#utility.yul\":6264:6299   */\n  swap1\n  pop\n    /* \"#utility.yul\":6236:6313   */\ntag_131:\n    /* \"#utility.yul\":6339:6406   */\n  tag_132\n    /* \"#utility.yul\":6399:6405   */\n  dup6\n    /* \"#utility.yul\":6392:6397   */\n  dup3\n    /* \"#utility.yul\":6339:6406   */\n  tag_55\n  jump\t// in\ntag_132:\n    /* \"#utility.yul\":6333:6337   */\n  dup7\n    /* \"#utility.yul\":6326:6407   */\n  sstore\n    /* \"#utility.yul\":6195:6417   */\n  pop\n    /* \"#utility.yul\":5530:6417   */\n  jump(tag_129)\n    /* \"#utility.yul\":5560:6178   */\ntag_130:\n    /* \"#utility.yul\":5612:5616   */\n  0x1f\n    /* \"#utility.yul\":5608:5617   */\n  not\n    /* \"#utility.yul\":5600:5606   */\n  dup5\n    /* \"#utility.yul\":5596:5618   */\n  and\n    /* \"#utility.yul\":5646:5683   */\n  tag_133\n    /* \"#utility.yul\":5678:5682   */\n  dup7\n    /* \"#utility.yul\":5646:5683   */\n  tag_40\n  jump\t// in\ntag_133:\n    /* \"#utility.yul\":5705:5706   */\n  0x00\n    /* \"#utility.yul\":5719:5927   */\ntag_134:\n    /* \"#utility.yul\":5733:5740   */\n  dup3\n    /* \"#utility.yul\":5730:5731   */\n  dup2\n    /* \"#utility.yul\":5727:5741   */\n  lt\n    /* \"#utility.yul\":5719:5927   */\n  iszero\n  tag_136\n  jumpi\n    /* \"#utility.yul\":5812:5821   */\n  dup5\n    /* \"#utility.yul\":5807:5810   */\n  dup10\n    /* \"#utility.yul\":5803:5822   */\n  add\n    /* \"#utility.yul\":5797:5823   */\n  mload\n    /* \"#utility.yul\":5789:5795   */\n  dup3\n    /* \"#utility.yul\":5782:5824   */\n  sstore\n    /* \"#utility.yul\":5863:5864   */\n  0x01\n    /* \"#utility.yul\":5855:5861   */\n  dup3\n    /* \"#utility.yul\":5851:5865   */\n  add\n    /* \"#utility.yul\":5841:5865   */\n  swap2\n  pop\n    /* \"#utility.yul\":5910:5912   */\n  0x20\n    /* \"#utility.yul\":5899:5908   */\n  dup6\n    /* \"#utility.yul\":5895:5913   */\n  add\n    /* \"#utility.yul\":5882:5913   */\n  swap5\n  pop\n    /* \"#utility.yul\":5756:5760   */\n  0x20\n    /* \"#utility.yul\":5753:5754   */\n  dup2\n    /* \"#utility.yul\":5749:5761   */\n  add\n    /* \"#utility.yul\":5744:5761   */\n  swap1\n  pop\n    /* \"#utility.yul\":5719:5927   */\n  jump(tag_134)\ntag_136:\n    /* \"#utility.yul\":5955:5961   */\n  dup7\n    /* \"#utility.yul\":5946:5953   */\n  dup4\n    /* \"#utility.yul\":5943:5962   */\n  lt\n    /* \"#utility.yul\":5940:6119   */\n  iszero\n  tag_137\n  jumpi\n    /* \"#utility.yul\":6013:6022   */\n  dup5\n    /* \"#utility.yul\":6008:6011   */\n  dup10\n    /* \"#utility.yul\":6004:6023   */\n  add\n    /* \"#utility.yul\":5998:6024   */\n  mload\n    /* \"#utility.yul\":6056:6104   */\n  tag_138\n    /* \"#utility.yul\":6098:6102   */\n  0x1f\n    /* \"#utility.yul\":6090:6096   */\n  dup10\n    /* \"#utility.yul\":6086:6103   */\n  and\n    /* \"#utility.yul\":6075:6084   */\n  dup3\n    /* \"#utility.yul\":6056:6104   */\n  tag_54\n  jump\t// in\ntag_138:\n    /* \"#utility.yul\":6048:6054   */\n  dup4\n    /* \"#utility.yul\":6041:6105   */\n  sstore\n    /* \"#utility.yul\":5963:6119   */\n  pop\n    /* \"#utility.yul\":5940:6119   */\ntag_137:\n    /* \"#utility.yul\":6165:6166   */\n  0x01\n    /* \"#utility.yul\":6161:6162   */\n  0x02\n    /* \"#utility.yul\":6153:6159   */\n  dup9\n    /* \"#utility.yul\":6149:6163   */\n  mul\n    /* \"#utility.yul\":6145:6167   */\n  add\n    /* \"#utility.yul\":6139:6143   */\n  dup9\n    /* \"#utility.yul\":6132:6168   */\n  sstore\n    /* \"#utility.yul\":5567:6178   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":5530:6417   */\ntag_129:\n  pop\n    /* \"#utility.yul\":5120:6423   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":5028:6423   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6429:6527   */\ntag_56:\n    /* \"#utility.yul\":6480:6486   */\n  0x00\n    /* \"#utility.yul\":6514:6519   */\n  dup2\n    /* \"#utility.yul\":6508:6520   */\n  mload\n    /* \"#utility.yul\":6498:6520   */\n  swap1\n  pop\n    /* \"#utility.yul\":6429:6527   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6533:6680   */\ntag_57:\n    /* \"#utility.yul\":6634:6645   */\n  0x00\n    /* \"#utility.yul\":6671:6674   */\n  dup2\n    /* \"#utility.yul\":6656:6674   */\n  swap1\n  pop\n    /* \"#utility.yul\":6533:6680   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6686:6825   */\ntag_58:\n    /* \"#utility.yul\":6775:6781   */\n  dup3\n    /* \"#utility.yul\":6770:6773   */\n  dup2\n    /* \"#utility.yul\":6765:6768   */\n  dup4\n    /* \"#utility.yul\":6759:6782   */\n  mcopy\n    /* \"#utility.yul\":6816:6817   */\n  0x00\n    /* \"#utility.yul\":6807:6813   */\n  dup4\n    /* \"#utility.yul\":6802:6805   */\n  dup4\n    /* \"#utility.yul\":6798:6814   */\n  add\n    /* \"#utility.yul\":6791:6818   */\n  mstore\n    /* \"#utility.yul\":6686:6825   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6831:7217   */\ntag_59:\n    /* \"#utility.yul\":6935:6938   */\n  0x00\n    /* \"#utility.yul\":6963:7001   */\n  tag_143\n    /* \"#utility.yul\":6995:7000   */\n  dup3\n    /* \"#utility.yul\":6963:7001   */\n  tag_56\n  jump\t// in\ntag_143:\n    /* \"#utility.yul\":7017:7105   */\n  tag_144\n    /* \"#utility.yul\":7098:7104   */\n  dup2\n    /* \"#utility.yul\":7093:7096   */\n  dup6\n    /* \"#utility.yul\":7017:7105   */\n  tag_57\n  jump\t// in\ntag_144:\n    /* \"#utility.yul\":7010:7105   */\n  swap4\n  pop\n    /* \"#utility.yul\":7114:7179   */\n  tag_145\n    /* \"#utility.yul\":7172:7178   */\n  dup2\n    /* \"#utility.yul\":7167:7170   */\n  dup6\n    /* \"#utility.yul\":7160:7164   */\n  0x20\n    /* \"#utility.yul\":7153:7158   */\n  dup7\n    /* \"#utility.yul\":7149:7165   */\n  add\n    /* \"#utility.yul\":7114:7179   */\n  tag_58\n  jump\t// in\ntag_145:\n    /* \"#utility.yul\":7204:7210   */\n  dup1\n    /* \"#utility.yul\":7199:7202   */\n  dup5\n    /* \"#utility.yul\":7195:7211   */\n  add\n    /* \"#utility.yul\":7188:7211   */\n  swap2\n  pop\n    /* \"#utility.yul\":6939:7217   */\n  pop\n    /* \"#utility.yul\":6831:7217   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7223:7494   */\ntag_20:\n    /* \"#utility.yul\":7353:7356   */\n  0x00\n    /* \"#utility.yul\":7375:7468   */\n  tag_147\n    /* \"#utility.yul\":7464:7467   */\n  dup3\n    /* \"#utility.yul\":7455:7461   */\n  dup5\n    /* \"#utility.yul\":7375:7468   */\n  tag_59\n  jump\t// in\ntag_147:\n    /* \"#utility.yul\":7368:7468   */\n  swap2\n  pop\n    /* \"#utility.yul\":7485:7488   */\n  dup2\n    /* \"#utility.yul\":7478:7488   */\n  swap1\n  pop\n    /* \"#utility.yul\":7223:7494   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7500:7622   */\ntag_60:\n    /* \"#utility.yul\":7573:7597   */\n  tag_149\n    /* \"#utility.yul\":7591:7596   */\n  dup2\n    /* \"#utility.yul\":7573:7597   */\n  tag_44\n  jump\t// in\ntag_149:\n    /* \"#utility.yul\":7566:7571   */\n  dup2\n    /* \"#utility.yul\":7563:7598   */\n  eq\n    /* \"#utility.yul\":7553:7616   */\n  tag_150\n  jumpi\n    /* \"#utility.yul\":7612:7613   */\n  0x00\n    /* \"#utility.yul\":7609:7610   */\n  dup1\n    /* \"#utility.yul\":7602:7614   */\n  revert\n    /* \"#utility.yul\":7553:7616   */\ntag_150:\n    /* \"#utility.yul\":7500:7622   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7628:7771   */\ntag_61:\n    /* \"#utility.yul\":7685:7690   */\n  0x00\n    /* \"#utility.yul\":7716:7722   */\n  dup2\n    /* \"#utility.yul\":7710:7723   */\n  mload\n    /* \"#utility.yul\":7701:7723   */\n  swap1\n  pop\n    /* \"#utility.yul\":7732:7765   */\n  tag_152\n    /* \"#utility.yul\":7759:7764   */\n  dup2\n    /* \"#utility.yul\":7732:7765   */\n  tag_60\n  jump\t// in\ntag_152:\n    /* \"#utility.yul\":7628:7771   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7777:8128   */\ntag_27:\n    /* \"#utility.yul\":7847:7853   */\n  0x00\n    /* \"#utility.yul\":7896:7898   */\n  0x20\n    /* \"#utility.yul\":7884:7893   */\n  dup3\n    /* \"#utility.yul\":7875:7882   */\n  dup5\n    /* \"#utility.yul\":7871:7894   */\n  sub\n    /* \"#utility.yul\":7867:7899   */\n  slt\n    /* \"#utility.yul\":7864:7983   */\n  iszero\n  tag_154\n  jumpi\n    /* \"#utility.yul\":7902:7981   */\n  tag_155\n  tag_30\n  jump\t// in\ntag_155:\n    /* \"#utility.yul\":7864:7983   */\ntag_154:\n    /* \"#utility.yul\":8022:8023   */\n  0x00\n    /* \"#utility.yul\":8047:8111   */\n  tag_156\n    /* \"#utility.yul\":8103:8110   */\n  dup5\n    /* \"#utility.yul\":8094:8100   */\n  dup3\n    /* \"#utility.yul\":8083:8092   */\n  dup6\n    /* \"#utility.yul\":8079:8101   */\n  add\n    /* \"#utility.yul\":8047:8111   */\n  tag_61\n  jump\t// in\ntag_156:\n    /* \"#utility.yul\":8037:8111   */\n  swap2\n  pop\n    /* \"#utility.yul\":7993:8121   */\n  pop\n    /* \"#utility.yul\":7777:8128   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/Vault.sol\":193:2835  contract LiquidityVault is ERC4626 {... */\ntag_17:\n  mload(0x80)\n  mload(0xa0)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x795dcf830090319074c4e36a23e7ad6013124a9e4afc765f3f324f667dfac3a5\")\n  0x00\n  assignImmutable(\"0xe3fb6c7a68b97a1574f1623712f47cd0a60a3212aae0a2101a56c312e7330127\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/Vault.sol\":193:2835  contract LiquidityVault is ERC4626 {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x92bdf9ba\n      gt\n      tag_30\n      jumpi\n      dup1\n      0xba087652\n      gt\n      tag_31\n      jumpi\n      dup1\n      0xce96cb77\n      gt\n      tag_32\n      jumpi\n      dup1\n      0xce96cb77\n      eq\n      tag_26\n      jumpi\n      dup1\n      0xd905777e\n      eq\n      tag_27\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_28\n      jumpi\n      dup1\n      0xef8b30f7\n      eq\n      tag_29\n      jumpi\n      jump(tag_2)\n    tag_32:\n      dup1\n      0xba087652\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xc63d75b6\n      eq\n      tag_24\n      jumpi\n      dup1\n      0xc6e6f592\n      eq\n      tag_25\n      jumpi\n      jump(tag_2)\n    tag_31:\n      dup1\n      0x9d76ea58\n      gt\n      tag_33\n      jumpi\n      dup1\n      0x9d76ea58\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xb3d7f6b9\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xb460af94\n      eq\n      tag_22\n      jumpi\n      jump(tag_2)\n    tag_33:\n      dup1\n      0x92bdf9ba\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x94bf804d\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_18\n      jumpi\n      jump(tag_2)\n    tag_30:\n      dup1\n      0x23b872dd\n      gt\n      tag_34\n      jumpi\n      dup1\n      0x402d267d\n      gt\n      tag_35\n      jumpi\n      dup1\n      0x402d267d\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x4cdad506\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x6e553f65\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_15\n      jumpi\n      jump(tag_2)\n    tag_35:\n      dup1\n      0x23b872dd\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x38d52e0f\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_34:\n      dup1\n      0x01e1d114\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x07a2d13a\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x0a28a477\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5780:5896  function totalAssets() public view virtual returns (uint256) {... */\n    tag_3:\n      tag_36\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      tag_38\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_4:\n      tag_40\n      tag_41\n      jump\t// in\n    tag_40:\n      mload(0x40)\n      tag_42\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6152:6300  function convertToAssets(uint256 shares) public view virtual returns (uint256) {... */\n    tag_5:\n      tag_44\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_45\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_45:\n      tag_47\n      jump\t// in\n    tag_44:\n      mload(0x40)\n      tag_48\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_48:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_6:\n      tag_49\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_50\n      swap2\n      swap1\n      tag_51\n      jump\t// in\n    tag_50:\n      tag_52\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      tag_53\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Vault.sol\":1667:2005  function previewWithdraw(uint256 assets) public view override returns (uint256) {... */\n    tag_7:\n      tag_55\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_56\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_56:\n      tag_57\n      jump\t// in\n    tag_55:\n      mload(0x40)\n      tag_58\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_58:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_8:\n      tag_59\n      tag_60\n      jump\t// in\n    tag_59:\n      mload(0x40)\n      tag_61\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_61:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_9:\n      tag_62\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_63\n      swap2\n      swap1\n      tag_64\n      jump\t// in\n    tag_63:\n      tag_65\n      jump\t// in\n    tag_62:\n      mload(0x40)\n      tag_66\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_66:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5441:5592  function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {... */\n    tag_10:\n      tag_67\n      tag_68\n      jump\t// in\n    tag_67:\n      mload(0x40)\n      tag_69\n      swap2\n      swap1\n      tag_70\n      jump\t// in\n    tag_69:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5636:5730  function asset() public view virtual returns (address) {... */\n    tag_11:\n      tag_71\n      tag_72\n      jump\t// in\n    tag_71:\n      mload(0x40)\n      tag_73\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_73:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6349:6457  function maxDeposit(address) public view virtual returns (uint256) {... */\n    tag_12:\n      tag_75\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_76\n      swap2\n      swap1\n      tag_77\n      jump\t// in\n    tag_76:\n      tag_78\n      jump\t// in\n    tag_75:\n      mload(0x40)\n      tag_79\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_79:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7617:7763  function previewRedeem(uint256 shares) public view virtual returns (uint256) {... */\n    tag_13:\n      tag_80\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_81\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_81:\n      tag_82\n      jump\t// in\n    tag_80:\n      mload(0x40)\n      tag_83\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_83:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Vault.sol\":759:1046  function deposit(uint256 assets, address receiver) public override returns (uint256) {... */\n    tag_14:\n      tag_84\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_85\n      swap2\n      swap1\n      tag_86\n      jump\t// in\n    tag_85:\n      tag_87\n      jump\t// in\n    tag_84:\n      mload(0x40)\n      tag_88\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_88:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_15:\n      tag_89\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_90\n      swap2\n      swap1\n      tag_77\n      jump\t// in\n    tag_90:\n      tag_91\n      jump\t// in\n    tag_89:\n      mload(0x40)\n      tag_92\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_92:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Vault.sol\":279:330  mapping(address => uint256) public lockedCollateral */\n    tag_16:\n      tag_93\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_94\n      swap2\n      swap1\n      tag_77\n      jump\t// in\n    tag_94:\n      tag_95\n      jump\t// in\n    tag_93:\n      mload(0x40)\n      tag_96\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_96:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8468:8848  function mint(uint256 shares, address receiver) public virtual returns (uint256) {... */\n    tag_17:\n      tag_97\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_98\n      swap2\n      swap1\n      tag_86\n      jump\t// in\n    tag_98:\n      tag_99\n      jump\t// in\n    tag_97:\n      mload(0x40)\n      tag_100\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_18:\n      tag_101\n      tag_102\n      jump\t// in\n    tag_101:\n      mload(0x40)\n      tag_103\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_103:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Vault.sol\":337:364  address public tokenAddress */\n    tag_19:\n      tag_104\n      tag_105\n      jump\t// in\n    tag_104:\n      mload(0x40)\n      tag_106\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_106:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_20:\n      tag_107\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_108\n      swap2\n      swap1\n      tag_51\n      jump\t// in\n    tag_108:\n      tag_109\n      jump\t// in\n    tag_107:\n      mload(0x40)\n      tag_110\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_110:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7221:7364  function previewMint(uint256 shares) public view virtual returns (uint256) {... */\n    tag_21:\n      tag_111\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_112\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_112:\n      tag_113\n      jump\t// in\n    tag_111:\n      mload(0x40)\n      tag_114\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_114:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Vault.sol\":1114:1590  function withdraw(uint256 assets, address receiver, address owner) public override returns (uint256) {... */\n    tag_22:\n      tag_115\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_116\n      swap2\n      swap1\n      tag_117\n      jump\t// in\n    tag_116:\n      tag_118\n      jump\t// in\n    tag_115:\n      mload(0x40)\n      tag_119\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_119:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9353:9758  function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {... */\n    tag_23:\n      tag_120\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_121\n      swap2\n      swap1\n      tag_117\n      jump\t// in\n    tag_121:\n      tag_122\n      jump\t// in\n    tag_120:\n      mload(0x40)\n      tag_123\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_123:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6503:6608  function maxMint(address) public view virtual returns (uint256) {... */\n    tag_24:\n      tag_124\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_125\n      swap2\n      swap1\n      tag_77\n      jump\t// in\n    tag_125:\n      tag_126\n      jump\t// in\n    tag_124:\n      mload(0x40)\n      tag_127\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_127:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5950:6098  function convertToShares(uint256 assets) public view virtual returns (uint256) {... */\n    tag_25:\n      tag_128\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_129\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_129:\n      tag_130\n      jump\t// in\n    tag_128:\n      mload(0x40)\n      tag_131\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_131:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Vault.sol\":2504:2833  function maxWithdraw(address owner) public view override returns (uint256) {... */\n    tag_26:\n      tag_132\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_133\n      swap2\n      swap1\n      tag_77\n      jump\t// in\n    tag_133:\n      tag_134\n      jump\t// in\n    tag_132:\n      mload(0x40)\n      tag_135\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6859:6971  function maxRedeem(address owner) public view virtual returns (uint256) {... */\n    tag_27:\n      tag_136\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_137\n      swap2\n      swap1\n      tag_77\n      jump\t// in\n    tag_137:\n      tag_138\n      jump\t// in\n    tag_136:\n      mload(0x40)\n      tag_139\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_139:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_28:\n      tag_140\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_141\n      swap2\n      swap1\n      tag_142\n      jump\t// in\n    tag_141:\n      tag_143\n      jump\t// in\n    tag_140:\n      mload(0x40)\n      tag_144\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_144:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7024:7171  function previewDeposit(uint256 assets) public view virtual returns (uint256) {... */\n    tag_29:\n      tag_145\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_146\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_146:\n      tag_147\n      jump\t// in\n    tag_145:\n      mload(0x40)\n      tag_148\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_148:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5780:5896  function totalAssets() public view virtual returns (uint256) {... */\n    tag_37:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5832:5839  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5858:5864  _asset */\n      immutable(\"0xe3fb6c7a68b97a1574f1623712f47cd0a60a3212aae0a2101a56c312e7330127\")\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5858:5874  _asset.balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5883:5887  this */\n      address\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5858:5889  _asset.balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_150\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_150:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_152\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_152:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_153\n      swap2\n      swap1\n      tag_154\n      jump\t// in\n    tag_153:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5851:5889  return _asset.balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5780:5896  function totalAssets() public view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_41:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2119:2132  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2151:2156  _name */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2144:2156  return _name */\n      dup1\n      sload\n      tag_156\n      swap1\n      tag_157\n      jump\t// in\n    tag_156:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_158\n      swap1\n      tag_157\n      jump\t// in\n    tag_158:\n      dup1\n      iszero\n      tag_159\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_160\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_159)\n    tag_160:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_161:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_161\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_159:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6152:6300  function convertToAssets(uint256 shares) public view virtual returns (uint256) {... */\n    tag_47:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6222:6229  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6248:6293  _convertToAssets(shares, Math.Rounding.Floor) */\n      tag_163\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6265:6271  shares */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6273:6292  Math.Rounding.Floor */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6248:6264  _convertToAssets */\n      tag_164\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6248:6293  _convertToAssets(shares, Math.Rounding.Floor) */\n      jump\t// in\n    tag_163:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6241:6293  return _convertToAssets(shares, Math.Rounding.Floor) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6152:6300  function convertToAssets(uint256 shares) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4366:4370  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4382:4395  address owner */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4398:4410  _msgSender() */\n      tag_166\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4398:4408  _msgSender */\n      tag_167\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4398:4410  _msgSender() */\n      jump\t// in\n    tag_166:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4382:4410  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      tag_168\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4429:4434  owner */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4436:4443  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4445:4450  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4428  _approve */\n      tag_169\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      jump\t// in\n    tag_168:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4468:4472  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4461:4472  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Vault.sol\":1667:2005  function previewWithdraw(uint256 assets) public view override returns (uint256) {... */\n    tag_57:\n        /* \"contracts/Vault.sol\":1738:1745  uint256 */\n      0x00\n        /* \"contracts/Vault.sol\":1757:1780  uint256 availableAssets */\n      dup1\n        /* \"contracts/Vault.sol\":1783:1812  super.previewWithdraw(assets) */\n      tag_171\n        /* \"contracts/Vault.sol\":1805:1811  assets */\n      dup4\n        /* \"contracts/Vault.sol\":1783:1804  super.previewWithdraw */\n      tag_172\n        /* \"contracts/Vault.sol\":1783:1812  super.previewWithdraw(assets) */\n      jump\t// in\n    tag_171:\n        /* \"contracts/Vault.sol\":1757:1812  uint256 availableAssets = super.previewWithdraw(assets) */\n      swap1\n      pop\n        /* \"contracts/Vault.sol\":1822:1842  uint256 lockedAssets */\n      0x00\n        /* \"contracts/Vault.sol\":1845:1861  lockedCollateral */\n      0x05\n        /* \"contracts/Vault.sol\":1845:1873  lockedCollateral[msg.sender] */\n      0x00\n        /* \"contracts/Vault.sol\":1862:1872  msg.sender */\n      caller\n        /* \"contracts/Vault.sol\":1845:1873  lockedCollateral[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Vault.sol\":1822:1873  uint256 lockedAssets = lockedCollateral[msg.sender] */\n      swap1\n      pop\n        /* \"contracts/Vault.sol\":1905:1917  lockedAssets */\n      dup1\n        /* \"contracts/Vault.sol\":1887:1902  availableAssets */\n      dup3\n        /* \"contracts/Vault.sol\":1887:1917  availableAssets > lockedAssets */\n      gt\n        /* \"contracts/Vault.sol\":1883:1981  if (availableAssets > lockedAssets) {... */\n      iszero\n      tag_173\n      jumpi\n        /* \"contracts/Vault.sol\":1958:1970  lockedAssets */\n      dup1\n        /* \"contracts/Vault.sol\":1940:1955  availableAssets */\n      dup3\n        /* \"contracts/Vault.sol\":1940:1970  availableAssets - lockedAssets */\n      tag_174\n      swap2\n      swap1\n      tag_175\n      jump\t// in\n    tag_174:\n        /* \"contracts/Vault.sol\":1933:1970  return availableAssets - lockedAssets */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_170)\n        /* \"contracts/Vault.sol\":1883:1981  if (availableAssets > lockedAssets) {... */\n    tag_173:\n        /* \"contracts/Vault.sol\":1997:1998  0 */\n      0x00\n        /* \"contracts/Vault.sol\":1990:1998  return 0 */\n      swap3\n      pop\n      pop\n      pop\n        /* \"contracts/Vault.sol\":1667:2005  function previewWithdraw(uint256 assets) public view override returns (uint256) {... */\n    tag_170:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_60:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3196:3203  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3222:3234  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3215:3234  return _totalSupply */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_65:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5126:5130  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5142:5157  address spender */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5160:5172  _msgSender() */\n      tag_178\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5160:5170  _msgSender */\n      tag_167\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5160:5172  _msgSender() */\n      jump\t// in\n    tag_178:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5142:5172  address spender = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      tag_179\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5198:5202  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5204:5211  spender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5213:5218  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5197  _spendAllowance */\n      tag_180\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_179:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      tag_181\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5239:5243  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5245:5247  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5249:5254  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5238  _transfer */\n      tag_182\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      jump\t// in\n    tag_181:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5272:5276  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5265:5276  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5441:5592  function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {... */\n    tag_68:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5522:5527  uint8 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5568:5585  _decimalsOffset() */\n      tag_184\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5568:5583  _decimalsOffset */\n      tag_185\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5568:5585  _decimalsOffset() */\n      jump\t// in\n    tag_184:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5546:5565  _underlyingDecimals */\n      immutable(\"0x795dcf830090319074c4e36a23e7ad6013124a9e4afc765f3f324f667dfac3a5\")\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5546:5585  _underlyingDecimals + _decimalsOffset() */\n      tag_186\n      swap2\n      swap1\n      tag_187\n      jump\t// in\n    tag_186:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5539:5585  return _underlyingDecimals + _decimalsOffset() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5441:5592  function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5636:5730  function asset() public view virtual returns (address) {... */\n    tag_72:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5682:5689  address */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5716:5722  _asset */\n      immutable(\"0xe3fb6c7a68b97a1574f1623712f47cd0a60a3212aae0a2101a56c312e7330127\")\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5701:5723  return address(_asset) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5636:5730  function asset() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6349:6457  function maxDeposit(address) public view virtual returns (uint256) {... */\n    tag_78:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6407:6414  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6433:6450  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6426:6450  return type(uint256).max */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6349:6457  function maxDeposit(address) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7617:7763  function previewRedeem(uint256 shares) public view virtual returns (uint256) {... */\n    tag_82:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7685:7692  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7711:7756  _convertToAssets(shares, Math.Rounding.Floor) */\n      tag_191\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7728:7734  shares */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7736:7755  Math.Rounding.Floor */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7711:7727  _convertToAssets */\n      tag_164\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7711:7756  _convertToAssets(shares, Math.Rounding.Floor) */\n      jump\t// in\n    tag_191:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7704:7756  return _convertToAssets(shares, Math.Rounding.Floor) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7617:7763  function previewRedeem(uint256 shares) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Vault.sol\":759:1046  function deposit(uint256 assets, address receiver) public override returns (uint256) {... */\n    tag_87:\n        /* \"contracts/Vault.sol\":835:842  uint256 */\n      0x00\n        /* \"contracts/Vault.sol\":854:868  uint256 shares */\n      dup1\n        /* \"contracts/Vault.sol\":871:902  super.deposit(assets, receiver) */\n      tag_193\n        /* \"contracts/Vault.sol\":885:891  assets */\n      dup5\n        /* \"contracts/Vault.sol\":893:901  receiver */\n      dup5\n        /* \"contracts/Vault.sol\":871:884  super.deposit */\n      tag_194\n        /* \"contracts/Vault.sol\":871:902  super.deposit(assets, receiver) */\n      jump\t// in\n    tag_193:\n        /* \"contracts/Vault.sol\":854:902  uint256 shares = super.deposit(assets, receiver) */\n      swap1\n      pop\n        /* \"contracts/Vault.sol\":942:948  assets */\n      dup4\n        /* \"contracts/Vault.sol\":912:928  lockedCollateral */\n      0x05\n        /* \"contracts/Vault.sol\":912:938  lockedCollateral[receiver] */\n      0x00\n        /* \"contracts/Vault.sol\":929:937  receiver */\n      dup6\n        /* \"contracts/Vault.sol\":912:938  lockedCollateral[receiver] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/Vault.sol\":912:948  lockedCollateral[receiver] += assets */\n      dup3\n      dup3\n      sload\n      tag_195\n      swap2\n      swap1\n      tag_196\n      jump\t// in\n    tag_195:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Vault.sol\":999:1007  receiver */\n      dup3\n        /* \"contracts/Vault.sol\":982:1016  CollateralLocked(receiver, assets) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x2251f6a4ed7fe619e9e8ce557d05a63dd484284f9c95c9ab334f6a7707cd0800\n        /* \"contracts/Vault.sol\":1009:1015  assets */\n      dup6\n        /* \"contracts/Vault.sol\":982:1016  CollateralLocked(receiver, assets) */\n      mload(0x40)\n      tag_197\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_197:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/Vault.sol\":1033:1039  shares */\n      dup1\n        /* \"contracts/Vault.sol\":1026:1039  return shares */\n      swap2\n      pop\n      pop\n        /* \"contracts/Vault.sol\":759:1046  function deposit(uint256 assets, address receiver) public override returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_91:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3364:3371  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3399  _balances */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3400:3407  account */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3383:3408  return _balances[account] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Vault.sol\":279:330  mapping(address => uint256) public lockedCollateral */\n    tag_95:\n      mstore(0x20, 0x05)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8468:8848  function mint(uint256 shares, address receiver) public virtual returns (uint256) {... */\n    tag_99:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8540:8547  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8559:8576  uint256 maxShares */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8579:8596  maxMint(receiver) */\n      tag_200\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8587:8595  receiver */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8579:8586  maxMint */\n      tag_126\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8579:8596  maxMint(receiver) */\n      jump\t// in\n    tag_200:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8559:8596  uint256 maxShares = maxMint(receiver) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8619:8628  maxShares */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8610:8616  shares */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8610:8628  shares > maxShares */\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8606:8713  if (shares > maxShares) {... */\n      iszero\n      tag_201\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8674:8682  receiver */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8684:8690  shares */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8692:8701  maxShares */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8651:8702  ERC4626ExceededMaxMint(receiver, shares, maxShares) */\n      mload(0x40)\n      0x284ff66700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_202\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_203\n      jump\t// in\n    tag_202:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8606:8713  if (shares > maxShares) {... */\n    tag_201:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8723:8737  uint256 assets */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8740:8759  previewMint(shares) */\n      tag_204\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8752:8758  shares */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8740:8751  previewMint */\n      tag_113\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8740:8759  previewMint(shares) */\n      jump\t// in\n    tag_204:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8723:8759  uint256 assets = previewMint(shares) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8769:8817  _deposit(_msgSender(), receiver, assets, shares) */\n      tag_205\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8778:8790  _msgSender() */\n      tag_206\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8778:8788  _msgSender */\n      tag_167\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8778:8790  _msgSender() */\n      jump\t// in\n    tag_206:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8792:8800  receiver */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8802:8808  assets */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8810:8816  shares */\n      dup9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8769:8777  _deposit */\n      tag_207\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8769:8817  _deposit(_msgSender(), receiver, assets, shares) */\n      jump\t// in\n    tag_205:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8835:8841  assets */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8828:8841  return assets */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8468:8848  function mint(uint256 shares, address receiver) public virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_102:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2323:2336  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2362  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2348:2362  return _symbol */\n      dup1\n      sload\n      tag_209\n      swap1\n      tag_157\n      jump\t// in\n    tag_209:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_210\n      swap1\n      tag_157\n      jump\t// in\n    tag_210:\n      dup1\n      iszero\n      tag_211\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_212\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_211)\n    tag_212:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_213:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_213\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_211:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/Vault.sol\":337:364  address public tokenAddress */\n    tag_105:\n      0x06\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_109:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3679:3683  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3695:3708  address owner */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3711:3723  _msgSender() */\n      tag_215\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3711:3721  _msgSender */\n      tag_167\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3711:3723  _msgSender() */\n      jump\t// in\n    tag_215:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3695:3723  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      tag_216\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3743:3748  owner */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3750:3752  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3754:3759  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3742  _transfer */\n      tag_182\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      jump\t// in\n    tag_216:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3777:3781  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3770:3781  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7221:7364  function previewMint(uint256 shares) public view virtual returns (uint256) {... */\n    tag_113:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7287:7294  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7313:7357  _convertToAssets(shares, Math.Rounding.Ceil) */\n      tag_218\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7330:7336  shares */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7338:7356  Math.Rounding.Ceil */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7313:7329  _convertToAssets */\n      tag_164\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7313:7357  _convertToAssets(shares, Math.Rounding.Ceil) */\n      jump\t// in\n    tag_218:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7306:7357  return _convertToAssets(shares, Math.Rounding.Ceil) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7221:7364  function previewMint(uint256 shares) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Vault.sol\":1114:1590  function withdraw(uint256 assets, address receiver, address owner) public override returns (uint256) {... */\n    tag_118:\n        /* \"contracts/Vault.sol\":1206:1213  uint256 */\n      0x00\n        /* \"contracts/Vault.sol\":1243:1261  maxWithdraw(owner) */\n      tag_220\n        /* \"contracts/Vault.sol\":1255:1260  owner */\n      dup3\n        /* \"contracts/Vault.sol\":1243:1254  maxWithdraw */\n      tag_134\n        /* \"contracts/Vault.sol\":1243:1261  maxWithdraw(owner) */\n      jump\t// in\n    tag_220:\n        /* \"contracts/Vault.sol\":1233:1239  assets */\n      dup5\n        /* \"contracts/Vault.sol\":1233:1261  assets <= maxWithdraw(owner) */\n      gt\n      iszero\n        /* \"contracts/Vault.sol\":1225:1293  require(assets <= maxWithdraw(owner), \"Exceeds max withdraw amount\") */\n      tag_221\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_222\n      swap1\n      tag_223\n      jump\t// in\n    tag_222:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_221:\n        /* \"contracts/Vault.sol\":1321:1337  lockedCollateral */\n      0x05\n        /* \"contracts/Vault.sol\":1321:1344  lockedCollateral[owner] */\n      0x00\n        /* \"contracts/Vault.sol\":1338:1343  owner */\n      dup4\n        /* \"contracts/Vault.sol\":1321:1344  lockedCollateral[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Vault.sol\":1311:1317  assets */\n      dup5\n        /* \"contracts/Vault.sol\":1311:1344  assets <= lockedCollateral[owner] */\n      gt\n      iszero\n        /* \"contracts/Vault.sol\":1303:1382  require(assets <= lockedCollateral[owner], \"Cannot withdraw locked collateral\") */\n      tag_224\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_225\n      swap1\n      tag_226\n      jump\t// in\n    tag_225:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_224:\n        /* \"contracts/Vault.sol\":1392:1406  uint256 shares */\n      0x00\n        /* \"contracts/Vault.sol\":1409:1448  super.withdraw(assets, receiver, owner) */\n      tag_227\n        /* \"contracts/Vault.sol\":1424:1430  assets */\n      dup6\n        /* \"contracts/Vault.sol\":1432:1440  receiver */\n      dup6\n        /* \"contracts/Vault.sol\":1442:1447  owner */\n      dup6\n        /* \"contracts/Vault.sol\":1409:1423  super.withdraw */\n      tag_228\n        /* \"contracts/Vault.sol\":1409:1448  super.withdraw(assets, receiver, owner) */\n      jump\t// in\n    tag_227:\n        /* \"contracts/Vault.sol\":1392:1448  uint256 shares = super.withdraw(assets, receiver, owner) */\n      swap1\n      pop\n        /* \"contracts/Vault.sol\":1485:1491  assets */\n      dup5\n        /* \"contracts/Vault.sol\":1458:1474  lockedCollateral */\n      0x05\n        /* \"contracts/Vault.sol\":1458:1481  lockedCollateral[owner] */\n      0x00\n        /* \"contracts/Vault.sol\":1475:1480  owner */\n      dup6\n        /* \"contracts/Vault.sol\":1458:1481  lockedCollateral[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/Vault.sol\":1458:1491  lockedCollateral[owner] -= assets */\n      dup3\n      dup3\n      sload\n      tag_229\n      swap2\n      swap1\n      tag_175\n      jump\t// in\n    tag_229:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Vault.sol\":1546:1551  owner */\n      dup3\n        /* \"contracts/Vault.sol\":1527:1560  CollateralUnlocked(owner, assets) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xb4eaf47ecd4bc76248f192433e8067c96cb3e17aced42fbc47a512742fb74216\n        /* \"contracts/Vault.sol\":1553:1559  assets */\n      dup7\n        /* \"contracts/Vault.sol\":1527:1560  CollateralUnlocked(owner, assets) */\n      mload(0x40)\n      tag_230\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_230:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/Vault.sol\":1577:1583  shares */\n      dup1\n        /* \"contracts/Vault.sol\":1570:1583  return shares */\n      swap2\n      pop\n      pop\n        /* \"contracts/Vault.sol\":1114:1590  function withdraw(uint256 assets, address receiver, address owner) public override returns (uint256) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9353:9758  function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {... */\n    tag_122:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9442:9449  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9461:9478  uint256 maxShares */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9481:9497  maxRedeem(owner) */\n      tag_232\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9491:9496  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9481:9490  maxRedeem */\n      tag_138\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9481:9497  maxRedeem(owner) */\n      jump\t// in\n    tag_232:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9461:9497  uint256 maxShares = maxRedeem(owner) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9520:9529  maxShares */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9511:9517  shares */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9511:9529  shares > maxShares */\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9507:9613  if (shares > maxShares) {... */\n      iszero\n      tag_233\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9577:9582  owner */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9584:9590  shares */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9592:9601  maxShares */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9552:9602  ERC4626ExceededMaxRedeem(owner, shares, maxShares) */\n      mload(0x40)\n      0xb94abeec00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_234\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_203\n      jump\t// in\n    tag_234:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9507:9613  if (shares > maxShares) {... */\n    tag_233:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9623:9637  uint256 assets */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9640:9661  previewRedeem(shares) */\n      tag_235\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9654:9660  shares */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9640:9653  previewRedeem */\n      tag_82\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9640:9661  previewRedeem(shares) */\n      jump\t// in\n    tag_235:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9623:9661  uint256 assets = previewRedeem(shares) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9671:9727  _withdraw(_msgSender(), receiver, owner, assets, shares) */\n      tag_236\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9681:9693  _msgSender() */\n      tag_237\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9681:9691  _msgSender */\n      tag_167\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9681:9693  _msgSender() */\n      jump\t// in\n    tag_237:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9695:9703  receiver */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9705:9710  owner */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9712:9718  assets */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9720:9726  shares */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9671:9680  _withdraw */\n      tag_238\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9671:9727  _withdraw(_msgSender(), receiver, owner, assets, shares) */\n      jump\t// in\n    tag_236:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9745:9751  assets */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9738:9751  return assets */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9353:9758  function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6503:6608  function maxMint(address) public view virtual returns (uint256) {... */\n    tag_126:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6558:6565  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6584:6601  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6577:6601  return type(uint256).max */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6503:6608  function maxMint(address) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5950:6098  function convertToShares(uint256 assets) public view virtual returns (uint256) {... */\n    tag_130:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6020:6027  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6046:6091  _convertToShares(assets, Math.Rounding.Floor) */\n      tag_241\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6063:6069  assets */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6071:6090  Math.Rounding.Floor */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6046:6062  _convertToShares */\n      tag_242\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6046:6091  _convertToShares(assets, Math.Rounding.Floor) */\n      jump\t// in\n    tag_241:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6039:6091  return _convertToShares(assets, Math.Rounding.Floor) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5950:6098  function convertToShares(uint256 assets) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Vault.sol\":2504:2833  function maxWithdraw(address owner) public view override returns (uint256) {... */\n    tag_134:\n        /* \"contracts/Vault.sol\":2570:2577  uint256 */\n      0x00\n        /* \"contracts/Vault.sol\":2589:2614  uint256 maxWithdrawAmount */\n      dup1\n        /* \"contracts/Vault.sol\":2617:2641  super.maxWithdraw(owner) */\n      tag_244\n        /* \"contracts/Vault.sol\":2635:2640  owner */\n      dup4\n        /* \"contracts/Vault.sol\":2617:2634  super.maxWithdraw */\n      tag_245\n        /* \"contracts/Vault.sol\":2617:2641  super.maxWithdraw(owner) */\n      jump\t// in\n    tag_244:\n        /* \"contracts/Vault.sol\":2589:2641  uint256 maxWithdrawAmount = super.maxWithdraw(owner) */\n      swap1\n      pop\n        /* \"contracts/Vault.sol\":2651:2671  uint256 lockedAssets */\n      0x00\n        /* \"contracts/Vault.sol\":2674:2690  lockedCollateral */\n      0x05\n        /* \"contracts/Vault.sol\":2674:2697  lockedCollateral[owner] */\n      0x00\n        /* \"contracts/Vault.sol\":2691:2696  owner */\n      dup6\n        /* \"contracts/Vault.sol\":2674:2697  lockedCollateral[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Vault.sol\":2651:2697  uint256 lockedAssets = lockedCollateral[owner] */\n      swap1\n      pop\n        /* \"contracts/Vault.sol\":2731:2743  lockedAssets */\n      dup1\n        /* \"contracts/Vault.sol\":2711:2728  maxWithdrawAmount */\n      dup3\n        /* \"contracts/Vault.sol\":2711:2743  maxWithdrawAmount > lockedAssets */\n      gt\n        /* \"contracts/Vault.sol\":2707:2809  if (maxWithdrawAmount > lockedAssets) {... */\n      iszero\n      tag_246\n      jumpi\n        /* \"contracts/Vault.sol\":2786:2798  lockedAssets */\n      dup1\n        /* \"contracts/Vault.sol\":2766:2783  maxWithdrawAmount */\n      dup3\n        /* \"contracts/Vault.sol\":2766:2798  maxWithdrawAmount - lockedAssets */\n      tag_247\n      swap2\n      swap1\n      tag_175\n      jump\t// in\n    tag_247:\n        /* \"contracts/Vault.sol\":2759:2798  return maxWithdrawAmount - lockedAssets */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_243)\n        /* \"contracts/Vault.sol\":2707:2809  if (maxWithdrawAmount > lockedAssets) {... */\n    tag_246:\n        /* \"contracts/Vault.sol\":2825:2826  0 */\n      0x00\n        /* \"contracts/Vault.sol\":2818:2826  return 0 */\n      swap3\n      pop\n      pop\n      pop\n        /* \"contracts/Vault.sol\":2504:2833  function maxWithdraw(address owner) public view override returns (uint256) {... */\n    tag_243:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6859:6971  function maxRedeem(address owner) public view virtual returns (uint256) {... */\n    tag_138:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6922:6929  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6948:6964  balanceOf(owner) */\n      tag_249\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6958:6963  owner */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6948:6957  balanceOf */\n      tag_91\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6948:6964  balanceOf(owner) */\n      jump\t// in\n    tag_249:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6941:6964  return balanceOf(owner) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6859:6971  function maxRedeem(address owner) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_143:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3926:3933  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3963  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3964:3969  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3971:3978  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3945:3979  return _allowances[owner][spender] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7024:7171  function previewDeposit(uint256 assets) public view virtual returns (uint256) {... */\n    tag_147:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7093:7100  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7119:7164  _convertToShares(assets, Math.Rounding.Floor) */\n      tag_252\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7136:7142  assets */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7144:7163  Math.Rounding.Floor */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7119:7135  _convertToShares */\n      tag_242\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7119:7164  _convertToShares(assets, Math.Rounding.Floor) */\n      jump\t// in\n    tag_252:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7112:7164  return _convertToShares(assets, Math.Rounding.Floor) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7024:7171  function previewDeposit(uint256 assets) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10219:10432  function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {... */\n    tag_164:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10316:10323  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10342:10425  shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding) */\n      tag_254\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10372:10373  1 */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10356:10369  totalAssets() */\n      tag_255\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10356:10367  totalAssets */\n      tag_37\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10356:10369  totalAssets() */\n      jump\t// in\n    tag_255:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10356:10373  totalAssets() + 1 */\n      tag_256\n      swap2\n      swap1\n      tag_196\n      jump\t// in\n    tag_256:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10397:10414  _decimalsOffset() */\n      tag_257\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10397:10412  _decimalsOffset */\n      tag_185\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10397:10414  _decimalsOffset() */\n      jump\t// in\n    tag_257:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10391:10393  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10391:10414  10 ** _decimalsOffset() */\n      tag_258\n      swap2\n      swap1\n      tag_259\n      jump\t// in\n    tag_258:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10375:10388  totalSupply() */\n      tag_260\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10375:10386  totalSupply */\n      tag_60\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10375:10388  totalSupply() */\n      jump\t// in\n    tag_260:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10375:10414  totalSupply() + 10 ** _decimalsOffset() */\n      tag_261\n      swap2\n      swap1\n      tag_196\n      jump\t// in\n    tag_261:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10416:10424  rounding */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10342:10348  shares */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10342:10355  shares.mulDiv */\n      tag_262\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10342:10425  shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_254:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10335:10425  return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10219:10432  function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n    tag_167:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":709:716  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":728:745  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_169:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      tag_265\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9082:9087  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9089:9096  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9098:9103  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9105:9109  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9081  _approve */\n      tag_266\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_265:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7418:7565  function previewWithdraw(uint256 assets) public view virtual returns (uint256) {... */\n    tag_172:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7488:7495  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7514:7558  _convertToShares(assets, Math.Rounding.Ceil) */\n      tag_268\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7531:7537  assets */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7539:7557  Math.Rounding.Ceil */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7514:7530  _convertToShares */\n      tag_242\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7514:7558  _convertToShares(assets, Math.Rounding.Ceil) */\n      jump\t// in\n    tag_268:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7507:7558  return _convertToShares(assets, Math.Rounding.Ceil) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7418:7565  function previewWithdraw(uint256 assets) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_180:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10762:10786  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10789:10814  allowance(owner, spender) */\n      tag_270\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10799:10804  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10806:10813  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10789:10798  allowance */\n      tag_143\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10789:10814  allowance(owner, spender) */\n      jump\t// in\n    tag_270:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10762:10814  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10848:10865  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10828:10844  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10828:10865  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10824:11134  if (currentAllowance != type(uint256).max) {... */\n      tag_271\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10904:10909  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10885:10901  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10885:10909  currentAllowance < value */\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n      iszero\n      tag_272\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10963:10970  spender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10972:10988  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10990:10995  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      0xfb8f41b200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_273\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_203\n      jump\t// in\n    tag_273:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n    tag_272:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      tag_274\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11061:11066  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11068:11075  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11096:11101  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11077:11093  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11077:11101  currentAllowance - value */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11103:11108  false */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11060  _approve */\n      tag_266\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_274:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10824:11134  if (currentAllowance != type(uint256).max) {... */\n    tag_271:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10752:11140  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5656:5956  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_182:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5755:5756  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5739:5757  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5739:5743  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5739:5757  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n      tag_276\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5807:5808  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      0x96c6fd1e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_277\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_277:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n    tag_276:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5848:5849  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5834:5850  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5834:5836  to */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5834:5850  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n      tag_278\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5902:5903  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      0xec442f0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_279\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_279:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n    tag_278:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      tag_280\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5933:5937  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5939:5941  to */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5943:5948  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5932  _update */\n      tag_281\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      jump\t// in\n    tag_280:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5656:5956  function _transfer(address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12313:12403  function _decimalsOffset() internal view virtual returns (uint8) {... */\n    tag_185:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12371:12376  uint8 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12313:12403  function _decimalsOffset() internal view virtual returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7809:8201  function deposit(uint256 assets, address receiver) public virtual returns (uint256) {... */\n    tag_194:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7884:7891  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7903:7920  uint256 maxAssets */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7923:7943  maxDeposit(receiver) */\n      tag_284\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7934:7942  receiver */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7923:7933  maxDeposit */\n      tag_78\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7923:7943  maxDeposit(receiver) */\n      jump\t// in\n    tag_284:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7903:7943  uint256 maxAssets = maxDeposit(receiver) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7966:7975  maxAssets */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7957:7963  assets */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7957:7975  assets > maxAssets */\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7953:8063  if (assets > maxAssets) {... */\n      iszero\n      tag_285\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8024:8032  receiver */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8034:8040  assets */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8042:8051  maxAssets */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7998:8052  ERC4626ExceededMaxDeposit(receiver, assets, maxAssets) */\n      mload(0x40)\n      0x79012fb200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_286\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_203\n      jump\t// in\n    tag_286:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7953:8063  if (assets > maxAssets) {... */\n    tag_285:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8073:8087  uint256 shares */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8090:8112  previewDeposit(assets) */\n      tag_287\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8105:8111  assets */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8090:8104  previewDeposit */\n      tag_147\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8090:8112  previewDeposit(assets) */\n      jump\t// in\n    tag_287:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8073:8112  uint256 shares = previewDeposit(assets) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8122:8170  _deposit(_msgSender(), receiver, assets, shares) */\n      tag_288\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8131:8143  _msgSender() */\n      tag_289\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8131:8141  _msgSender */\n      tag_167\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8131:8143  _msgSender() */\n      jump\t// in\n    tag_289:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8145:8153  receiver */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8155:8161  assets */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8163:8169  shares */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8122:8130  _deposit */\n      tag_207\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8122:8170  _deposit(_msgSender(), receiver, assets, shares) */\n      jump\t// in\n    tag_288:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8188:8194  shares */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8181:8194  return shares */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7809:8201  function deposit(uint256 assets, address receiver) public virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10496:11326  function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {... */\n    tag_207:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11164:11229  SafeERC20.safeTransferFrom(_asset, caller, address(this), assets) */\n      tag_291\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11191:11197  _asset */\n      immutable(\"0xe3fb6c7a68b97a1574f1623712f47cd0a60a3212aae0a2101a56c312e7330127\")\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11199:11205  caller */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11215:11219  this */\n      address\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11222:11228  assets */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11164:11190  SafeERC20.safeTransferFrom */\n      tag_292\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11164:11229  SafeERC20.safeTransferFrom(_asset, caller, address(this), assets) */\n      jump\t// in\n    tag_291:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11239:11262  _mint(receiver, shares) */\n      tag_293\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11245:11253  receiver */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11255:11261  shares */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11239:11244  _mint */\n      tag_294\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11239:11262  _mint(receiver, shares) */\n      jump\t// in\n    tag_293:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11294:11302  receiver */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11278:11319  Deposit(caller, receiver, assets, shares) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11286:11292  caller */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11278:11319  Deposit(caller, receiver, assets, shares) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11304:11310  assets */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11312:11318  shares */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11278:11319  Deposit(caller, receiver, assets, shares) */\n      mload(0x40)\n      tag_295\n      swap3\n      swap2\n      swap1\n      tag_296\n      jump\t// in\n    tag_295:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10496:11326  function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8895:9308  function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {... */\n    tag_228:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8986:8993  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9005:9022  uint256 maxAssets */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9025:9043  maxWithdraw(owner) */\n      tag_298\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9037:9042  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9025:9036  maxWithdraw */\n      tag_134\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9025:9043  maxWithdraw(owner) */\n      jump\t// in\n    tag_298:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9005:9043  uint256 maxAssets = maxWithdraw(owner) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9066:9075  maxAssets */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9057:9063  assets */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9057:9075  assets > maxAssets */\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9053:9161  if (assets > maxAssets) {... */\n      iszero\n      tag_299\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9125:9130  owner */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9132:9138  assets */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9140:9149  maxAssets */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9098:9150  ERC4626ExceededMaxWithdraw(owner, assets, maxAssets) */\n      mload(0x40)\n      0xfe9cceec00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_300\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_203\n      jump\t// in\n    tag_300:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9053:9161  if (assets > maxAssets) {... */\n    tag_299:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9171:9185  uint256 shares */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9188:9211  previewWithdraw(assets) */\n      tag_301\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9204:9210  assets */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9188:9203  previewWithdraw */\n      tag_57\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9188:9211  previewWithdraw(assets) */\n      jump\t// in\n    tag_301:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9171:9211  uint256 shares = previewWithdraw(assets) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9221:9277  _withdraw(_msgSender(), receiver, owner, assets, shares) */\n      tag_302\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9231:9243  _msgSender() */\n      tag_303\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9231:9241  _msgSender */\n      tag_167\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9231:9243  _msgSender() */\n      jump\t// in\n    tag_303:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9245:9253  receiver */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9255:9260  owner */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9262:9268  assets */\n      dup10\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9270:9276  shares */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9221:9230  _withdraw */\n      tag_238\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9221:9277  _withdraw(_msgSender(), receiver, owner, assets, shares) */\n      jump\t// in\n    tag_302:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9295:9301  shares */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9288:9301  return shares */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8895:9308  function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11393:12307  function _withdraw(... */\n    tag_238:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11580:11585  owner */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11570:11585  caller != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11570:11576  caller */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11570:11585  caller != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11566:11650  if (caller != owner) {... */\n      tag_305\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11601:11639  _spendAllowance(owner, caller, shares) */\n      tag_306\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11617:11622  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11624:11630  caller */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11632:11638  shares */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11601:11616  _spendAllowance */\n      tag_180\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11601:11639  _spendAllowance(owner, caller, shares) */\n      jump\t// in\n    tag_306:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11566:11650  if (caller != owner) {... */\n    tag_305:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12157:12177  _burn(owner, shares) */\n      tag_307\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12163:12168  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12170:12176  shares */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12157:12162  _burn */\n      tag_308\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12157:12177  _burn(owner, shares) */\n      jump\t// in\n    tag_307:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12187:12235  SafeERC20.safeTransfer(_asset, receiver, assets) */\n      tag_309\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12210:12216  _asset */\n      immutable(\"0xe3fb6c7a68b97a1574f1623712f47cd0a60a3212aae0a2101a56c312e7330127\")\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12218:12226  receiver */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12228:12234  assets */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12187:12209  SafeERC20.safeTransfer */\n      tag_310\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12187:12235  SafeERC20.safeTransfer(_asset, receiver, assets) */\n      jump\t// in\n    tag_309:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12278:12283  owner */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12251:12300  Withdraw(caller, receiver, owner, assets, shares) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12268:12276  receiver */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12251:12300  Withdraw(caller, receiver, owner, assets, shares) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12260:12266  caller */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12251:12300  Withdraw(caller, receiver, owner, assets, shares) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xfbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12285:12291  assets */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12293:12299  shares */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12251:12300  Withdraw(caller, receiver, owner, assets, shares) */\n      mload(0x40)\n      tag_311\n      swap3\n      swap2\n      swap1\n      tag_296\n      jump\t// in\n    tag_311:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11393:12307  function _withdraw(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9882:10095  function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {... */\n    tag_242:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9979:9986  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10005:10088  assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding) */\n      tag_313\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10041:10058  _decimalsOffset() */\n      tag_314\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10041:10056  _decimalsOffset */\n      tag_185\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10041:10058  _decimalsOffset() */\n      jump\t// in\n    tag_314:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10035:10037  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10035:10058  10 ** _decimalsOffset() */\n      tag_315\n      swap2\n      swap1\n      tag_259\n      jump\t// in\n    tag_315:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10019:10032  totalSupply() */\n      tag_316\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10019:10030  totalSupply */\n      tag_60\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10019:10032  totalSupply() */\n      jump\t// in\n    tag_316:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10019:10058  totalSupply() + 10 ** _decimalsOffset() */\n      tag_317\n      swap2\n      swap1\n      tag_196\n      jump\t// in\n    tag_317:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10076:10077  1 */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10060:10073  totalAssets() */\n      tag_318\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10060:10071  totalAssets */\n      tag_37\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10060:10073  totalAssets() */\n      jump\t// in\n    tag_318:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10060:10077  totalAssets() + 1 */\n      tag_319\n      swap2\n      swap1\n      tag_196\n      jump\t// in\n    tag_319:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10079:10087  rounding */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10005:10011  assets */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10005:10018  assets.mulDiv */\n      tag_262\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10005:10088  assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_313:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9998:10088  return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9882:10095  function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6658:6811  function maxWithdraw(address owner) public view virtual returns (uint256) {... */\n    tag_245:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6723:6730  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6749:6804  _convertToAssets(balanceOf(owner), Math.Rounding.Floor) */\n      tag_321\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6766:6782  balanceOf(owner) */\n      tag_322\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6776:6781  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6766:6775  balanceOf */\n      tag_91\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6766:6782  balanceOf(owner) */\n      jump\t// in\n    tag_322:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6784:6803  Math.Rounding.Floor */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6749:6765  _convertToAssets */\n      tag_164\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6749:6804  _convertToAssets(balanceOf(owner), Math.Rounding.Floor) */\n      jump\t// in\n    tag_321:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6742:6804  return _convertToAssets(balanceOf(owner), Math.Rounding.Floor) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6658:6811  function maxWithdraw(address owner) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8051:8353  function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {... */\n    tag_262:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8152:8159  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8171:8185  uint256 result */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8188:8213  mulDiv(x, y, denominator) */\n      tag_324\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8195:8196  x */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8198:8199  y */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8201:8212  denominator */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8188:8194  mulDiv */\n      tag_325\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8188:8213  mulDiv(x, y, denominator) */\n      jump\t// in\n    tag_324:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8171:8213  uint256 result = mulDiv(x, y, denominator) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8227:8253  unsignedRoundsUp(rounding) */\n      tag_326\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8244:8252  rounding */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8227:8243  unsignedRoundsUp */\n      tag_327\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8227:8253  unsignedRoundsUp(rounding) */\n      jump\t// in\n    tag_326:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8227:8286  unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0 */\n      dup1\n      iszero\n      tag_328\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8285:8286  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8270:8281  denominator */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8257:8282  mulmod(x, y, denominator) */\n      dup1\n      tag_329\n      jumpi\n      tag_330\n      tag_331\n      jump\t// in\n    tag_330:\n    tag_329:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8267:8268  y */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8264:8265  x */\n      dup9\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8257:8282  mulmod(x, y, denominator) */\n      mulmod\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8257:8286  mulmod(x, y, denominator) > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8227:8286  unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0 */\n    tag_328:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8223:8324  if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {... */\n      iszero\n      tag_332\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8312:8313  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8302:8313  result += 1 */\n      dup2\n      tag_333\n      swap2\n      swap1\n      tag_196\n      jump\t// in\n    tag_333:\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8223:8324  if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {... */\n    tag_332:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8340:8346  result */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8333:8346  return result */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8051:8353  function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_266:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10078:10079  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10061:10080  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10061:10066  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10061:10080  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n      tag_335\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10132:10133  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      0xe602df0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_336\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_336:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n    tag_335:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10178:10179  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10159:10180  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10159:10166  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10159:10180  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n      tag_337\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10231:10232  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      0x94280d6200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_338\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_338:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n    tag_337:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10284:10289  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10265  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10266:10271  owner */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10281  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10273:10280  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10281  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10289  _allowances[owner][spender] = value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10303:10312  emitEvent */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10299:10375  if (emitEvent) {... */\n      iszero\n      tag_339\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10349:10356  spender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10342:10347  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10358:10363  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_340\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_340:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10299:10375  if (emitEvent) {... */\n    tag_339:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_281:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6376:6377  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6360:6378  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6360:6364  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6360:6378  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      tag_342\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6512:6517  value */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6508  _totalSupply */\n      0x02\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6517  _totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_343\n      swap2\n      swap1\n      tag_196\n      jump\t// in\n    tag_343:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      jump(tag_344)\n    tag_342:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6548:6567  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6579  _balances */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6580:6584  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6548:6585  uint256 fromBalance = _balances[from] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6617:6622  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6603:6614  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6603:6622  fromBalance < value */\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n      iszero\n      tag_345\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6674:6678  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6680:6691  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6693:6698  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      0xe450d38c00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_346\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_203\n      jump\t// in\n    tag_346:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n    tag_345:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6866:6871  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6852:6863  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6852:6871  fromBalance - value */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6843  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6844:6848  from */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6871  _balances[from] = fromBalance - value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6534:6896  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n    tag_344:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6924:6925  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6910:6926  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6910:6912  to */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6910:6926  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      tag_347\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7089:7094  value */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7085  _totalSupply */\n      0x02\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7094  _totalSupply -= value */\n      dup3\n      dup3\n      sload\n      sub\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      jump(tag_348)\n    tag_347:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7301:7306  value */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7293  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7294:7296  to */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7306  _balances[to] += value */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n    tag_348:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7361:7363  to */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7355:7359  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7365:7370  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      mload(0x40)\n      tag_349\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_349:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1702:1890  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n    tag_292:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1802:1883  _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value))) */\n      tag_351\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1822:1827  token */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1844:1849  token */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1844:1862  token.transferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x23b872dd\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1865:1869  from */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1871:1873  to */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1875:1880  value */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      add(0x24, mload(0x40))\n      tag_352\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_353\n      jump\t// in\n    tag_352:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap2\n      pop\n      0xe0\n      shl\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1802:1821  _callOptionalReturn */\n      tag_354\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1802:1883  _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value))) */\n      jump\t// in\n    tag_351:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1702:1890  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7721:7929  function _mint(address account, uint256 value) internal {... */\n    tag_294:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7810:7811  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7791:7812  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7791:7798  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7791:7812  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n      tag_356\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7864:7865  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      0xec442f0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_357\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_357:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n    tag_356:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n      tag_358\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7903:7904  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7907:7914  account */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7916:7921  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7894  _update */\n      tag_281\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n      jump\t// in\n    tag_358:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7721:7929  function _mint(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8247:8453  function _burn(address account, uint256 value) internal {... */\n    tag_308:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8336:8337  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8317:8338  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8317:8324  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8317:8338  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n      tag_360\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8388:8389  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8361:8391  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      0x96c6fd1e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_361\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_361:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n    tag_360:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      tag_362\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8419:8426  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8436:8437  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8440:8445  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8418  _update */\n      tag_281\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      jump\t// in\n    tag_362:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8247:8453  function _burn(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1303:1463  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_310:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1385:1456  _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value))) */\n      tag_364\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1405:1410  token */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1427:1432  token */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1427:1441  token.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1444:1446  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1448:1453  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      add(0x24, mload(0x40))\n      tag_365\n      swap3\n      swap2\n      swap1\n      tag_366\n      jump\t// in\n    tag_365:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap2\n      pop\n      0xe0\n      shl\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1385:1404  _callOptionalReturn */\n      tag_354\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1385:1456  _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value))) */\n      jump\t// in\n    tag_364:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1303:1463  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3803:7919  function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {... */\n    tag_325:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3885:3899  uint256 result */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4232:4245  uint256 prod0 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4252:4253  y */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4248:4249  x */\n      dup6\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4248:4253  x * y */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4232:4253  uint256 prod0 = x * y */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4312:4325  uint256 prod1 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4437:4438  0 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4433:4439  not(0) */\n      not\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4430:4431  y */\n      dup6\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4427:4428  x */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4420:4440  mulmod(x, y, not(0)) */\n      mulmod\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4493:4498  prod0 */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4489:4491  mm */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4486:4499  lt(mm, prod0) */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4478:4483  prod0 */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4474:4476  mm */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4470:4484  sub(mm, prod0) */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4466:4500  sub(sub(mm, prod0), lt(mm, prod0)) */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4457:4500  prod1 := sub(sub(mm, prod0), lt(mm, prod0)) */\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4392:4514  {... */\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4604:4605  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4595:4600  prod1 */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4595:4605  prod1 == 0 */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4591:4959  if (prod1 == 0) {... */\n      tag_368\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4933:4944  denominator */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4925:4930  prod0 */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4925:4944  prod0 / denominator */\n      dup2\n      tag_369\n      jumpi\n      tag_370\n      tag_331\n      jump\t// in\n    tag_370:\n    tag_369:\n      div\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4918:4944  return prod0 / denominator */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_367)\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4591:4959  if (prod1 == 0) {... */\n    tag_368:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5080:5085  prod1 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5065:5076  denominator */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5065:5085  denominator <= prod1 */\n      gt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5061:5149  if (denominator <= prod1) {... */\n      tag_371\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5112:5134  MathOverflowedMulDiv() */\n      mload(0x40)\n      0x227bc15300000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5061:5149  if (denominator <= prod1) {... */\n    tag_371:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5404:5421  uint256 remainder */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5539:5550  denominator */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5536:5537  y */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5533:5534  x */\n      dup9\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5526:5551  mulmod(x, y, denominator) */\n      mulmod\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5513:5551  remainder := mulmod(x, y, denominator) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5667:5672  prod0 */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5656:5665  remainder */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5653:5673  gt(remainder, prod0) */\n      gt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5646:5651  prod1 */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5642:5674  sub(prod1, gt(remainder, prod0)) */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5633:5674  prod1 := sub(prod1, gt(remainder, prod0)) */\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5711:5720  remainder */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5704:5709  prod0 */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5700:5721  sub(prod0, remainder) */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5691:5721  prod0 := sub(prod0, remainder) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5939:5951  uint256 twos */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5973:5984  denominator */\n      dup6\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5969:5970  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5969:5984  0 - denominator */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5954:5965  denominator */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5954:5985  denominator & (0 - denominator) */\n      and\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5939:5985  uint256 twos = denominator & (0 - denominator) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6105:6109  twos */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6092:6103  denominator */\n      dup7\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6088:6110  div(denominator, twos) */\n      div\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6073:6110  denominator := div(denominator, twos) */\n      swap6\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6197:6201  twos */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6190:6195  prod0 */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6186:6202  div(prod0, twos) */\n      div\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6177:6202  prod0 := div(prod0, twos) */\n      swap4\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6354:6355  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6347:6351  twos */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6340:6344  twos */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6337:6338  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6333:6345  sub(0, twos) */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6329:6352  div(sub(0, twos), twos) */\n      div\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6325:6356  add(div(sub(0, twos), twos), 1) */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6317:6356  twos := add(div(sub(0, twos), twos), 1) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6453:6457  twos */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6445:6450  prod1 */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6445:6457  prod1 * twos */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6436:6457  prod0 |= prod1 * twos */\n      dup5\n      or\n      swap4\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6775:6790  uint256 inverse */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6813:6814  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6798:6809  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6794:6795  3 */\n      0x03\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6794:6809  3 * denominator */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6793:6814  (3 * denominator) ^ 2 */\n      xor\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6775:6814  uint256 inverse = (3 * denominator) ^ 2 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7060:7067  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7046:7057  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7046:7067  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7042:7043  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7042:7067  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7031:7067  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7129:7136  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7115:7126  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7115:7136  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7111:7112  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7111:7136  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7100:7136  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7199:7206  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7185:7196  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7185:7206  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7181:7182  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7181:7206  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7170:7206  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7269:7276  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7255:7266  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7255:7276  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7251:7252  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7251:7276  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7240:7276  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7339:7346  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7325:7336  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7325:7346  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7321:7322  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7321:7346  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7310:7346  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7410:7417  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7396:7407  denominator */\n      dup8\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7396:7417  denominator * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7392:7393  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7392:7417  2 - denominator * inverse */\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7381:7417  inverse *= 2 - denominator * inverse */\n      dup2\n      mul\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7868:7875  inverse */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7860:7865  prod0 */\n      dup6\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7860:7875  prod0 * inverse */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7851:7875  result = prod0 * inverse */\n      swap6\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":7889:7902  return result */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3803:7919  function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {... */\n    tag_367:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":14993:15115  function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {... */\n    tag_327:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":15061:15065  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":15107:15108  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":15102:15103  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":15090:15098  rounding */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":15084:15099  uint8(rounding) */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_373\n      jumpi\n      tag_374\n      tag_375\n      jump\t// in\n    tag_374:\n    tag_373:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":15084:15103  uint8(rounding) % 2 */\n      tag_376\n      swap2\n      swap1\n      tag_377\n      jump\t// in\n    tag_376:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":15084:15108  uint8(rounding) % 2 == 1 */\n      0xff\n      and\n      eq\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":15077:15108  return uint8(rounding) % 2 == 1 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":14993:15115  function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4059:4688  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_354:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4478:4501  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4504:4537  address(token).functionCall(data) */\n      tag_379\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4532:4536  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4512:4517  token */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4504:4531  address(token).functionCall */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_380\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4504:4537  address(token).functionCall(data) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_379:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4478:4537  bytes memory returndata = address(token).functionCall(data) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4572:4573  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4561  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4568  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4573  returndata.length != 0 */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4608  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n      dup1\n      iszero\n      tag_381\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4589:4599  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4578:4608  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_382\n      swap2\n      swap1\n      tag_383\n      jump\t// in\n    tag_382:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4577:4608  !abi.decode(returndata, (bool)) */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4608  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n    tag_381:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4547:4682  if (returndata.length != 0 && !abi.decode(returndata, (bool))) {... */\n      iszero\n      tag_384\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4664:4669  token */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4631:4671  SafeERC20FailedOperation(address(token)) */\n      mload(0x40)\n      0x5274afe700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_385\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_385:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4547:4682  if (returndata.length != 0 && !abi.decode(returndata, (bool))) {... */\n    tag_384:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4129:4688  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4059:4688  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2705:2856  function functionCall(address target, bytes memory data) internal returns (bytes memory) {... */\n    tag_380:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2780:2792  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2811:2849  functionCallWithValue(target, data, 0) */\n      tag_387\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2833:2839  target */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2841:2845  data */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2847:2848  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2811:2832  functionCallWithValue */\n      tag_388\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2811:2849  functionCallWithValue(target, data, 0) */\n      jump\t// in\n    tag_387:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2804:2849  return functionCallWithValue(target, data, 0) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2705:2856  function functionCall(address target, bytes memory data) internal returns (bytes memory) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3180:3572  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {... */\n    tag_388:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3279:3291  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3331:3336  value */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3307:3328  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3307:3336  address(this).balance < value */\n      lt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3303:3411  if (address(this).balance < value) {... */\n      iszero\n      tag_390\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3394:3398  this */\n      address\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3359:3400  AddressInsufficientBalance(address(this)) */\n      mload(0x40)\n      0xcd78605900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_391\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_391:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3303:3411  if (address(this).balance < value) {... */\n    tag_390:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3421:3433  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3435:3458  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3468  target */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3473  target.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3481:3486  value */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3488:3492  data */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3493  target.call{value: value}(data) */\n      mload(0x40)\n      tag_392\n      swap2\n      swap1\n      tag_393\n      jump\t// in\n    tag_392:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_396\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_395)\n    tag_396:\n      0x60\n      swap2\n      pop\n    tag_395:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3420:3493  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3565  verifyCallResultFromTarget(target, success, returndata) */\n      tag_397\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3537:3543  target */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3545:3552  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3554:3564  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3536  verifyCallResultFromTarget */\n      tag_398\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3565  verifyCallResultFromTarget(target, success, returndata) */\n      jump\t// in\n    tag_397:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3503:3565  return verifyCallResultFromTarget(target, success, returndata) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3180:3572  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4625:5207  function verifyCallResultFromTarget(... */\n    tag_398:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4769:4781  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4798:4805  success */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n      tag_400\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4821:4840  _revert(returndata) */\n      tag_401\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4829:4839  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4821:4828  _revert */\n      tag_402\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4821:4840  _revert(returndata) */\n      jump\t// in\n    tag_401:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n      jump(tag_403)\n    tag_400:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5066:5067  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5055  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5062  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5067  returndata.length == 0 */\n      eq\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5094  returndata.length == 0 && target.code.length == 0 */\n      dup1\n      iszero\n      tag_404\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5093:5094  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5071:5077  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5071:5089  target.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5071:5094  target.code.length == 0 */\n      eq\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5094  returndata.length == 0 && target.code.length == 0 */\n    tag_404:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5041:5160  if (returndata.length == 0 && target.code.length == 0) {... */\n      iszero\n      tag_405\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5138:5144  target */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5121:5145  AddressEmptyCode(target) */\n      mload(0x40)\n      0x9996b31500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_406\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_406:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5041:5160  if (returndata.length == 0 && target.code.length == 0) {... */\n    tag_405:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5180:5190  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5173:5190  return returndata */\n      swap1\n      pop\n      jump(tag_399)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n    tag_403:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4625:5207  function verifyCallResultFromTarget(... */\n    tag_399:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5743:6259  function _revert(bytes memory returndata) private pure {... */\n    tag_402:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5894:5895  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5874:5884  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5874:5891  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5874:5895  returndata.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5870:6253  if (returndata.length > 0) {... */\n      iszero\n      tag_408\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6102:6112  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6096:6113  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6158:6173  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6145:6155  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6141:6143  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6137:6156  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6130:6174  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5870:6253  if (returndata.length > 0) {... */\n    tag_408:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6225:6242  FailedInnerCall() */\n      mload(0x40)\n      0x1425ea4200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"#utility.yul\":7:84   */\n    tag_410:\n        /* \"#utility.yul\":44:51   */\n      0x00\n        /* \"#utility.yul\":73:78   */\n      dup2\n        /* \"#utility.yul\":62:78   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:84   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":90:208   */\n    tag_411:\n        /* \"#utility.yul\":177:201   */\n      tag_449\n        /* \"#utility.yul\":195:200   */\n      dup2\n        /* \"#utility.yul\":177:201   */\n      tag_410\n      jump\t// in\n    tag_449:\n        /* \"#utility.yul\":172:175   */\n      dup3\n        /* \"#utility.yul\":165:202   */\n      mstore\n        /* \"#utility.yul\":90:208   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":214:436   */\n    tag_39:\n        /* \"#utility.yul\":307:311   */\n      0x00\n        /* \"#utility.yul\":345:347   */\n      0x20\n        /* \"#utility.yul\":334:343   */\n      dup3\n        /* \"#utility.yul\":330:348   */\n      add\n        /* \"#utility.yul\":322:348   */\n      swap1\n      pop\n        /* \"#utility.yul\":358:429   */\n      tag_451\n        /* \"#utility.yul\":426:427   */\n      0x00\n        /* \"#utility.yul\":415:424   */\n      dup4\n        /* \"#utility.yul\":411:428   */\n      add\n        /* \"#utility.yul\":402:408   */\n      dup5\n        /* \"#utility.yul\":358:429   */\n      tag_411\n      jump\t// in\n    tag_451:\n        /* \"#utility.yul\":214:436   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":442:541   */\n    tag_412:\n        /* \"#utility.yul\":494:500   */\n      0x00\n        /* \"#utility.yul\":528:533   */\n      dup2\n        /* \"#utility.yul\":522:534   */\n      mload\n        /* \"#utility.yul\":512:534   */\n      swap1\n      pop\n        /* \"#utility.yul\":442:541   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":547:716   */\n    tag_413:\n        /* \"#utility.yul\":631:642   */\n      0x00\n        /* \"#utility.yul\":665:671   */\n      dup3\n        /* \"#utility.yul\":660:663   */\n      dup3\n        /* \"#utility.yul\":653:672   */\n      mstore\n        /* \"#utility.yul\":705:709   */\n      0x20\n        /* \"#utility.yul\":700:703   */\n      dup3\n        /* \"#utility.yul\":696:710   */\n      add\n        /* \"#utility.yul\":681:710   */\n      swap1\n      pop\n        /* \"#utility.yul\":547:716   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":722:861   */\n    tag_414:\n        /* \"#utility.yul\":811:817   */\n      dup3\n        /* \"#utility.yul\":806:809   */\n      dup2\n        /* \"#utility.yul\":801:804   */\n      dup4\n        /* \"#utility.yul\":795:818   */\n      mcopy\n        /* \"#utility.yul\":852:853   */\n      0x00\n        /* \"#utility.yul\":843:849   */\n      dup4\n        /* \"#utility.yul\":838:841   */\n      dup4\n        /* \"#utility.yul\":834:850   */\n      add\n        /* \"#utility.yul\":827:854   */\n      mstore\n        /* \"#utility.yul\":722:861   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":867:969   */\n    tag_415:\n        /* \"#utility.yul\":908:914   */\n      0x00\n        /* \"#utility.yul\":959:961   */\n      0x1f\n        /* \"#utility.yul\":955:962   */\n      not\n        /* \"#utility.yul\":950:952   */\n      0x1f\n        /* \"#utility.yul\":943:948   */\n      dup4\n        /* \"#utility.yul\":939:953   */\n      add\n        /* \"#utility.yul\":935:963   */\n      and\n        /* \"#utility.yul\":925:963   */\n      swap1\n      pop\n        /* \"#utility.yul\":867:969   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":975:1352   */\n    tag_416:\n        /* \"#utility.yul\":1063:1066   */\n      0x00\n        /* \"#utility.yul\":1091:1130   */\n      tag_457\n        /* \"#utility.yul\":1124:1129   */\n      dup3\n        /* \"#utility.yul\":1091:1130   */\n      tag_412\n      jump\t// in\n    tag_457:\n        /* \"#utility.yul\":1146:1217   */\n      tag_458\n        /* \"#utility.yul\":1210:1216   */\n      dup2\n        /* \"#utility.yul\":1205:1208   */\n      dup6\n        /* \"#utility.yul\":1146:1217   */\n      tag_413\n      jump\t// in\n    tag_458:\n        /* \"#utility.yul\":1139:1217   */\n      swap4\n      pop\n        /* \"#utility.yul\":1226:1291   */\n      tag_459\n        /* \"#utility.yul\":1284:1290   */\n      dup2\n        /* \"#utility.yul\":1279:1282   */\n      dup6\n        /* \"#utility.yul\":1272:1276   */\n      0x20\n        /* \"#utility.yul\":1265:1270   */\n      dup7\n        /* \"#utility.yul\":1261:1277   */\n      add\n        /* \"#utility.yul\":1226:1291   */\n      tag_414\n      jump\t// in\n    tag_459:\n        /* \"#utility.yul\":1316:1345   */\n      tag_460\n        /* \"#utility.yul\":1338:1344   */\n      dup2\n        /* \"#utility.yul\":1316:1345   */\n      tag_415\n      jump\t// in\n    tag_460:\n        /* \"#utility.yul\":1311:1314   */\n      dup5\n        /* \"#utility.yul\":1307:1346   */\n      add\n        /* \"#utility.yul\":1300:1346   */\n      swap2\n      pop\n        /* \"#utility.yul\":1067:1352   */\n      pop\n        /* \"#utility.yul\":975:1352   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1358:1671   */\n    tag_43:\n        /* \"#utility.yul\":1471:1475   */\n      0x00\n        /* \"#utility.yul\":1509:1511   */\n      0x20\n        /* \"#utility.yul\":1498:1507   */\n      dup3\n        /* \"#utility.yul\":1494:1512   */\n      add\n        /* \"#utility.yul\":1486:1512   */\n      swap1\n      pop\n        /* \"#utility.yul\":1558:1567   */\n      dup2\n        /* \"#utility.yul\":1552:1556   */\n      dup2\n        /* \"#utility.yul\":1548:1568   */\n      sub\n        /* \"#utility.yul\":1544:1545   */\n      0x00\n        /* \"#utility.yul\":1533:1542   */\n      dup4\n        /* \"#utility.yul\":1529:1546   */\n      add\n        /* \"#utility.yul\":1522:1569   */\n      mstore\n        /* \"#utility.yul\":1586:1664   */\n      tag_462\n        /* \"#utility.yul\":1659:1663   */\n      dup2\n        /* \"#utility.yul\":1650:1656   */\n      dup5\n        /* \"#utility.yul\":1586:1664   */\n      tag_416\n      jump\t// in\n    tag_462:\n        /* \"#utility.yul\":1578:1664   */\n      swap1\n      pop\n        /* \"#utility.yul\":1358:1671   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1758:1875   */\n    tag_418:\n        /* \"#utility.yul\":1867:1868   */\n      0x00\n        /* \"#utility.yul\":1864:1865   */\n      dup1\n        /* \"#utility.yul\":1857:1869   */\n      revert\n        /* \"#utility.yul\":2004:2126   */\n    tag_420:\n        /* \"#utility.yul\":2077:2101   */\n      tag_467\n        /* \"#utility.yul\":2095:2100   */\n      dup2\n        /* \"#utility.yul\":2077:2101   */\n      tag_410\n      jump\t// in\n    tag_467:\n        /* \"#utility.yul\":2070:2075   */\n      dup2\n        /* \"#utility.yul\":2067:2102   */\n      eq\n        /* \"#utility.yul\":2057:2120   */\n      tag_468\n      jumpi\n        /* \"#utility.yul\":2116:2117   */\n      0x00\n        /* \"#utility.yul\":2113:2114   */\n      dup1\n        /* \"#utility.yul\":2106:2118   */\n      revert\n        /* \"#utility.yul\":2057:2120   */\n    tag_468:\n        /* \"#utility.yul\":2004:2126   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2132:2271   */\n    tag_421:\n        /* \"#utility.yul\":2178:2183   */\n      0x00\n        /* \"#utility.yul\":2216:2222   */\n      dup2\n        /* \"#utility.yul\":2203:2223   */\n      calldataload\n        /* \"#utility.yul\":2194:2223   */\n      swap1\n      pop\n        /* \"#utility.yul\":2232:2265   */\n      tag_470\n        /* \"#utility.yul\":2259:2264   */\n      dup2\n        /* \"#utility.yul\":2232:2265   */\n      tag_420\n      jump\t// in\n    tag_470:\n        /* \"#utility.yul\":2132:2271   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2277:2606   */\n    tag_46:\n        /* \"#utility.yul\":2336:2342   */\n      0x00\n        /* \"#utility.yul\":2385:2387   */\n      0x20\n        /* \"#utility.yul\":2373:2382   */\n      dup3\n        /* \"#utility.yul\":2364:2371   */\n      dup5\n        /* \"#utility.yul\":2360:2383   */\n      sub\n        /* \"#utility.yul\":2356:2388   */\n      slt\n        /* \"#utility.yul\":2353:2472   */\n      iszero\n      tag_472\n      jumpi\n        /* \"#utility.yul\":2391:2470   */\n      tag_473\n      tag_418\n      jump\t// in\n    tag_473:\n        /* \"#utility.yul\":2353:2472   */\n    tag_472:\n        /* \"#utility.yul\":2511:2512   */\n      0x00\n        /* \"#utility.yul\":2536:2589   */\n      tag_474\n        /* \"#utility.yul\":2581:2588   */\n      dup5\n        /* \"#utility.yul\":2572:2578   */\n      dup3\n        /* \"#utility.yul\":2561:2570   */\n      dup6\n        /* \"#utility.yul\":2557:2579   */\n      add\n        /* \"#utility.yul\":2536:2589   */\n      tag_421\n      jump\t// in\n    tag_474:\n        /* \"#utility.yul\":2526:2589   */\n      swap2\n      pop\n        /* \"#utility.yul\":2482:2599   */\n      pop\n        /* \"#utility.yul\":2277:2606   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2612:2738   */\n    tag_422:\n        /* \"#utility.yul\":2649:2656   */\n      0x00\n        /* \"#utility.yul\":2689:2731   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":2682:2687   */\n      dup3\n        /* \"#utility.yul\":2678:2732   */\n      and\n        /* \"#utility.yul\":2667:2732   */\n      swap1\n      pop\n        /* \"#utility.yul\":2612:2738   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2744:2840   */\n    tag_423:\n        /* \"#utility.yul\":2781:2788   */\n      0x00\n        /* \"#utility.yul\":2810:2834   */\n      tag_477\n        /* \"#utility.yul\":2828:2833   */\n      dup3\n        /* \"#utility.yul\":2810:2834   */\n      tag_422\n      jump\t// in\n    tag_477:\n        /* \"#utility.yul\":2799:2834   */\n      swap1\n      pop\n        /* \"#utility.yul\":2744:2840   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2846:2968   */\n    tag_424:\n        /* \"#utility.yul\":2919:2943   */\n      tag_479\n        /* \"#utility.yul\":2937:2942   */\n      dup2\n        /* \"#utility.yul\":2919:2943   */\n      tag_423\n      jump\t// in\n    tag_479:\n        /* \"#utility.yul\":2912:2917   */\n      dup2\n        /* \"#utility.yul\":2909:2944   */\n      eq\n        /* \"#utility.yul\":2899:2962   */\n      tag_480\n      jumpi\n        /* \"#utility.yul\":2958:2959   */\n      0x00\n        /* \"#utility.yul\":2955:2956   */\n      dup1\n        /* \"#utility.yul\":2948:2960   */\n      revert\n        /* \"#utility.yul\":2899:2962   */\n    tag_480:\n        /* \"#utility.yul\":2846:2968   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2974:3113   */\n    tag_425:\n        /* \"#utility.yul\":3020:3025   */\n      0x00\n        /* \"#utility.yul\":3058:3064   */\n      dup2\n        /* \"#utility.yul\":3045:3065   */\n      calldataload\n        /* \"#utility.yul\":3036:3065   */\n      swap1\n      pop\n        /* \"#utility.yul\":3074:3107   */\n      tag_482\n        /* \"#utility.yul\":3101:3106   */\n      dup2\n        /* \"#utility.yul\":3074:3107   */\n      tag_424\n      jump\t// in\n    tag_482:\n        /* \"#utility.yul\":2974:3113   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3119:3593   */\n    tag_51:\n        /* \"#utility.yul\":3187:3193   */\n      0x00\n        /* \"#utility.yul\":3195:3201   */\n      dup1\n        /* \"#utility.yul\":3244:3246   */\n      0x40\n        /* \"#utility.yul\":3232:3241   */\n      dup4\n        /* \"#utility.yul\":3223:3230   */\n      dup6\n        /* \"#utility.yul\":3219:3242   */\n      sub\n        /* \"#utility.yul\":3215:3247   */\n      slt\n        /* \"#utility.yul\":3212:3331   */\n      iszero\n      tag_484\n      jumpi\n        /* \"#utility.yul\":3250:3329   */\n      tag_485\n      tag_418\n      jump\t// in\n    tag_485:\n        /* \"#utility.yul\":3212:3331   */\n    tag_484:\n        /* \"#utility.yul\":3370:3371   */\n      0x00\n        /* \"#utility.yul\":3395:3448   */\n      tag_486\n        /* \"#utility.yul\":3440:3447   */\n      dup6\n        /* \"#utility.yul\":3431:3437   */\n      dup3\n        /* \"#utility.yul\":3420:3429   */\n      dup7\n        /* \"#utility.yul\":3416:3438   */\n      add\n        /* \"#utility.yul\":3395:3448   */\n      tag_425\n      jump\t// in\n    tag_486:\n        /* \"#utility.yul\":3385:3448   */\n      swap3\n      pop\n        /* \"#utility.yul\":3341:3458   */\n      pop\n        /* \"#utility.yul\":3497:3499   */\n      0x20\n        /* \"#utility.yul\":3523:3576   */\n      tag_487\n        /* \"#utility.yul\":3568:3575   */\n      dup6\n        /* \"#utility.yul\":3559:3565   */\n      dup3\n        /* \"#utility.yul\":3548:3557   */\n      dup7\n        /* \"#utility.yul\":3544:3566   */\n      add\n        /* \"#utility.yul\":3523:3576   */\n      tag_421\n      jump\t// in\n    tag_487:\n        /* \"#utility.yul\":3513:3576   */\n      swap2\n      pop\n        /* \"#utility.yul\":3468:3586   */\n      pop\n        /* \"#utility.yul\":3119:3593   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3599:3689   */\n    tag_426:\n        /* \"#utility.yul\":3633:3640   */\n      0x00\n        /* \"#utility.yul\":3676:3681   */\n      dup2\n        /* \"#utility.yul\":3669:3682   */\n      iszero\n        /* \"#utility.yul\":3662:3683   */\n      iszero\n        /* \"#utility.yul\":3651:3683   */\n      swap1\n      pop\n        /* \"#utility.yul\":3599:3689   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3695:3804   */\n    tag_427:\n        /* \"#utility.yul\":3776:3797   */\n      tag_490\n        /* \"#utility.yul\":3791:3796   */\n      dup2\n        /* \"#utility.yul\":3776:3797   */\n      tag_426\n      jump\t// in\n    tag_490:\n        /* \"#utility.yul\":3771:3774   */\n      dup3\n        /* \"#utility.yul\":3764:3798   */\n      mstore\n        /* \"#utility.yul\":3695:3804   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3810:4020   */\n    tag_54:\n        /* \"#utility.yul\":3897:3901   */\n      0x00\n        /* \"#utility.yul\":3935:3937   */\n      0x20\n        /* \"#utility.yul\":3924:3933   */\n      dup3\n        /* \"#utility.yul\":3920:3938   */\n      add\n        /* \"#utility.yul\":3912:3938   */\n      swap1\n      pop\n        /* \"#utility.yul\":3948:4013   */\n      tag_492\n        /* \"#utility.yul\":4010:4011   */\n      0x00\n        /* \"#utility.yul\":3999:4008   */\n      dup4\n        /* \"#utility.yul\":3995:4012   */\n      add\n        /* \"#utility.yul\":3986:3992   */\n      dup5\n        /* \"#utility.yul\":3948:4013   */\n      tag_427\n      jump\t// in\n    tag_492:\n        /* \"#utility.yul\":3810:4020   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4026:4645   */\n    tag_64:\n        /* \"#utility.yul\":4103:4109   */\n      0x00\n        /* \"#utility.yul\":4111:4117   */\n      dup1\n        /* \"#utility.yul\":4119:4125   */\n      0x00\n        /* \"#utility.yul\":4168:4170   */\n      0x60\n        /* \"#utility.yul\":4156:4165   */\n      dup5\n        /* \"#utility.yul\":4147:4154   */\n      dup7\n        /* \"#utility.yul\":4143:4166   */\n      sub\n        /* \"#utility.yul\":4139:4171   */\n      slt\n        /* \"#utility.yul\":4136:4255   */\n      iszero\n      tag_494\n      jumpi\n        /* \"#utility.yul\":4174:4253   */\n      tag_495\n      tag_418\n      jump\t// in\n    tag_495:\n        /* \"#utility.yul\":4136:4255   */\n    tag_494:\n        /* \"#utility.yul\":4294:4295   */\n      0x00\n        /* \"#utility.yul\":4319:4372   */\n      tag_496\n        /* \"#utility.yul\":4364:4371   */\n      dup7\n        /* \"#utility.yul\":4355:4361   */\n      dup3\n        /* \"#utility.yul\":4344:4353   */\n      dup8\n        /* \"#utility.yul\":4340:4362   */\n      add\n        /* \"#utility.yul\":4319:4372   */\n      tag_425\n      jump\t// in\n    tag_496:\n        /* \"#utility.yul\":4309:4372   */\n      swap4\n      pop\n        /* \"#utility.yul\":4265:4382   */\n      pop\n        /* \"#utility.yul\":4421:4423   */\n      0x20\n        /* \"#utility.yul\":4447:4500   */\n      tag_497\n        /* \"#utility.yul\":4492:4499   */\n      dup7\n        /* \"#utility.yul\":4483:4489   */\n      dup3\n        /* \"#utility.yul\":4472:4481   */\n      dup8\n        /* \"#utility.yul\":4468:4490   */\n      add\n        /* \"#utility.yul\":4447:4500   */\n      tag_425\n      jump\t// in\n    tag_497:\n        /* \"#utility.yul\":4437:4500   */\n      swap3\n      pop\n        /* \"#utility.yul\":4392:4510   */\n      pop\n        /* \"#utility.yul\":4549:4551   */\n      0x40\n        /* \"#utility.yul\":4575:4628   */\n      tag_498\n        /* \"#utility.yul\":4620:4627   */\n      dup7\n        /* \"#utility.yul\":4611:4617   */\n      dup3\n        /* \"#utility.yul\":4600:4609   */\n      dup8\n        /* \"#utility.yul\":4596:4618   */\n      add\n        /* \"#utility.yul\":4575:4628   */\n      tag_421\n      jump\t// in\n    tag_498:\n        /* \"#utility.yul\":4565:4628   */\n      swap2\n      pop\n        /* \"#utility.yul\":4520:4638   */\n      pop\n        /* \"#utility.yul\":4026:4645   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":4651:4737   */\n    tag_428:\n        /* \"#utility.yul\":4686:4693   */\n      0x00\n        /* \"#utility.yul\":4726:4730   */\n      0xff\n        /* \"#utility.yul\":4719:4724   */\n      dup3\n        /* \"#utility.yul\":4715:4731   */\n      and\n        /* \"#utility.yul\":4704:4731   */\n      swap1\n      pop\n        /* \"#utility.yul\":4651:4737   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4743:4855   */\n    tag_429:\n        /* \"#utility.yul\":4826:4848   */\n      tag_501\n        /* \"#utility.yul\":4842:4847   */\n      dup2\n        /* \"#utility.yul\":4826:4848   */\n      tag_428\n      jump\t// in\n    tag_501:\n        /* \"#utility.yul\":4821:4824   */\n      dup3\n        /* \"#utility.yul\":4814:4849   */\n      mstore\n        /* \"#utility.yul\":4743:4855   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4861:5075   */\n    tag_70:\n        /* \"#utility.yul\":4950:4954   */\n      0x00\n        /* \"#utility.yul\":4988:4990   */\n      0x20\n        /* \"#utility.yul\":4977:4986   */\n      dup3\n        /* \"#utility.yul\":4973:4991   */\n      add\n        /* \"#utility.yul\":4965:4991   */\n      swap1\n      pop\n        /* \"#utility.yul\":5001:5068   */\n      tag_503\n        /* \"#utility.yul\":5065:5066   */\n      0x00\n        /* \"#utility.yul\":5054:5063   */\n      dup4\n        /* \"#utility.yul\":5050:5067   */\n      add\n        /* \"#utility.yul\":5041:5047   */\n      dup5\n        /* \"#utility.yul\":5001:5068   */\n      tag_429\n      jump\t// in\n    tag_503:\n        /* \"#utility.yul\":4861:5075   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5081:5199   */\n    tag_430:\n        /* \"#utility.yul\":5168:5192   */\n      tag_505\n        /* \"#utility.yul\":5186:5191   */\n      dup2\n        /* \"#utility.yul\":5168:5192   */\n      tag_423\n      jump\t// in\n    tag_505:\n        /* \"#utility.yul\":5163:5166   */\n      dup3\n        /* \"#utility.yul\":5156:5193   */\n      mstore\n        /* \"#utility.yul\":5081:5199   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5205:5427   */\n    tag_74:\n        /* \"#utility.yul\":5298:5302   */\n      0x00\n        /* \"#utility.yul\":5336:5338   */\n      0x20\n        /* \"#utility.yul\":5325:5334   */\n      dup3\n        /* \"#utility.yul\":5321:5339   */\n      add\n        /* \"#utility.yul\":5313:5339   */\n      swap1\n      pop\n        /* \"#utility.yul\":5349:5420   */\n      tag_507\n        /* \"#utility.yul\":5417:5418   */\n      0x00\n        /* \"#utility.yul\":5406:5415   */\n      dup4\n        /* \"#utility.yul\":5402:5419   */\n      add\n        /* \"#utility.yul\":5393:5399   */\n      dup5\n        /* \"#utility.yul\":5349:5420   */\n      tag_430\n      jump\t// in\n    tag_507:\n        /* \"#utility.yul\":5205:5427   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5433:5762   */\n    tag_77:\n        /* \"#utility.yul\":5492:5498   */\n      0x00\n        /* \"#utility.yul\":5541:5543   */\n      0x20\n        /* \"#utility.yul\":5529:5538   */\n      dup3\n        /* \"#utility.yul\":5520:5527   */\n      dup5\n        /* \"#utility.yul\":5516:5539   */\n      sub\n        /* \"#utility.yul\":5512:5544   */\n      slt\n        /* \"#utility.yul\":5509:5628   */\n      iszero\n      tag_509\n      jumpi\n        /* \"#utility.yul\":5547:5626   */\n      tag_510\n      tag_418\n      jump\t// in\n    tag_510:\n        /* \"#utility.yul\":5509:5628   */\n    tag_509:\n        /* \"#utility.yul\":5667:5668   */\n      0x00\n        /* \"#utility.yul\":5692:5745   */\n      tag_511\n        /* \"#utility.yul\":5737:5744   */\n      dup5\n        /* \"#utility.yul\":5728:5734   */\n      dup3\n        /* \"#utility.yul\":5717:5726   */\n      dup6\n        /* \"#utility.yul\":5713:5735   */\n      add\n        /* \"#utility.yul\":5692:5745   */\n      tag_425\n      jump\t// in\n    tag_511:\n        /* \"#utility.yul\":5682:5745   */\n      swap2\n      pop\n        /* \"#utility.yul\":5638:5755   */\n      pop\n        /* \"#utility.yul\":5433:5762   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5768:6242   */\n    tag_86:\n        /* \"#utility.yul\":5836:5842   */\n      0x00\n        /* \"#utility.yul\":5844:5850   */\n      dup1\n        /* \"#utility.yul\":5893:5895   */\n      0x40\n        /* \"#utility.yul\":5881:5890   */\n      dup4\n        /* \"#utility.yul\":5872:5879   */\n      dup6\n        /* \"#utility.yul\":5868:5891   */\n      sub\n        /* \"#utility.yul\":5864:5896   */\n      slt\n        /* \"#utility.yul\":5861:5980   */\n      iszero\n      tag_513\n      jumpi\n        /* \"#utility.yul\":5899:5978   */\n      tag_514\n      tag_418\n      jump\t// in\n    tag_514:\n        /* \"#utility.yul\":5861:5980   */\n    tag_513:\n        /* \"#utility.yul\":6019:6020   */\n      0x00\n        /* \"#utility.yul\":6044:6097   */\n      tag_515\n        /* \"#utility.yul\":6089:6096   */\n      dup6\n        /* \"#utility.yul\":6080:6086   */\n      dup3\n        /* \"#utility.yul\":6069:6078   */\n      dup7\n        /* \"#utility.yul\":6065:6087   */\n      add\n        /* \"#utility.yul\":6044:6097   */\n      tag_421\n      jump\t// in\n    tag_515:\n        /* \"#utility.yul\":6034:6097   */\n      swap3\n      pop\n        /* \"#utility.yul\":5990:6107   */\n      pop\n        /* \"#utility.yul\":6146:6148   */\n      0x20\n        /* \"#utility.yul\":6172:6225   */\n      tag_516\n        /* \"#utility.yul\":6217:6224   */\n      dup6\n        /* \"#utility.yul\":6208:6214   */\n      dup3\n        /* \"#utility.yul\":6197:6206   */\n      dup7\n        /* \"#utility.yul\":6193:6215   */\n      add\n        /* \"#utility.yul\":6172:6225   */\n      tag_425\n      jump\t// in\n    tag_516:\n        /* \"#utility.yul\":6162:6225   */\n      swap2\n      pop\n        /* \"#utility.yul\":6117:6235   */\n      pop\n        /* \"#utility.yul\":5768:6242   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6248:6867   */\n    tag_117:\n        /* \"#utility.yul\":6325:6331   */\n      0x00\n        /* \"#utility.yul\":6333:6339   */\n      dup1\n        /* \"#utility.yul\":6341:6347   */\n      0x00\n        /* \"#utility.yul\":6390:6392   */\n      0x60\n        /* \"#utility.yul\":6378:6387   */\n      dup5\n        /* \"#utility.yul\":6369:6376   */\n      dup7\n        /* \"#utility.yul\":6365:6388   */\n      sub\n        /* \"#utility.yul\":6361:6393   */\n      slt\n        /* \"#utility.yul\":6358:6477   */\n      iszero\n      tag_518\n      jumpi\n        /* \"#utility.yul\":6396:6475   */\n      tag_519\n      tag_418\n      jump\t// in\n    tag_519:\n        /* \"#utility.yul\":6358:6477   */\n    tag_518:\n        /* \"#utility.yul\":6516:6517   */\n      0x00\n        /* \"#utility.yul\":6541:6594   */\n      tag_520\n        /* \"#utility.yul\":6586:6593   */\n      dup7\n        /* \"#utility.yul\":6577:6583   */\n      dup3\n        /* \"#utility.yul\":6566:6575   */\n      dup8\n        /* \"#utility.yul\":6562:6584   */\n      add\n        /* \"#utility.yul\":6541:6594   */\n      tag_421\n      jump\t// in\n    tag_520:\n        /* \"#utility.yul\":6531:6594   */\n      swap4\n      pop\n        /* \"#utility.yul\":6487:6604   */\n      pop\n        /* \"#utility.yul\":6643:6645   */\n      0x20\n        /* \"#utility.yul\":6669:6722   */\n      tag_521\n        /* \"#utility.yul\":6714:6721   */\n      dup7\n        /* \"#utility.yul\":6705:6711   */\n      dup3\n        /* \"#utility.yul\":6694:6703   */\n      dup8\n        /* \"#utility.yul\":6690:6712   */\n      add\n        /* \"#utility.yul\":6669:6722   */\n      tag_425\n      jump\t// in\n    tag_521:\n        /* \"#utility.yul\":6659:6722   */\n      swap3\n      pop\n        /* \"#utility.yul\":6614:6732   */\n      pop\n        /* \"#utility.yul\":6771:6773   */\n      0x40\n        /* \"#utility.yul\":6797:6850   */\n      tag_522\n        /* \"#utility.yul\":6842:6849   */\n      dup7\n        /* \"#utility.yul\":6833:6839   */\n      dup3\n        /* \"#utility.yul\":6822:6831   */\n      dup8\n        /* \"#utility.yul\":6818:6840   */\n      add\n        /* \"#utility.yul\":6797:6850   */\n      tag_425\n      jump\t// in\n    tag_522:\n        /* \"#utility.yul\":6787:6850   */\n      swap2\n      pop\n        /* \"#utility.yul\":6742:6860   */\n      pop\n        /* \"#utility.yul\":6248:6867   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":6873:7347   */\n    tag_142:\n        /* \"#utility.yul\":6941:6947   */\n      0x00\n        /* \"#utility.yul\":6949:6955   */\n      dup1\n        /* \"#utility.yul\":6998:7000   */\n      0x40\n        /* \"#utility.yul\":6986:6995   */\n      dup4\n        /* \"#utility.yul\":6977:6984   */\n      dup6\n        /* \"#utility.yul\":6973:6996   */\n      sub\n        /* \"#utility.yul\":6969:7001   */\n      slt\n        /* \"#utility.yul\":6966:7085   */\n      iszero\n      tag_524\n      jumpi\n        /* \"#utility.yul\":7004:7083   */\n      tag_525\n      tag_418\n      jump\t// in\n    tag_525:\n        /* \"#utility.yul\":6966:7085   */\n    tag_524:\n        /* \"#utility.yul\":7124:7125   */\n      0x00\n        /* \"#utility.yul\":7149:7202   */\n      tag_526\n        /* \"#utility.yul\":7194:7201   */\n      dup6\n        /* \"#utility.yul\":7185:7191   */\n      dup3\n        /* \"#utility.yul\":7174:7183   */\n      dup7\n        /* \"#utility.yul\":7170:7192   */\n      add\n        /* \"#utility.yul\":7149:7202   */\n      tag_425\n      jump\t// in\n    tag_526:\n        /* \"#utility.yul\":7139:7202   */\n      swap3\n      pop\n        /* \"#utility.yul\":7095:7212   */\n      pop\n        /* \"#utility.yul\":7251:7253   */\n      0x20\n        /* \"#utility.yul\":7277:7330   */\n      tag_527\n        /* \"#utility.yul\":7322:7329   */\n      dup6\n        /* \"#utility.yul\":7313:7319   */\n      dup3\n        /* \"#utility.yul\":7302:7311   */\n      dup7\n        /* \"#utility.yul\":7298:7320   */\n      add\n        /* \"#utility.yul\":7277:7330   */\n      tag_425\n      jump\t// in\n    tag_527:\n        /* \"#utility.yul\":7267:7330   */\n      swap2\n      pop\n        /* \"#utility.yul\":7222:7340   */\n      pop\n        /* \"#utility.yul\":6873:7347   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7353:7496   */\n    tag_431:\n        /* \"#utility.yul\":7410:7415   */\n      0x00\n        /* \"#utility.yul\":7441:7447   */\n      dup2\n        /* \"#utility.yul\":7435:7448   */\n      mload\n        /* \"#utility.yul\":7426:7448   */\n      swap1\n      pop\n        /* \"#utility.yul\":7457:7490   */\n      tag_529\n        /* \"#utility.yul\":7484:7489   */\n      dup2\n        /* \"#utility.yul\":7457:7490   */\n      tag_420\n      jump\t// in\n    tag_529:\n        /* \"#utility.yul\":7353:7496   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7502:7853   */\n    tag_154:\n        /* \"#utility.yul\":7572:7578   */\n      0x00\n        /* \"#utility.yul\":7621:7623   */\n      0x20\n        /* \"#utility.yul\":7609:7618   */\n      dup3\n        /* \"#utility.yul\":7600:7607   */\n      dup5\n        /* \"#utility.yul\":7596:7619   */\n      sub\n        /* \"#utility.yul\":7592:7624   */\n      slt\n        /* \"#utility.yul\":7589:7708   */\n      iszero\n      tag_531\n      jumpi\n        /* \"#utility.yul\":7627:7706   */\n      tag_532\n      tag_418\n      jump\t// in\n    tag_532:\n        /* \"#utility.yul\":7589:7708   */\n    tag_531:\n        /* \"#utility.yul\":7747:7748   */\n      0x00\n        /* \"#utility.yul\":7772:7836   */\n      tag_533\n        /* \"#utility.yul\":7828:7835   */\n      dup5\n        /* \"#utility.yul\":7819:7825   */\n      dup3\n        /* \"#utility.yul\":7808:7817   */\n      dup6\n        /* \"#utility.yul\":7804:7826   */\n      add\n        /* \"#utility.yul\":7772:7836   */\n      tag_431\n      jump\t// in\n    tag_533:\n        /* \"#utility.yul\":7762:7836   */\n      swap2\n      pop\n        /* \"#utility.yul\":7718:7846   */\n      pop\n        /* \"#utility.yul\":7502:7853   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7859:8039   */\n    tag_432:\n        /* \"#utility.yul\":7907:7984   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":7904:7905   */\n      0x00\n        /* \"#utility.yul\":7897:7985   */\n      mstore\n        /* \"#utility.yul\":8004:8008   */\n      0x22\n        /* \"#utility.yul\":8001:8002   */\n      0x04\n        /* \"#utility.yul\":7994:8009   */\n      mstore\n        /* \"#utility.yul\":8028:8032   */\n      0x24\n        /* \"#utility.yul\":8025:8026   */\n      0x00\n        /* \"#utility.yul\":8018:8033   */\n      revert\n        /* \"#utility.yul\":8045:8365   */\n    tag_157:\n        /* \"#utility.yul\":8089:8095   */\n      0x00\n        /* \"#utility.yul\":8126:8127   */\n      0x02\n        /* \"#utility.yul\":8120:8124   */\n      dup3\n        /* \"#utility.yul\":8116:8128   */\n      div\n        /* \"#utility.yul\":8106:8128   */\n      swap1\n      pop\n        /* \"#utility.yul\":8173:8174   */\n      0x01\n        /* \"#utility.yul\":8167:8171   */\n      dup3\n        /* \"#utility.yul\":8163:8175   */\n      and\n        /* \"#utility.yul\":8194:8212   */\n      dup1\n        /* \"#utility.yul\":8184:8265   */\n      tag_536\n      jumpi\n        /* \"#utility.yul\":8250:8254   */\n      0x7f\n        /* \"#utility.yul\":8242:8248   */\n      dup3\n        /* \"#utility.yul\":8238:8255   */\n      and\n        /* \"#utility.yul\":8228:8255   */\n      swap2\n      pop\n        /* \"#utility.yul\":8184:8265   */\n    tag_536:\n        /* \"#utility.yul\":8312:8314   */\n      0x20\n        /* \"#utility.yul\":8304:8310   */\n      dup3\n        /* \"#utility.yul\":8301:8315   */\n      lt\n        /* \"#utility.yul\":8281:8299   */\n      dup2\n        /* \"#utility.yul\":8278:8316   */\n      sub\n        /* \"#utility.yul\":8275:8359   */\n      tag_537\n      jumpi\n        /* \"#utility.yul\":8331:8349   */\n      tag_538\n      tag_432\n      jump\t// in\n    tag_538:\n        /* \"#utility.yul\":8275:8359   */\n    tag_537:\n        /* \"#utility.yul\":8096:8365   */\n      pop\n        /* \"#utility.yul\":8045:8365   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8371:8551   */\n    tag_433:\n        /* \"#utility.yul\":8419:8496   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":8416:8417   */\n      0x00\n        /* \"#utility.yul\":8409:8497   */\n      mstore\n        /* \"#utility.yul\":8516:8520   */\n      0x11\n        /* \"#utility.yul\":8513:8514   */\n      0x04\n        /* \"#utility.yul\":8506:8521   */\n      mstore\n        /* \"#utility.yul\":8540:8544   */\n      0x24\n        /* \"#utility.yul\":8537:8538   */\n      0x00\n        /* \"#utility.yul\":8530:8545   */\n      revert\n        /* \"#utility.yul\":8557:8751   */\n    tag_175:\n        /* \"#utility.yul\":8597:8601   */\n      0x00\n        /* \"#utility.yul\":8617:8637   */\n      tag_541\n        /* \"#utility.yul\":8635:8636   */\n      dup3\n        /* \"#utility.yul\":8617:8637   */\n      tag_410\n      jump\t// in\n    tag_541:\n        /* \"#utility.yul\":8612:8637   */\n      swap2\n      pop\n        /* \"#utility.yul\":8651:8671   */\n      tag_542\n        /* \"#utility.yul\":8669:8670   */\n      dup4\n        /* \"#utility.yul\":8651:8671   */\n      tag_410\n      jump\t// in\n    tag_542:\n        /* \"#utility.yul\":8646:8671   */\n      swap3\n      pop\n        /* \"#utility.yul\":8695:8696   */\n      dup3\n        /* \"#utility.yul\":8692:8693   */\n      dup3\n        /* \"#utility.yul\":8688:8697   */\n      sub\n        /* \"#utility.yul\":8680:8697   */\n      swap1\n      pop\n        /* \"#utility.yul\":8719:8720   */\n      dup2\n        /* \"#utility.yul\":8713:8717   */\n      dup2\n        /* \"#utility.yul\":8710:8721   */\n      gt\n        /* \"#utility.yul\":8707:8744   */\n      iszero\n      tag_543\n      jumpi\n        /* \"#utility.yul\":8724:8742   */\n      tag_544\n      tag_433\n      jump\t// in\n    tag_544:\n        /* \"#utility.yul\":8707:8744   */\n    tag_543:\n        /* \"#utility.yul\":8557:8751   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8757:8945   */\n    tag_187:\n        /* \"#utility.yul\":8795:8798   */\n      0x00\n        /* \"#utility.yul\":8814:8832   */\n      tag_546\n        /* \"#utility.yul\":8830:8831   */\n      dup3\n        /* \"#utility.yul\":8814:8832   */\n      tag_428\n      jump\t// in\n    tag_546:\n        /* \"#utility.yul\":8809:8832   */\n      swap2\n      pop\n        /* \"#utility.yul\":8846:8864   */\n      tag_547\n        /* \"#utility.yul\":8862:8863   */\n      dup4\n        /* \"#utility.yul\":8846:8864   */\n      tag_428\n      jump\t// in\n    tag_547:\n        /* \"#utility.yul\":8841:8864   */\n      swap3\n      pop\n        /* \"#utility.yul\":8887:8888   */\n      dup3\n        /* \"#utility.yul\":8884:8885   */\n      dup3\n        /* \"#utility.yul\":8880:8889   */\n      add\n        /* \"#utility.yul\":8873:8889   */\n      swap1\n      pop\n        /* \"#utility.yul\":8910:8914   */\n      0xff\n        /* \"#utility.yul\":8905:8908   */\n      dup2\n        /* \"#utility.yul\":8902:8915   */\n      gt\n        /* \"#utility.yul\":8899:8938   */\n      iszero\n      tag_548\n      jumpi\n        /* \"#utility.yul\":8918:8936   */\n      tag_549\n      tag_433\n      jump\t// in\n    tag_549:\n        /* \"#utility.yul\":8899:8938   */\n    tag_548:\n        /* \"#utility.yul\":8757:8945   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8951:9142   */\n    tag_196:\n        /* \"#utility.yul\":8991:8994   */\n      0x00\n        /* \"#utility.yul\":9010:9030   */\n      tag_551\n        /* \"#utility.yul\":9028:9029   */\n      dup3\n        /* \"#utility.yul\":9010:9030   */\n      tag_410\n      jump\t// in\n    tag_551:\n        /* \"#utility.yul\":9005:9030   */\n      swap2\n      pop\n        /* \"#utility.yul\":9044:9064   */\n      tag_552\n        /* \"#utility.yul\":9062:9063   */\n      dup4\n        /* \"#utility.yul\":9044:9064   */\n      tag_410\n      jump\t// in\n    tag_552:\n        /* \"#utility.yul\":9039:9064   */\n      swap3\n      pop\n        /* \"#utility.yul\":9087:9088   */\n      dup3\n        /* \"#utility.yul\":9084:9085   */\n      dup3\n        /* \"#utility.yul\":9080:9089   */\n      add\n        /* \"#utility.yul\":9073:9089   */\n      swap1\n      pop\n        /* \"#utility.yul\":9108:9111   */\n      dup1\n        /* \"#utility.yul\":9105:9106   */\n      dup3\n        /* \"#utility.yul\":9102:9112   */\n      gt\n        /* \"#utility.yul\":9099:9135   */\n      iszero\n      tag_553\n      jumpi\n        /* \"#utility.yul\":9115:9133   */\n      tag_554\n      tag_433\n      jump\t// in\n    tag_554:\n        /* \"#utility.yul\":9099:9135   */\n    tag_553:\n        /* \"#utility.yul\":8951:9142   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9148:9590   */\n    tag_203:\n        /* \"#utility.yul\":9297:9301   */\n      0x00\n        /* \"#utility.yul\":9335:9337   */\n      0x60\n        /* \"#utility.yul\":9324:9333   */\n      dup3\n        /* \"#utility.yul\":9320:9338   */\n      add\n        /* \"#utility.yul\":9312:9338   */\n      swap1\n      pop\n        /* \"#utility.yul\":9348:9419   */\n      tag_556\n        /* \"#utility.yul\":9416:9417   */\n      0x00\n        /* \"#utility.yul\":9405:9414   */\n      dup4\n        /* \"#utility.yul\":9401:9418   */\n      add\n        /* \"#utility.yul\":9392:9398   */\n      dup7\n        /* \"#utility.yul\":9348:9419   */\n      tag_430\n      jump\t// in\n    tag_556:\n        /* \"#utility.yul\":9429:9501   */\n      tag_557\n        /* \"#utility.yul\":9497:9499   */\n      0x20\n        /* \"#utility.yul\":9486:9495   */\n      dup4\n        /* \"#utility.yul\":9482:9500   */\n      add\n        /* \"#utility.yul\":9473:9479   */\n      dup6\n        /* \"#utility.yul\":9429:9501   */\n      tag_411\n      jump\t// in\n    tag_557:\n        /* \"#utility.yul\":9511:9583   */\n      tag_558\n        /* \"#utility.yul\":9579:9581   */\n      0x40\n        /* \"#utility.yul\":9568:9577   */\n      dup4\n        /* \"#utility.yul\":9564:9582   */\n      add\n        /* \"#utility.yul\":9555:9561   */\n      dup5\n        /* \"#utility.yul\":9511:9583   */\n      tag_411\n      jump\t// in\n    tag_558:\n        /* \"#utility.yul\":9148:9590   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9596:9773   */\n    tag_434:\n        /* \"#utility.yul\":9736:9765   */\n      0x45786365656473206d617820776974686472617720616d6f756e740000000000\n        /* \"#utility.yul\":9732:9733   */\n      0x00\n        /* \"#utility.yul\":9724:9730   */\n      dup3\n        /* \"#utility.yul\":9720:9734   */\n      add\n        /* \"#utility.yul\":9713:9766   */\n      mstore\n        /* \"#utility.yul\":9596:9773   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9779:10145   */\n    tag_435:\n        /* \"#utility.yul\":9921:9924   */\n      0x00\n        /* \"#utility.yul\":9942:10009   */\n      tag_561\n        /* \"#utility.yul\":10006:10008   */\n      0x1b\n        /* \"#utility.yul\":10001:10004   */\n      dup4\n        /* \"#utility.yul\":9942:10009   */\n      tag_413\n      jump\t// in\n    tag_561:\n        /* \"#utility.yul\":9935:10009   */\n      swap2\n      pop\n        /* \"#utility.yul\":10018:10111   */\n      tag_562\n        /* \"#utility.yul\":10107:10110   */\n      dup3\n        /* \"#utility.yul\":10018:10111   */\n      tag_434\n      jump\t// in\n    tag_562:\n        /* \"#utility.yul\":10136:10138   */\n      0x20\n        /* \"#utility.yul\":10131:10134   */\n      dup3\n        /* \"#utility.yul\":10127:10139   */\n      add\n        /* \"#utility.yul\":10120:10139   */\n      swap1\n      pop\n        /* \"#utility.yul\":9779:10145   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10151:10570   */\n    tag_223:\n        /* \"#utility.yul\":10317:10321   */\n      0x00\n        /* \"#utility.yul\":10355:10357   */\n      0x20\n        /* \"#utility.yul\":10344:10353   */\n      dup3\n        /* \"#utility.yul\":10340:10358   */\n      add\n        /* \"#utility.yul\":10332:10358   */\n      swap1\n      pop\n        /* \"#utility.yul\":10404:10413   */\n      dup2\n        /* \"#utility.yul\":10398:10402   */\n      dup2\n        /* \"#utility.yul\":10394:10414   */\n      sub\n        /* \"#utility.yul\":10390:10391   */\n      0x00\n        /* \"#utility.yul\":10379:10388   */\n      dup4\n        /* \"#utility.yul\":10375:10392   */\n      add\n        /* \"#utility.yul\":10368:10415   */\n      mstore\n        /* \"#utility.yul\":10432:10563   */\n      tag_564\n        /* \"#utility.yul\":10558:10562   */\n      dup2\n        /* \"#utility.yul\":10432:10563   */\n      tag_435\n      jump\t// in\n    tag_564:\n        /* \"#utility.yul\":10424:10563   */\n      swap1\n      pop\n        /* \"#utility.yul\":10151:10570   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10576:10796   */\n    tag_436:\n        /* \"#utility.yul\":10716:10750   */\n      0x43616e6e6f74207769746864726177206c6f636b656420636f6c6c6174657261\n        /* \"#utility.yul\":10712:10713   */\n      0x00\n        /* \"#utility.yul\":10704:10710   */\n      dup3\n        /* \"#utility.yul\":10700:10714   */\n      add\n        /* \"#utility.yul\":10693:10751   */\n      mstore\n        /* \"#utility.yul\":10785:10788   */\n      0x6c00000000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10780:10782   */\n      0x20\n        /* \"#utility.yul\":10772:10778   */\n      dup3\n        /* \"#utility.yul\":10768:10783   */\n      add\n        /* \"#utility.yul\":10761:10789   */\n      mstore\n        /* \"#utility.yul\":10576:10796   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10802:11168   */\n    tag_437:\n        /* \"#utility.yul\":10944:10947   */\n      0x00\n        /* \"#utility.yul\":10965:11032   */\n      tag_567\n        /* \"#utility.yul\":11029:11031   */\n      0x21\n        /* \"#utility.yul\":11024:11027   */\n      dup4\n        /* \"#utility.yul\":10965:11032   */\n      tag_413\n      jump\t// in\n    tag_567:\n        /* \"#utility.yul\":10958:11032   */\n      swap2\n      pop\n        /* \"#utility.yul\":11041:11134   */\n      tag_568\n        /* \"#utility.yul\":11130:11133   */\n      dup3\n        /* \"#utility.yul\":11041:11134   */\n      tag_436\n      jump\t// in\n    tag_568:\n        /* \"#utility.yul\":11159:11161   */\n      0x40\n        /* \"#utility.yul\":11154:11157   */\n      dup3\n        /* \"#utility.yul\":11150:11162   */\n      add\n        /* \"#utility.yul\":11143:11162   */\n      swap1\n      pop\n        /* \"#utility.yul\":10802:11168   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11174:11593   */\n    tag_226:\n        /* \"#utility.yul\":11340:11344   */\n      0x00\n        /* \"#utility.yul\":11378:11380   */\n      0x20\n        /* \"#utility.yul\":11367:11376   */\n      dup3\n        /* \"#utility.yul\":11363:11381   */\n      add\n        /* \"#utility.yul\":11355:11381   */\n      swap1\n      pop\n        /* \"#utility.yul\":11427:11436   */\n      dup2\n        /* \"#utility.yul\":11421:11425   */\n      dup2\n        /* \"#utility.yul\":11417:11437   */\n      sub\n        /* \"#utility.yul\":11413:11414   */\n      0x00\n        /* \"#utility.yul\":11402:11411   */\n      dup4\n        /* \"#utility.yul\":11398:11415   */\n      add\n        /* \"#utility.yul\":11391:11438   */\n      mstore\n        /* \"#utility.yul\":11455:11586   */\n      tag_570\n        /* \"#utility.yul\":11581:11585   */\n      dup2\n        /* \"#utility.yul\":11455:11586   */\n      tag_437\n      jump\t// in\n    tag_570:\n        /* \"#utility.yul\":11447:11586   */\n      swap1\n      pop\n        /* \"#utility.yul\":11174:11593   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11599:11701   */\n    tag_438:\n        /* \"#utility.yul\":11641:11649   */\n      0x00\n        /* \"#utility.yul\":11688:11693   */\n      dup2\n        /* \"#utility.yul\":11685:11686   */\n      0x01\n        /* \"#utility.yul\":11681:11694   */\n      shr\n        /* \"#utility.yul\":11660:11694   */\n      swap1\n      pop\n        /* \"#utility.yul\":11599:11701   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11707:12555   */\n    tag_439:\n        /* \"#utility.yul\":11768:11773   */\n      0x00\n        /* \"#utility.yul\":11775:11779   */\n      dup1\n        /* \"#utility.yul\":11799:11805   */\n      dup3\n        /* \"#utility.yul\":11790:11805   */\n      swap2\n      pop\n        /* \"#utility.yul\":11823:11828   */\n      dup4\n        /* \"#utility.yul\":11814:11828   */\n      swap1\n      pop\n        /* \"#utility.yul\":11837:12549   */\n    tag_573:\n        /* \"#utility.yul\":11858:11859   */\n      0x01\n        /* \"#utility.yul\":11848:11856   */\n      dup6\n        /* \"#utility.yul\":11845:11860   */\n      gt\n        /* \"#utility.yul\":11837:12549   */\n      iszero\n      tag_575\n      jumpi\n        /* \"#utility.yul\":11953:11957   */\n      dup1\n        /* \"#utility.yul\":11948:11951   */\n      dup7\n        /* \"#utility.yul\":11944:11958   */\n      div\n        /* \"#utility.yul\":11938:11942   */\n      dup2\n        /* \"#utility.yul\":11935:11959   */\n      gt\n        /* \"#utility.yul\":11932:11982   */\n      iszero\n      tag_576\n      jumpi\n        /* \"#utility.yul\":11962:11980   */\n      tag_577\n      tag_433\n      jump\t// in\n    tag_577:\n        /* \"#utility.yul\":11932:11982   */\n    tag_576:\n        /* \"#utility.yul\":12012:12013   */\n      0x01\n        /* \"#utility.yul\":12002:12010   */\n      dup6\n        /* \"#utility.yul\":11998:12014   */\n      and\n        /* \"#utility.yul\":11995:12446   */\n      iszero\n      tag_578\n      jumpi\n        /* \"#utility.yul\":12427:12431   */\n      dup1\n        /* \"#utility.yul\":12420:12425   */\n      dup3\n        /* \"#utility.yul\":12416:12432   */\n      mul\n        /* \"#utility.yul\":12407:12432   */\n      swap2\n      pop\n        /* \"#utility.yul\":11995:12446   */\n    tag_578:\n        /* \"#utility.yul\":12477:12481   */\n      dup1\n        /* \"#utility.yul\":12471:12475   */\n      dup2\n        /* \"#utility.yul\":12467:12482   */\n      mul\n        /* \"#utility.yul\":12459:12482   */\n      swap1\n      pop\n        /* \"#utility.yul\":12507:12539   */\n      tag_579\n        /* \"#utility.yul\":12530:12538   */\n      dup6\n        /* \"#utility.yul\":12507:12539   */\n      tag_438\n      jump\t// in\n    tag_579:\n        /* \"#utility.yul\":12495:12539   */\n      swap5\n      pop\n        /* \"#utility.yul\":11837:12549   */\n      jump(tag_573)\n    tag_575:\n        /* \"#utility.yul\":11707:12555   */\n      swap5\n      pop\n      swap5\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12561:13634   */\n    tag_440:\n        /* \"#utility.yul\":12615:12620   */\n      0x00\n        /* \"#utility.yul\":12806:12814   */\n      dup3\n        /* \"#utility.yul\":12796:12836   */\n      tag_581\n      jumpi\n        /* \"#utility.yul\":12827:12828   */\n      0x01\n        /* \"#utility.yul\":12818:12828   */\n      swap1\n      pop\n        /* \"#utility.yul\":12829:12834   */\n      jump(tag_580)\n        /* \"#utility.yul\":12796:12836   */\n    tag_581:\n        /* \"#utility.yul\":12855:12859   */\n      dup2\n        /* \"#utility.yul\":12845:12881   */\n      tag_582\n      jumpi\n        /* \"#utility.yul\":12872:12873   */\n      0x00\n        /* \"#utility.yul\":12863:12873   */\n      swap1\n      pop\n        /* \"#utility.yul\":12874:12879   */\n      jump(tag_580)\n        /* \"#utility.yul\":12845:12881   */\n    tag_582:\n        /* \"#utility.yul\":12941:12945   */\n      dup2\n        /* \"#utility.yul\":12989:12990   */\n      0x01\n        /* \"#utility.yul\":12984:13011   */\n      dup2\n      eq\n      tag_584\n      jumpi\n        /* \"#utility.yul\":13025:13026   */\n      0x02\n        /* \"#utility.yul\":13020:13211   */\n      dup2\n      eq\n      tag_585\n      jumpi\n        /* \"#utility.yul\":12934:13211   */\n      jump(tag_583)\n        /* \"#utility.yul\":12984:13011   */\n    tag_584:\n        /* \"#utility.yul\":13002:13003   */\n      0x01\n        /* \"#utility.yul\":12993:13003   */\n      swap2\n      pop\n        /* \"#utility.yul\":13004:13009   */\n      pop\n      jump(tag_580)\n        /* \"#utility.yul\":13020:13211   */\n    tag_585:\n        /* \"#utility.yul\":13065:13068   */\n      0xff\n        /* \"#utility.yul\":13055:13063   */\n      dup5\n        /* \"#utility.yul\":13052:13069   */\n      gt\n        /* \"#utility.yul\":13049:13092   */\n      iszero\n      tag_586\n      jumpi\n        /* \"#utility.yul\":13072:13090   */\n      tag_587\n      tag_433\n      jump\t// in\n    tag_587:\n        /* \"#utility.yul\":13049:13092   */\n    tag_586:\n        /* \"#utility.yul\":13121:13129   */\n      dup4\n        /* \"#utility.yul\":13118:13119   */\n      0x02\n        /* \"#utility.yul\":13114:13130   */\n      exp\n        /* \"#utility.yul\":13105:13130   */\n      swap2\n      pop\n        /* \"#utility.yul\":13156:13159   */\n      dup5\n        /* \"#utility.yul\":13149:13154   */\n      dup3\n        /* \"#utility.yul\":13146:13160   */\n      gt\n        /* \"#utility.yul\":13143:13183   */\n      iszero\n      tag_588\n      jumpi\n        /* \"#utility.yul\":13163:13181   */\n      tag_589\n      tag_433\n      jump\t// in\n    tag_589:\n        /* \"#utility.yul\":13143:13183   */\n    tag_588:\n        /* \"#utility.yul\":13196:13201   */\n      pop\n      jump(tag_580)\n        /* \"#utility.yul\":12934:13211   */\n    tag_583:\n      pop\n        /* \"#utility.yul\":13320:13322   */\n      0x20\n        /* \"#utility.yul\":13310:13318   */\n      dup4\n        /* \"#utility.yul\":13307:13323   */\n      lt\n        /* \"#utility.yul\":13301:13304   */\n      0x0133\n        /* \"#utility.yul\":13295:13299   */\n      dup4\n        /* \"#utility.yul\":13292:13305   */\n      lt\n        /* \"#utility.yul\":13288:13324   */\n      and\n        /* \"#utility.yul\":13270:13272   */\n      0x4e\n        /* \"#utility.yul\":13260:13268   */\n      dup5\n        /* \"#utility.yul\":13257:13273   */\n      lt\n        /* \"#utility.yul\":13252:13254   */\n      0x0b\n        /* \"#utility.yul\":13246:13250   */\n      dup5\n        /* \"#utility.yul\":13243:13255   */\n      lt\n        /* \"#utility.yul\":13239:13274   */\n      and\n        /* \"#utility.yul\":13223:13334   */\n      or\n        /* \"#utility.yul\":13220:13466   */\n      iszero\n      tag_590\n      jumpi\n        /* \"#utility.yul\":13376:13384   */\n      dup3\n        /* \"#utility.yul\":13370:13374   */\n      dup3\n        /* \"#utility.yul\":13366:13385   */\n      exp\n        /* \"#utility.yul\":13357:13385   */\n      swap1\n      pop\n        /* \"#utility.yul\":13411:13414   */\n      dup4\n        /* \"#utility.yul\":13404:13409   */\n      dup2\n        /* \"#utility.yul\":13401:13415   */\n      gt\n        /* \"#utility.yul\":13398:13438   */\n      iszero\n      tag_591\n      jumpi\n        /* \"#utility.yul\":13418:13436   */\n      tag_592\n      tag_433\n      jump\t// in\n    tag_592:\n        /* \"#utility.yul\":13398:13438   */\n    tag_591:\n        /* \"#utility.yul\":13451:13456   */\n      jump(tag_580)\n        /* \"#utility.yul\":13220:13466   */\n    tag_590:\n        /* \"#utility.yul\":13491:13533   */\n      tag_593\n        /* \"#utility.yul\":13529:13532   */\n      dup5\n        /* \"#utility.yul\":13519:13527   */\n      dup5\n        /* \"#utility.yul\":13513:13517   */\n      dup5\n        /* \"#utility.yul\":13510:13511   */\n      0x01\n        /* \"#utility.yul\":13491:13533   */\n      tag_439\n      jump\t// in\n    tag_593:\n        /* \"#utility.yul\":13476:13533   */\n      swap3\n      pop\n      swap1\n      pop\n        /* \"#utility.yul\":13565:13569   */\n      dup2\n        /* \"#utility.yul\":13560:13563   */\n      dup5\n        /* \"#utility.yul\":13556:13570   */\n      div\n        /* \"#utility.yul\":13549:13554   */\n      dup2\n        /* \"#utility.yul\":13546:13571   */\n      gt\n        /* \"#utility.yul\":13543:13594   */\n      iszero\n      tag_594\n      jumpi\n        /* \"#utility.yul\":13574:13592   */\n      tag_595\n      tag_433\n      jump\t// in\n    tag_595:\n        /* \"#utility.yul\":13543:13594   */\n    tag_594:\n        /* \"#utility.yul\":13623:13627   */\n      dup2\n        /* \"#utility.yul\":13616:13621   */\n      dup2\n        /* \"#utility.yul\":13612:13628   */\n      mul\n        /* \"#utility.yul\":13603:13628   */\n      swap1\n      pop\n        /* \"#utility.yul\":12561:13634   */\n    tag_580:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13640:13921   */\n    tag_259:\n        /* \"#utility.yul\":13698:13703   */\n      0x00\n        /* \"#utility.yul\":13722:13745   */\n      tag_597\n        /* \"#utility.yul\":13740:13744   */\n      dup3\n        /* \"#utility.yul\":13722:13745   */\n      tag_410\n      jump\t// in\n    tag_597:\n        /* \"#utility.yul\":13714:13745   */\n      swap2\n      pop\n        /* \"#utility.yul\":13766:13791   */\n      tag_598\n        /* \"#utility.yul\":13782:13790   */\n      dup4\n        /* \"#utility.yul\":13766:13791   */\n      tag_428\n      jump\t// in\n    tag_598:\n        /* \"#utility.yul\":13754:13791   */\n      swap3\n      pop\n        /* \"#utility.yul\":13810:13914   */\n      tag_599\n        /* \"#utility.yul\":13847:13913   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":13837:13845   */\n      dup5\n        /* \"#utility.yul\":13831:13835   */\n      dup5\n        /* \"#utility.yul\":13810:13914   */\n      tag_440\n      jump\t// in\n    tag_599:\n        /* \"#utility.yul\":13801:13914   */\n      swap1\n      pop\n        /* \"#utility.yul\":13640:13921   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13927:14259   */\n    tag_296:\n        /* \"#utility.yul\":14048:14052   */\n      0x00\n        /* \"#utility.yul\":14086:14088   */\n      0x40\n        /* \"#utility.yul\":14075:14084   */\n      dup3\n        /* \"#utility.yul\":14071:14089   */\n      add\n        /* \"#utility.yul\":14063:14089   */\n      swap1\n      pop\n        /* \"#utility.yul\":14099:14170   */\n      tag_601\n        /* \"#utility.yul\":14167:14168   */\n      0x00\n        /* \"#utility.yul\":14156:14165   */\n      dup4\n        /* \"#utility.yul\":14152:14169   */\n      add\n        /* \"#utility.yul\":14143:14149   */\n      dup6\n        /* \"#utility.yul\":14099:14170   */\n      tag_411\n      jump\t// in\n    tag_601:\n        /* \"#utility.yul\":14180:14252   */\n      tag_602\n        /* \"#utility.yul\":14248:14250   */\n      0x20\n        /* \"#utility.yul\":14237:14246   */\n      dup4\n        /* \"#utility.yul\":14233:14251   */\n      add\n        /* \"#utility.yul\":14224:14230   */\n      dup5\n        /* \"#utility.yul\":14180:14252   */\n      tag_411\n      jump\t// in\n    tag_602:\n        /* \"#utility.yul\":13927:14259   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14265:14445   */\n    tag_331:\n        /* \"#utility.yul\":14313:14390   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":14310:14311   */\n      0x00\n        /* \"#utility.yul\":14303:14391   */\n      mstore\n        /* \"#utility.yul\":14410:14414   */\n      0x12\n        /* \"#utility.yul\":14407:14408   */\n      0x04\n        /* \"#utility.yul\":14400:14415   */\n      mstore\n        /* \"#utility.yul\":14434:14438   */\n      0x24\n        /* \"#utility.yul\":14431:14432   */\n      0x00\n        /* \"#utility.yul\":14424:14439   */\n      revert\n        /* \"#utility.yul\":14451:14893   */\n    tag_353:\n        /* \"#utility.yul\":14600:14604   */\n      0x00\n        /* \"#utility.yul\":14638:14640   */\n      0x60\n        /* \"#utility.yul\":14627:14636   */\n      dup3\n        /* \"#utility.yul\":14623:14641   */\n      add\n        /* \"#utility.yul\":14615:14641   */\n      swap1\n      pop\n        /* \"#utility.yul\":14651:14722   */\n      tag_605\n        /* \"#utility.yul\":14719:14720   */\n      0x00\n        /* \"#utility.yul\":14708:14717   */\n      dup4\n        /* \"#utility.yul\":14704:14721   */\n      add\n        /* \"#utility.yul\":14695:14701   */\n      dup7\n        /* \"#utility.yul\":14651:14722   */\n      tag_430\n      jump\t// in\n    tag_605:\n        /* \"#utility.yul\":14732:14804   */\n      tag_606\n        /* \"#utility.yul\":14800:14802   */\n      0x20\n        /* \"#utility.yul\":14789:14798   */\n      dup4\n        /* \"#utility.yul\":14785:14803   */\n      add\n        /* \"#utility.yul\":14776:14782   */\n      dup6\n        /* \"#utility.yul\":14732:14804   */\n      tag_430\n      jump\t// in\n    tag_606:\n        /* \"#utility.yul\":14814:14886   */\n      tag_607\n        /* \"#utility.yul\":14882:14884   */\n      0x40\n        /* \"#utility.yul\":14871:14880   */\n      dup4\n        /* \"#utility.yul\":14867:14885   */\n      add\n        /* \"#utility.yul\":14858:14864   */\n      dup5\n        /* \"#utility.yul\":14814:14886   */\n      tag_411\n      jump\t// in\n    tag_607:\n        /* \"#utility.yul\":14451:14893   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14899:15231   */\n    tag_366:\n        /* \"#utility.yul\":15020:15024   */\n      0x00\n        /* \"#utility.yul\":15058:15060   */\n      0x40\n        /* \"#utility.yul\":15047:15056   */\n      dup3\n        /* \"#utility.yul\":15043:15061   */\n      add\n        /* \"#utility.yul\":15035:15061   */\n      swap1\n      pop\n        /* \"#utility.yul\":15071:15142   */\n      tag_609\n        /* \"#utility.yul\":15139:15140   */\n      0x00\n        /* \"#utility.yul\":15128:15137   */\n      dup4\n        /* \"#utility.yul\":15124:15141   */\n      add\n        /* \"#utility.yul\":15115:15121   */\n      dup6\n        /* \"#utility.yul\":15071:15142   */\n      tag_430\n      jump\t// in\n    tag_609:\n        /* \"#utility.yul\":15152:15224   */\n      tag_610\n        /* \"#utility.yul\":15220:15222   */\n      0x20\n        /* \"#utility.yul\":15209:15218   */\n      dup4\n        /* \"#utility.yul\":15205:15223   */\n      add\n        /* \"#utility.yul\":15196:15202   */\n      dup5\n        /* \"#utility.yul\":15152:15224   */\n      tag_411\n      jump\t// in\n    tag_610:\n        /* \"#utility.yul\":14899:15231   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15237:15417   */\n    tag_375:\n        /* \"#utility.yul\":15285:15362   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":15282:15283   */\n      0x00\n        /* \"#utility.yul\":15275:15363   */\n      mstore\n        /* \"#utility.yul\":15382:15386   */\n      0x21\n        /* \"#utility.yul\":15379:15380   */\n      0x04\n        /* \"#utility.yul\":15372:15387   */\n      mstore\n        /* \"#utility.yul\":15406:15410   */\n      0x24\n        /* \"#utility.yul\":15403:15404   */\n      0x00\n        /* \"#utility.yul\":15396:15411   */\n      revert\n        /* \"#utility.yul\":15423:15593   */\n    tag_377:\n        /* \"#utility.yul\":15453:15454   */\n      0x00\n        /* \"#utility.yul\":15470:15488   */\n      tag_613\n        /* \"#utility.yul\":15486:15487   */\n      dup3\n        /* \"#utility.yul\":15470:15488   */\n      tag_428\n      jump\t// in\n    tag_613:\n        /* \"#utility.yul\":15465:15488   */\n      swap2\n      pop\n        /* \"#utility.yul\":15502:15520   */\n      tag_614\n        /* \"#utility.yul\":15518:15519   */\n      dup4\n        /* \"#utility.yul\":15502:15520   */\n      tag_428\n      jump\t// in\n    tag_614:\n        /* \"#utility.yul\":15497:15520   */\n      swap3\n      pop\n        /* \"#utility.yul\":15539:15540   */\n      dup3\n        /* \"#utility.yul\":15529:15564   */\n      tag_615\n      jumpi\n        /* \"#utility.yul\":15544:15562   */\n      tag_616\n      tag_331\n      jump\t// in\n    tag_616:\n        /* \"#utility.yul\":15529:15564   */\n    tag_615:\n        /* \"#utility.yul\":15585:15586   */\n      dup3\n        /* \"#utility.yul\":15582:15583   */\n      dup3\n        /* \"#utility.yul\":15578:15587   */\n      mod\n        /* \"#utility.yul\":15573:15587   */\n      swap1\n      pop\n        /* \"#utility.yul\":15423:15593   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15599:15715   */\n    tag_441:\n        /* \"#utility.yul\":15669:15690   */\n      tag_618\n        /* \"#utility.yul\":15684:15689   */\n      dup2\n        /* \"#utility.yul\":15669:15690   */\n      tag_426\n      jump\t// in\n    tag_618:\n        /* \"#utility.yul\":15662:15667   */\n      dup2\n        /* \"#utility.yul\":15659:15691   */\n      eq\n        /* \"#utility.yul\":15649:15709   */\n      tag_619\n      jumpi\n        /* \"#utility.yul\":15705:15706   */\n      0x00\n        /* \"#utility.yul\":15702:15703   */\n      dup1\n        /* \"#utility.yul\":15695:15707   */\n      revert\n        /* \"#utility.yul\":15649:15709   */\n    tag_619:\n        /* \"#utility.yul\":15599:15715   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15721:15858   */\n    tag_442:\n        /* \"#utility.yul\":15775:15780   */\n      0x00\n        /* \"#utility.yul\":15806:15812   */\n      dup2\n        /* \"#utility.yul\":15800:15813   */\n      mload\n        /* \"#utility.yul\":15791:15813   */\n      swap1\n      pop\n        /* \"#utility.yul\":15822:15852   */\n      tag_621\n        /* \"#utility.yul\":15846:15851   */\n      dup2\n        /* \"#utility.yul\":15822:15852   */\n      tag_441\n      jump\t// in\n    tag_621:\n        /* \"#utility.yul\":15721:15858   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15864:16209   */\n    tag_383:\n        /* \"#utility.yul\":15931:15937   */\n      0x00\n        /* \"#utility.yul\":15980:15982   */\n      0x20\n        /* \"#utility.yul\":15968:15977   */\n      dup3\n        /* \"#utility.yul\":15959:15966   */\n      dup5\n        /* \"#utility.yul\":15955:15978   */\n      sub\n        /* \"#utility.yul\":15951:15983   */\n      slt\n        /* \"#utility.yul\":15948:16067   */\n      iszero\n      tag_623\n      jumpi\n        /* \"#utility.yul\":15986:16065   */\n      tag_624\n      tag_418\n      jump\t// in\n    tag_624:\n        /* \"#utility.yul\":15948:16067   */\n    tag_623:\n        /* \"#utility.yul\":16106:16107   */\n      0x00\n        /* \"#utility.yul\":16131:16192   */\n      tag_625\n        /* \"#utility.yul\":16184:16191   */\n      dup5\n        /* \"#utility.yul\":16175:16181   */\n      dup3\n        /* \"#utility.yul\":16164:16173   */\n      dup6\n        /* \"#utility.yul\":16160:16182   */\n      add\n        /* \"#utility.yul\":16131:16192   */\n      tag_442\n      jump\t// in\n    tag_625:\n        /* \"#utility.yul\":16121:16192   */\n      swap2\n      pop\n        /* \"#utility.yul\":16077:16202   */\n      pop\n        /* \"#utility.yul\":15864:16209   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16215:16313   */\n    tag_443:\n        /* \"#utility.yul\":16266:16272   */\n      0x00\n        /* \"#utility.yul\":16300:16305   */\n      dup2\n        /* \"#utility.yul\":16294:16306   */\n      mload\n        /* \"#utility.yul\":16284:16306   */\n      swap1\n      pop\n        /* \"#utility.yul\":16215:16313   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16319:16466   */\n    tag_444:\n        /* \"#utility.yul\":16420:16431   */\n      0x00\n        /* \"#utility.yul\":16457:16460   */\n      dup2\n        /* \"#utility.yul\":16442:16460   */\n      swap1\n      pop\n        /* \"#utility.yul\":16319:16466   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16472:16858   */\n    tag_445:\n        /* \"#utility.yul\":16576:16579   */\n      0x00\n        /* \"#utility.yul\":16604:16642   */\n      tag_629\n        /* \"#utility.yul\":16636:16641   */\n      dup3\n        /* \"#utility.yul\":16604:16642   */\n      tag_443\n      jump\t// in\n    tag_629:\n        /* \"#utility.yul\":16658:16746   */\n      tag_630\n        /* \"#utility.yul\":16739:16745   */\n      dup2\n        /* \"#utility.yul\":16734:16737   */\n      dup6\n        /* \"#utility.yul\":16658:16746   */\n      tag_444\n      jump\t// in\n    tag_630:\n        /* \"#utility.yul\":16651:16746   */\n      swap4\n      pop\n        /* \"#utility.yul\":16755:16820   */\n      tag_631\n        /* \"#utility.yul\":16813:16819   */\n      dup2\n        /* \"#utility.yul\":16808:16811   */\n      dup6\n        /* \"#utility.yul\":16801:16805   */\n      0x20\n        /* \"#utility.yul\":16794:16799   */\n      dup7\n        /* \"#utility.yul\":16790:16806   */\n      add\n        /* \"#utility.yul\":16755:16820   */\n      tag_414\n      jump\t// in\n    tag_631:\n        /* \"#utility.yul\":16845:16851   */\n      dup1\n        /* \"#utility.yul\":16840:16843   */\n      dup5\n        /* \"#utility.yul\":16836:16852   */\n      add\n        /* \"#utility.yul\":16829:16852   */\n      swap2\n      pop\n        /* \"#utility.yul\":16580:16858   */\n      pop\n        /* \"#utility.yul\":16472:16858   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16864:17135   */\n    tag_393:\n        /* \"#utility.yul\":16994:16997   */\n      0x00\n        /* \"#utility.yul\":17016:17109   */\n      tag_633\n        /* \"#utility.yul\":17105:17108   */\n      dup3\n        /* \"#utility.yul\":17096:17102   */\n      dup5\n        /* \"#utility.yul\":17016:17109   */\n      tag_445\n      jump\t// in\n    tag_633:\n        /* \"#utility.yul\":17009:17109   */\n      swap2\n      pop\n        /* \"#utility.yul\":17126:17129   */\n      dup2\n        /* \"#utility.yul\":17119:17129   */\n      swap1\n      pop\n        /* \"#utility.yul\":16864:17135   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220d59a5cd3265cb00800220248f085c73f2003b7373affba19a4b309537e087b0d64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_3312": {
									"entryPoint": null,
									"id": 3312,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_358": {
									"entryPoint": null,
									"id": 358,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_987": {
									"entryPoint": null,
									"id": 987,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_tryGetAssetDecimals_1054": {
									"entryPoint": 301,
									"id": 1054,
									"parameterSlots": 1,
									"returnSlots": 2
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 640,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 1606,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 660,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 1626,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 1514,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 1562,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_dataslot_t_string_storage": {
									"entryPoint": 851,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 1480,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 703,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 1490,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_t_string_storage": {
									"entryPoint": 1136,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"cleanup_t_address": {
									"entryPoint": 601,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 570,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 977,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clear_storage_range_t_bytes1": {
									"entryPoint": 1102,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"convert_t_uint256_to_t_uint256": {
									"entryPoint": 995,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 1273,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 1500,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"divide_by_32_ceil": {
									"entryPoint": 869,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 803,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": 1246,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 986,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mask_bytes_dynamic": {
									"entryPoint": 1218,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x22": {
									"entryPoint": 758,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 713,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"prepare_store_t_uint256": {
									"entryPoint": 1028,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 566,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"shift_left_dynamic": {
									"entryPoint": 884,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"shift_right_unsigned_dynamic": {
									"entryPoint": 1206,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"storage_set_to_zero_t_uint256": {
									"entryPoint": 1078,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"update_byte_slice_dynamic32": {
									"entryPoint": 896,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"update_storage_value_t_uint256_to_t_uint256": {
									"entryPoint": 1037,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 618,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 1584,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"zero_value_for_split_t_uint256": {
									"entryPoint": 1074,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:8131:12",
										"nodeType": "YulBlock",
										"src": "0:8131:12",
										"statements": [
											{
												"body": {
													"nativeSrc": "47:35:12",
													"nodeType": "YulBlock",
													"src": "47:35:12",
													"statements": [
														{
															"nativeSrc": "57:19:12",
															"nodeType": "YulAssignment",
															"src": "57:19:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "73:2:12",
																		"nodeType": "YulLiteral",
																		"src": "73:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "67:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:12"
																},
																"nativeSrc": "67:9:12",
																"nodeType": "YulFunctionCall",
																"src": "67:9:12"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "57:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:12"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "7:75:12",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "40:6:12",
														"nodeType": "YulTypedName",
														"src": "40:6:12",
														"type": ""
													}
												],
												"src": "7:75:12"
											},
											{
												"body": {
													"nativeSrc": "177:28:12",
													"nodeType": "YulBlock",
													"src": "177:28:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "194:1:12",
																		"nodeType": "YulLiteral",
																		"src": "194:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "197:1:12",
																		"nodeType": "YulLiteral",
																		"src": "197:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "187:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:12"
																},
																"nativeSrc": "187:12:12",
																"nodeType": "YulFunctionCall",
																"src": "187:12:12"
															},
															"nativeSrc": "187:12:12",
															"nodeType": "YulExpressionStatement",
															"src": "187:12:12"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "88:117:12",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:12"
											},
											{
												"body": {
													"nativeSrc": "300:28:12",
													"nodeType": "YulBlock",
													"src": "300:28:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "317:1:12",
																		"nodeType": "YulLiteral",
																		"src": "317:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "320:1:12",
																		"nodeType": "YulLiteral",
																		"src": "320:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "310:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:12"
																},
																"nativeSrc": "310:12:12",
																"nodeType": "YulFunctionCall",
																"src": "310:12:12"
															},
															"nativeSrc": "310:12:12",
															"nodeType": "YulExpressionStatement",
															"src": "310:12:12"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "211:117:12",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:12"
											},
											{
												"body": {
													"nativeSrc": "379:81:12",
													"nodeType": "YulBlock",
													"src": "379:81:12",
													"statements": [
														{
															"nativeSrc": "389:65:12",
															"nodeType": "YulAssignment",
															"src": "389:65:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "404:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "411:42:12",
																		"nodeType": "YulLiteral",
																		"src": "411:42:12",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "400:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:12"
																},
																"nativeSrc": "400:54:12",
																"nodeType": "YulFunctionCall",
																"src": "400:54:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "389:7:12",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "334:126:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "361:5:12",
														"nodeType": "YulTypedName",
														"src": "361:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "371:7:12",
														"nodeType": "YulTypedName",
														"src": "371:7:12",
														"type": ""
													}
												],
												"src": "334:126:12"
											},
											{
												"body": {
													"nativeSrc": "511:51:12",
													"nodeType": "YulBlock",
													"src": "511:51:12",
													"statements": [
														{
															"nativeSrc": "521:35:12",
															"nodeType": "YulAssignment",
															"src": "521:35:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "550:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "532:17:12",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:12"
																},
																"nativeSrc": "532:24:12",
																"nodeType": "YulFunctionCall",
																"src": "532:24:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "521:7:12",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "466:96:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "493:5:12",
														"nodeType": "YulTypedName",
														"src": "493:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "503:7:12",
														"nodeType": "YulTypedName",
														"src": "503:7:12",
														"type": ""
													}
												],
												"src": "466:96:12"
											},
											{
												"body": {
													"nativeSrc": "611:79:12",
													"nodeType": "YulBlock",
													"src": "611:79:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "668:16:12",
																"nodeType": "YulBlock",
																"src": "668:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "677:1:12",
																					"nodeType": "YulLiteral",
																					"src": "677:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "680:1:12",
																					"nodeType": "YulLiteral",
																					"src": "680:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "670:6:12",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:12"
																			},
																			"nativeSrc": "670:12:12",
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:12"
																		},
																		"nativeSrc": "670:12:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "634:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "659:5:12",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "641:17:12",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:12"
																				},
																				"nativeSrc": "641:24:12",
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "631:2:12",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:12"
																		},
																		"nativeSrc": "631:35:12",
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "624:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:12"
																},
																"nativeSrc": "624:43:12",
																"nodeType": "YulFunctionCall",
																"src": "624:43:12"
															},
															"nativeSrc": "621:63:12",
															"nodeType": "YulIf",
															"src": "621:63:12"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "568:122:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "604:5:12",
														"nodeType": "YulTypedName",
														"src": "604:5:12",
														"type": ""
													}
												],
												"src": "568:122:12"
											},
											{
												"body": {
													"nativeSrc": "759:80:12",
													"nodeType": "YulBlock",
													"src": "759:80:12",
													"statements": [
														{
															"nativeSrc": "769:22:12",
															"nodeType": "YulAssignment",
															"src": "769:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "784:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "784:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "778:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "778:5:12"
																},
																"nativeSrc": "778:13:12",
																"nodeType": "YulFunctionCall",
																"src": "778:13:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "769:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "769:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "827:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "827:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "800:26:12",
																	"nodeType": "YulIdentifier",
																	"src": "800:26:12"
																},
																"nativeSrc": "800:33:12",
																"nodeType": "YulFunctionCall",
																"src": "800:33:12"
															},
															"nativeSrc": "800:33:12",
															"nodeType": "YulExpressionStatement",
															"src": "800:33:12"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nativeSrc": "696:143:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "737:6:12",
														"nodeType": "YulTypedName",
														"src": "737:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "745:3:12",
														"nodeType": "YulTypedName",
														"src": "745:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "753:5:12",
														"nodeType": "YulTypedName",
														"src": "753:5:12",
														"type": ""
													}
												],
												"src": "696:143:12"
											},
											{
												"body": {
													"nativeSrc": "922:274:12",
													"nodeType": "YulBlock",
													"src": "922:274:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "968:83:12",
																"nodeType": "YulBlock",
																"src": "968:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "970:77:12",
																				"nodeType": "YulIdentifier",
																				"src": "970:77:12"
																			},
																			"nativeSrc": "970:79:12",
																			"nodeType": "YulFunctionCall",
																			"src": "970:79:12"
																		},
																		"nativeSrc": "970:79:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "970:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "943:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "943:7:12"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "952:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "952:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "939:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "939:3:12"
																		},
																		"nativeSrc": "939:23:12",
																		"nodeType": "YulFunctionCall",
																		"src": "939:23:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "964:2:12",
																		"nodeType": "YulLiteral",
																		"src": "964:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "935:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "935:3:12"
																},
																"nativeSrc": "935:32:12",
																"nodeType": "YulFunctionCall",
																"src": "935:32:12"
															},
															"nativeSrc": "932:119:12",
															"nodeType": "YulIf",
															"src": "932:119:12"
														},
														{
															"nativeSrc": "1061:128:12",
															"nodeType": "YulBlock",
															"src": "1061:128:12",
															"statements": [
																{
																	"nativeSrc": "1076:15:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "1076:15:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1090:1:12",
																		"nodeType": "YulLiteral",
																		"src": "1090:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "1080:6:12",
																			"nodeType": "YulTypedName",
																			"src": "1080:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "1105:74:12",
																	"nodeType": "YulAssignment",
																	"src": "1105:74:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "1151:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "1151:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "1162:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "1162:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "1147:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "1147:3:12"
																				},
																				"nativeSrc": "1147:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "1147:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1171:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "1171:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nativeSrc": "1115:31:12",
																			"nodeType": "YulIdentifier",
																			"src": "1115:31:12"
																		},
																		"nativeSrc": "1115:64:12",
																		"nodeType": "YulFunctionCall",
																		"src": "1115:64:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "1105:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "1105:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nativeSrc": "845:351:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "892:9:12",
														"nodeType": "YulTypedName",
														"src": "892:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "903:7:12",
														"nodeType": "YulTypedName",
														"src": "903:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "915:6:12",
														"nodeType": "YulTypedName",
														"src": "915:6:12",
														"type": ""
													}
												],
												"src": "845:351:12"
											},
											{
												"body": {
													"nativeSrc": "1261:40:12",
													"nodeType": "YulBlock",
													"src": "1261:40:12",
													"statements": [
														{
															"nativeSrc": "1272:22:12",
															"nodeType": "YulAssignment",
															"src": "1272:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1288:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "1288:5:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1282:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "1282:5:12"
																},
																"nativeSrc": "1282:12:12",
																"nodeType": "YulFunctionCall",
																"src": "1282:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "1272:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "1272:6:12"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "1202:99:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1244:5:12",
														"nodeType": "YulTypedName",
														"src": "1244:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "1254:6:12",
														"nodeType": "YulTypedName",
														"src": "1254:6:12",
														"type": ""
													}
												],
												"src": "1202:99:12"
											},
											{
												"body": {
													"nativeSrc": "1335:152:12",
													"nodeType": "YulBlock",
													"src": "1335:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1352:1:12",
																		"nodeType": "YulLiteral",
																		"src": "1352:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1355:77:12",
																		"nodeType": "YulLiteral",
																		"src": "1355:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1345:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "1345:6:12"
																},
																"nativeSrc": "1345:88:12",
																"nodeType": "YulFunctionCall",
																"src": "1345:88:12"
															},
															"nativeSrc": "1345:88:12",
															"nodeType": "YulExpressionStatement",
															"src": "1345:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1449:1:12",
																		"nodeType": "YulLiteral",
																		"src": "1449:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1452:4:12",
																		"nodeType": "YulLiteral",
																		"src": "1452:4:12",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1442:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "1442:6:12"
																},
																"nativeSrc": "1442:15:12",
																"nodeType": "YulFunctionCall",
																"src": "1442:15:12"
															},
															"nativeSrc": "1442:15:12",
															"nodeType": "YulExpressionStatement",
															"src": "1442:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1473:1:12",
																		"nodeType": "YulLiteral",
																		"src": "1473:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1476:4:12",
																		"nodeType": "YulLiteral",
																		"src": "1476:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1466:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "1466:6:12"
																},
																"nativeSrc": "1466:15:12",
																"nodeType": "YulFunctionCall",
																"src": "1466:15:12"
															},
															"nativeSrc": "1466:15:12",
															"nodeType": "YulExpressionStatement",
															"src": "1466:15:12"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "1307:180:12",
												"nodeType": "YulFunctionDefinition",
												"src": "1307:180:12"
											},
											{
												"body": {
													"nativeSrc": "1521:152:12",
													"nodeType": "YulBlock",
													"src": "1521:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1538:1:12",
																		"nodeType": "YulLiteral",
																		"src": "1538:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1541:77:12",
																		"nodeType": "YulLiteral",
																		"src": "1541:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1531:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "1531:6:12"
																},
																"nativeSrc": "1531:88:12",
																"nodeType": "YulFunctionCall",
																"src": "1531:88:12"
															},
															"nativeSrc": "1531:88:12",
															"nodeType": "YulExpressionStatement",
															"src": "1531:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1635:1:12",
																		"nodeType": "YulLiteral",
																		"src": "1635:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1638:4:12",
																		"nodeType": "YulLiteral",
																		"src": "1638:4:12",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1628:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "1628:6:12"
																},
																"nativeSrc": "1628:15:12",
																"nodeType": "YulFunctionCall",
																"src": "1628:15:12"
															},
															"nativeSrc": "1628:15:12",
															"nodeType": "YulExpressionStatement",
															"src": "1628:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1659:1:12",
																		"nodeType": "YulLiteral",
																		"src": "1659:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1662:4:12",
																		"nodeType": "YulLiteral",
																		"src": "1662:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1652:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "1652:6:12"
																},
																"nativeSrc": "1652:15:12",
																"nodeType": "YulFunctionCall",
																"src": "1652:15:12"
															},
															"nativeSrc": "1652:15:12",
															"nodeType": "YulExpressionStatement",
															"src": "1652:15:12"
														}
													]
												},
												"name": "panic_error_0x22",
												"nativeSrc": "1493:180:12",
												"nodeType": "YulFunctionDefinition",
												"src": "1493:180:12"
											},
											{
												"body": {
													"nativeSrc": "1730:269:12",
													"nodeType": "YulBlock",
													"src": "1730:269:12",
													"statements": [
														{
															"nativeSrc": "1740:22:12",
															"nodeType": "YulAssignment",
															"src": "1740:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "1754:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "1754:4:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1760:1:12",
																		"nodeType": "YulLiteral",
																		"src": "1760:1:12",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "1750:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "1750:3:12"
																},
																"nativeSrc": "1750:12:12",
																"nodeType": "YulFunctionCall",
																"src": "1750:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "1740:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "1740:6:12"
																}
															]
														},
														{
															"nativeSrc": "1771:38:12",
															"nodeType": "YulVariableDeclaration",
															"src": "1771:38:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "1801:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "1801:4:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1807:1:12",
																		"nodeType": "YulLiteral",
																		"src": "1807:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "1797:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "1797:3:12"
																},
																"nativeSrc": "1797:12:12",
																"nodeType": "YulFunctionCall",
																"src": "1797:12:12"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "1775:18:12",
																	"nodeType": "YulTypedName",
																	"src": "1775:18:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1848:51:12",
																"nodeType": "YulBlock",
																"src": "1848:51:12",
																"statements": [
																	{
																		"nativeSrc": "1862:27:12",
																		"nodeType": "YulAssignment",
																		"src": "1862:27:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "1876:6:12",
																					"nodeType": "YulIdentifier",
																					"src": "1876:6:12"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1884:4:12",
																					"nodeType": "YulLiteral",
																					"src": "1884:4:12",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "1872:3:12",
																				"nodeType": "YulIdentifier",
																				"src": "1872:3:12"
																			},
																			"nativeSrc": "1872:17:12",
																			"nodeType": "YulFunctionCall",
																			"src": "1872:17:12"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "1862:6:12",
																				"nodeType": "YulIdentifier",
																				"src": "1862:6:12"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "1828:18:12",
																		"nodeType": "YulIdentifier",
																		"src": "1828:18:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1821:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "1821:6:12"
																},
																"nativeSrc": "1821:26:12",
																"nodeType": "YulFunctionCall",
																"src": "1821:26:12"
															},
															"nativeSrc": "1818:81:12",
															"nodeType": "YulIf",
															"src": "1818:81:12"
														},
														{
															"body": {
																"nativeSrc": "1951:42:12",
																"nodeType": "YulBlock",
																"src": "1951:42:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nativeSrc": "1965:16:12",
																				"nodeType": "YulIdentifier",
																				"src": "1965:16:12"
																			},
																			"nativeSrc": "1965:18:12",
																			"nodeType": "YulFunctionCall",
																			"src": "1965:18:12"
																		},
																		"nativeSrc": "1965:18:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "1965:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "1915:18:12",
																		"nodeType": "YulIdentifier",
																		"src": "1915:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "1938:6:12",
																				"nodeType": "YulIdentifier",
																				"src": "1938:6:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1946:2:12",
																				"nodeType": "YulLiteral",
																				"src": "1946:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "1935:2:12",
																			"nodeType": "YulIdentifier",
																			"src": "1935:2:12"
																		},
																		"nativeSrc": "1935:14:12",
																		"nodeType": "YulFunctionCall",
																		"src": "1935:14:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "1912:2:12",
																	"nodeType": "YulIdentifier",
																	"src": "1912:2:12"
																},
																"nativeSrc": "1912:38:12",
																"nodeType": "YulFunctionCall",
																"src": "1912:38:12"
															},
															"nativeSrc": "1909:84:12",
															"nodeType": "YulIf",
															"src": "1909:84:12"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "1679:320:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "1714:4:12",
														"nodeType": "YulTypedName",
														"src": "1714:4:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "1723:6:12",
														"nodeType": "YulTypedName",
														"src": "1723:6:12",
														"type": ""
													}
												],
												"src": "1679:320:12"
											},
											{
												"body": {
													"nativeSrc": "2059:87:12",
													"nodeType": "YulBlock",
													"src": "2059:87:12",
													"statements": [
														{
															"nativeSrc": "2069:11:12",
															"nodeType": "YulAssignment",
															"src": "2069:11:12",
															"value": {
																"name": "ptr",
																"nativeSrc": "2077:3:12",
																"nodeType": "YulIdentifier",
																"src": "2077:3:12"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "2069:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "2069:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2097:1:12",
																		"nodeType": "YulLiteral",
																		"src": "2097:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "2100:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "2100:3:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2090:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "2090:6:12"
																},
																"nativeSrc": "2090:14:12",
																"nodeType": "YulFunctionCall",
																"src": "2090:14:12"
															},
															"nativeSrc": "2090:14:12",
															"nodeType": "YulExpressionStatement",
															"src": "2090:14:12"
														},
														{
															"nativeSrc": "2113:26:12",
															"nodeType": "YulAssignment",
															"src": "2113:26:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2131:1:12",
																		"nodeType": "YulLiteral",
																		"src": "2131:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2134:4:12",
																		"nodeType": "YulLiteral",
																		"src": "2134:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "2121:9:12",
																	"nodeType": "YulIdentifier",
																	"src": "2121:9:12"
																},
																"nativeSrc": "2121:18:12",
																"nodeType": "YulFunctionCall",
																"src": "2121:18:12"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "2113:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "2113:4:12"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_string_storage",
												"nativeSrc": "2005:141:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "2046:3:12",
														"nodeType": "YulTypedName",
														"src": "2046:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "2054:4:12",
														"nodeType": "YulTypedName",
														"src": "2054:4:12",
														"type": ""
													}
												],
												"src": "2005:141:12"
											},
											{
												"body": {
													"nativeSrc": "2196:49:12",
													"nodeType": "YulBlock",
													"src": "2196:49:12",
													"statements": [
														{
															"nativeSrc": "2206:33:12",
															"nodeType": "YulAssignment",
															"src": "2206:33:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2224:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "2224:5:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2231:2:12",
																				"nodeType": "YulLiteral",
																				"src": "2231:2:12",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2220:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "2220:3:12"
																		},
																		"nativeSrc": "2220:14:12",
																		"nodeType": "YulFunctionCall",
																		"src": "2220:14:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2236:2:12",
																		"nodeType": "YulLiteral",
																		"src": "2236:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "2216:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "2216:3:12"
																},
																"nativeSrc": "2216:23:12",
																"nodeType": "YulFunctionCall",
																"src": "2216:23:12"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "2206:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "2206:6:12"
																}
															]
														}
													]
												},
												"name": "divide_by_32_ceil",
												"nativeSrc": "2152:93:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2179:5:12",
														"nodeType": "YulTypedName",
														"src": "2179:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "2189:6:12",
														"nodeType": "YulTypedName",
														"src": "2189:6:12",
														"type": ""
													}
												],
												"src": "2152:93:12"
											},
											{
												"body": {
													"nativeSrc": "2304:54:12",
													"nodeType": "YulBlock",
													"src": "2304:54:12",
													"statements": [
														{
															"nativeSrc": "2314:37:12",
															"nodeType": "YulAssignment",
															"src": "2314:37:12",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nativeSrc": "2339:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "2339:4:12"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "2345:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "2345:5:12"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "2335:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "2335:3:12"
																},
																"nativeSrc": "2335:16:12",
																"nodeType": "YulFunctionCall",
																"src": "2335:16:12"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "2314:8:12",
																	"nodeType": "YulIdentifier",
																	"src": "2314:8:12"
																}
															]
														}
													]
												},
												"name": "shift_left_dynamic",
												"nativeSrc": "2251:107:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nativeSrc": "2279:4:12",
														"nodeType": "YulTypedName",
														"src": "2279:4:12",
														"type": ""
													},
													{
														"name": "value",
														"nativeSrc": "2285:5:12",
														"nodeType": "YulTypedName",
														"src": "2285:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "2295:8:12",
														"nodeType": "YulTypedName",
														"src": "2295:8:12",
														"type": ""
													}
												],
												"src": "2251:107:12"
											},
											{
												"body": {
													"nativeSrc": "2440:317:12",
													"nodeType": "YulBlock",
													"src": "2440:317:12",
													"statements": [
														{
															"nativeSrc": "2450:35:12",
															"nodeType": "YulVariableDeclaration",
															"src": "2450:35:12",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBytes",
																		"nativeSrc": "2471:10:12",
																		"nodeType": "YulIdentifier",
																		"src": "2471:10:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2483:1:12",
																		"nodeType": "YulLiteral",
																		"src": "2483:1:12",
																		"type": "",
																		"value": "8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "2467:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "2467:3:12"
																},
																"nativeSrc": "2467:18:12",
																"nodeType": "YulFunctionCall",
																"src": "2467:18:12"
															},
															"variables": [
																{
																	"name": "shiftBits",
																	"nativeSrc": "2454:9:12",
																	"nodeType": "YulTypedName",
																	"src": "2454:9:12",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2494:109:12",
															"nodeType": "YulVariableDeclaration",
															"src": "2494:109:12",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nativeSrc": "2525:9:12",
																		"nodeType": "YulIdentifier",
																		"src": "2525:9:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2536:66:12",
																		"nodeType": "YulLiteral",
																		"src": "2536:66:12",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nativeSrc": "2506:18:12",
																	"nodeType": "YulIdentifier",
																	"src": "2506:18:12"
																},
																"nativeSrc": "2506:97:12",
																"nodeType": "YulFunctionCall",
																"src": "2506:97:12"
															},
															"variables": [
																{
																	"name": "mask",
																	"nativeSrc": "2498:4:12",
																	"nodeType": "YulTypedName",
																	"src": "2498:4:12",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2612:51:12",
															"nodeType": "YulAssignment",
															"src": "2612:51:12",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nativeSrc": "2643:9:12",
																		"nodeType": "YulIdentifier",
																		"src": "2643:9:12"
																	},
																	{
																		"name": "toInsert",
																		"nativeSrc": "2654:8:12",
																		"nodeType": "YulIdentifier",
																		"src": "2654:8:12"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nativeSrc": "2624:18:12",
																	"nodeType": "YulIdentifier",
																	"src": "2624:18:12"
																},
																"nativeSrc": "2624:39:12",
																"nodeType": "YulFunctionCall",
																"src": "2624:39:12"
															},
															"variableNames": [
																{
																	"name": "toInsert",
																	"nativeSrc": "2612:8:12",
																	"nodeType": "YulIdentifier",
																	"src": "2612:8:12"
																}
															]
														},
														{
															"nativeSrc": "2672:30:12",
															"nodeType": "YulAssignment",
															"src": "2672:30:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2685:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "2685:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mask",
																				"nativeSrc": "2696:4:12",
																				"nodeType": "YulIdentifier",
																				"src": "2696:4:12"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "2692:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "2692:3:12"
																		},
																		"nativeSrc": "2692:9:12",
																		"nodeType": "YulFunctionCall",
																		"src": "2692:9:12"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "2681:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "2681:3:12"
																},
																"nativeSrc": "2681:21:12",
																"nodeType": "YulFunctionCall",
																"src": "2681:21:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2672:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "2672:5:12"
																}
															]
														},
														{
															"nativeSrc": "2711:40:12",
															"nodeType": "YulAssignment",
															"src": "2711:40:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2724:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "2724:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "toInsert",
																				"nativeSrc": "2735:8:12",
																				"nodeType": "YulIdentifier",
																				"src": "2735:8:12"
																			},
																			{
																				"name": "mask",
																				"nativeSrc": "2745:4:12",
																				"nodeType": "YulIdentifier",
																				"src": "2745:4:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2731:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "2731:3:12"
																		},
																		"nativeSrc": "2731:19:12",
																		"nodeType": "YulFunctionCall",
																		"src": "2731:19:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "2721:2:12",
																	"nodeType": "YulIdentifier",
																	"src": "2721:2:12"
																},
																"nativeSrc": "2721:30:12",
																"nodeType": "YulFunctionCall",
																"src": "2721:30:12"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "2711:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "2711:6:12"
																}
															]
														}
													]
												},
												"name": "update_byte_slice_dynamic32",
												"nativeSrc": "2364:393:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2401:5:12",
														"nodeType": "YulTypedName",
														"src": "2401:5:12",
														"type": ""
													},
													{
														"name": "shiftBytes",
														"nativeSrc": "2408:10:12",
														"nodeType": "YulTypedName",
														"src": "2408:10:12",
														"type": ""
													},
													{
														"name": "toInsert",
														"nativeSrc": "2420:8:12",
														"nodeType": "YulTypedName",
														"src": "2420:8:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "2433:6:12",
														"nodeType": "YulTypedName",
														"src": "2433:6:12",
														"type": ""
													}
												],
												"src": "2364:393:12"
											},
											{
												"body": {
													"nativeSrc": "2808:32:12",
													"nodeType": "YulBlock",
													"src": "2808:32:12",
													"statements": [
														{
															"nativeSrc": "2818:16:12",
															"nodeType": "YulAssignment",
															"src": "2818:16:12",
															"value": {
																"name": "value",
																"nativeSrc": "2829:5:12",
																"nodeType": "YulIdentifier",
																"src": "2829:5:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2818:7:12",
																	"nodeType": "YulIdentifier",
																	"src": "2818:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "2763:77:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2790:5:12",
														"nodeType": "YulTypedName",
														"src": "2790:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2800:7:12",
														"nodeType": "YulTypedName",
														"src": "2800:7:12",
														"type": ""
													}
												],
												"src": "2763:77:12"
											},
											{
												"body": {
													"nativeSrc": "2878:28:12",
													"nodeType": "YulBlock",
													"src": "2878:28:12",
													"statements": [
														{
															"nativeSrc": "2888:12:12",
															"nodeType": "YulAssignment",
															"src": "2888:12:12",
															"value": {
																"name": "value",
																"nativeSrc": "2895:5:12",
																"nodeType": "YulIdentifier",
																"src": "2895:5:12"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "2888:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "2888:3:12"
																}
															]
														}
													]
												},
												"name": "identity",
												"nativeSrc": "2846:60:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2864:5:12",
														"nodeType": "YulTypedName",
														"src": "2864:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "2874:3:12",
														"nodeType": "YulTypedName",
														"src": "2874:3:12",
														"type": ""
													}
												],
												"src": "2846:60:12"
											},
											{
												"body": {
													"nativeSrc": "2972:82:12",
													"nodeType": "YulBlock",
													"src": "2972:82:12",
													"statements": [
														{
															"nativeSrc": "2982:66:12",
															"nodeType": "YulAssignment",
															"src": "2982:66:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "3040:5:12",
																						"nodeType": "YulIdentifier",
																						"src": "3040:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "3022:17:12",
																					"nodeType": "YulIdentifier",
																					"src": "3022:17:12"
																				},
																				"nativeSrc": "3022:24:12",
																				"nodeType": "YulFunctionCall",
																				"src": "3022:24:12"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nativeSrc": "3013:8:12",
																			"nodeType": "YulIdentifier",
																			"src": "3013:8:12"
																		},
																		"nativeSrc": "3013:34:12",
																		"nodeType": "YulFunctionCall",
																		"src": "3013:34:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "2995:17:12",
																	"nodeType": "YulIdentifier",
																	"src": "2995:17:12"
																},
																"nativeSrc": "2995:53:12",
																"nodeType": "YulFunctionCall",
																"src": "2995:53:12"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "2982:9:12",
																	"nodeType": "YulIdentifier",
																	"src": "2982:9:12"
																}
															]
														}
													]
												},
												"name": "convert_t_uint256_to_t_uint256",
												"nativeSrc": "2912:142:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2952:5:12",
														"nodeType": "YulTypedName",
														"src": "2952:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "2962:9:12",
														"nodeType": "YulTypedName",
														"src": "2962:9:12",
														"type": ""
													}
												],
												"src": "2912:142:12"
											},
											{
												"body": {
													"nativeSrc": "3107:28:12",
													"nodeType": "YulBlock",
													"src": "3107:28:12",
													"statements": [
														{
															"nativeSrc": "3117:12:12",
															"nodeType": "YulAssignment",
															"src": "3117:12:12",
															"value": {
																"name": "value",
																"nativeSrc": "3124:5:12",
																"nodeType": "YulIdentifier",
																"src": "3124:5:12"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "3117:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "3117:3:12"
																}
															]
														}
													]
												},
												"name": "prepare_store_t_uint256",
												"nativeSrc": "3060:75:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3093:5:12",
														"nodeType": "YulTypedName",
														"src": "3093:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "3103:3:12",
														"nodeType": "YulTypedName",
														"src": "3103:3:12",
														"type": ""
													}
												],
												"src": "3060:75:12"
											},
											{
												"body": {
													"nativeSrc": "3217:193:12",
													"nodeType": "YulBlock",
													"src": "3217:193:12",
													"statements": [
														{
															"nativeSrc": "3227:63:12",
															"nodeType": "YulVariableDeclaration",
															"src": "3227:63:12",
															"value": {
																"arguments": [
																	{
																		"name": "value_0",
																		"nativeSrc": "3282:7:12",
																		"nodeType": "YulIdentifier",
																		"src": "3282:7:12"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint256_to_t_uint256",
																	"nativeSrc": "3251:30:12",
																	"nodeType": "YulIdentifier",
																	"src": "3251:30:12"
																},
																"nativeSrc": "3251:39:12",
																"nodeType": "YulFunctionCall",
																"src": "3251:39:12"
															},
															"variables": [
																{
																	"name": "convertedValue_0",
																	"nativeSrc": "3231:16:12",
																	"nodeType": "YulTypedName",
																	"src": "3231:16:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "3306:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "3306:4:12"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nativeSrc": "3346:4:12",
																						"nodeType": "YulIdentifier",
																						"src": "3346:4:12"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nativeSrc": "3340:5:12",
																					"nodeType": "YulIdentifier",
																					"src": "3340:5:12"
																				},
																				"nativeSrc": "3340:11:12",
																				"nodeType": "YulFunctionCall",
																				"src": "3340:11:12"
																			},
																			{
																				"name": "offset",
																				"nativeSrc": "3353:6:12",
																				"nodeType": "YulIdentifier",
																				"src": "3353:6:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "convertedValue_0",
																						"nativeSrc": "3385:16:12",
																						"nodeType": "YulIdentifier",
																						"src": "3385:16:12"
																					}
																				],
																				"functionName": {
																					"name": "prepare_store_t_uint256",
																					"nativeSrc": "3361:23:12",
																					"nodeType": "YulIdentifier",
																					"src": "3361:23:12"
																				},
																				"nativeSrc": "3361:41:12",
																				"nodeType": "YulFunctionCall",
																				"src": "3361:41:12"
																			}
																		],
																		"functionName": {
																			"name": "update_byte_slice_dynamic32",
																			"nativeSrc": "3312:27:12",
																			"nodeType": "YulIdentifier",
																			"src": "3312:27:12"
																		},
																		"nativeSrc": "3312:91:12",
																		"nodeType": "YulFunctionCall",
																		"src": "3312:91:12"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "3299:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "3299:6:12"
																},
																"nativeSrc": "3299:105:12",
																"nodeType": "YulFunctionCall",
																"src": "3299:105:12"
															},
															"nativeSrc": "3299:105:12",
															"nodeType": "YulExpressionStatement",
															"src": "3299:105:12"
														}
													]
												},
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nativeSrc": "3141:269:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "3194:4:12",
														"nodeType": "YulTypedName",
														"src": "3194:4:12",
														"type": ""
													},
													{
														"name": "offset",
														"nativeSrc": "3200:6:12",
														"nodeType": "YulTypedName",
														"src": "3200:6:12",
														"type": ""
													},
													{
														"name": "value_0",
														"nativeSrc": "3208:7:12",
														"nodeType": "YulTypedName",
														"src": "3208:7:12",
														"type": ""
													}
												],
												"src": "3141:269:12"
											},
											{
												"body": {
													"nativeSrc": "3465:24:12",
													"nodeType": "YulBlock",
													"src": "3465:24:12",
													"statements": [
														{
															"nativeSrc": "3475:8:12",
															"nodeType": "YulAssignment",
															"src": "3475:8:12",
															"value": {
																"kind": "number",
																"nativeSrc": "3482:1:12",
																"nodeType": "YulLiteral",
																"src": "3482:1:12",
																"type": "",
																"value": "0"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "3475:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "3475:3:12"
																}
															]
														}
													]
												},
												"name": "zero_value_for_split_t_uint256",
												"nativeSrc": "3416:73:12",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "3461:3:12",
														"nodeType": "YulTypedName",
														"src": "3461:3:12",
														"type": ""
													}
												],
												"src": "3416:73:12"
											},
											{
												"body": {
													"nativeSrc": "3548:136:12",
													"nodeType": "YulBlock",
													"src": "3548:136:12",
													"statements": [
														{
															"nativeSrc": "3558:46:12",
															"nodeType": "YulVariableDeclaration",
															"src": "3558:46:12",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "zero_value_for_split_t_uint256",
																	"nativeSrc": "3572:30:12",
																	"nodeType": "YulIdentifier",
																	"src": "3572:30:12"
																},
																"nativeSrc": "3572:32:12",
																"nodeType": "YulFunctionCall",
																"src": "3572:32:12"
															},
															"variables": [
																{
																	"name": "zero_0",
																	"nativeSrc": "3562:6:12",
																	"nodeType": "YulTypedName",
																	"src": "3562:6:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "3657:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "3657:4:12"
																	},
																	{
																		"name": "offset",
																		"nativeSrc": "3663:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "3663:6:12"
																	},
																	{
																		"name": "zero_0",
																		"nativeSrc": "3671:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "3671:6:12"
																	}
																],
																"functionName": {
																	"name": "update_storage_value_t_uint256_to_t_uint256",
																	"nativeSrc": "3613:43:12",
																	"nodeType": "YulIdentifier",
																	"src": "3613:43:12"
																},
																"nativeSrc": "3613:65:12",
																"nodeType": "YulFunctionCall",
																"src": "3613:65:12"
															},
															"nativeSrc": "3613:65:12",
															"nodeType": "YulExpressionStatement",
															"src": "3613:65:12"
														}
													]
												},
												"name": "storage_set_to_zero_t_uint256",
												"nativeSrc": "3495:189:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "3534:4:12",
														"nodeType": "YulTypedName",
														"src": "3534:4:12",
														"type": ""
													},
													{
														"name": "offset",
														"nativeSrc": "3540:6:12",
														"nodeType": "YulTypedName",
														"src": "3540:6:12",
														"type": ""
													}
												],
												"src": "3495:189:12"
											},
											{
												"body": {
													"nativeSrc": "3740:136:12",
													"nodeType": "YulBlock",
													"src": "3740:136:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "3807:63:12",
																"nodeType": "YulBlock",
																"src": "3807:63:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "3851:5:12",
																					"nodeType": "YulIdentifier",
																					"src": "3851:5:12"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3858:1:12",
																					"nodeType": "YulLiteral",
																					"src": "3858:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "storage_set_to_zero_t_uint256",
																				"nativeSrc": "3821:29:12",
																				"nodeType": "YulIdentifier",
																				"src": "3821:29:12"
																			},
																			"nativeSrc": "3821:39:12",
																			"nodeType": "YulFunctionCall",
																			"src": "3821:39:12"
																		},
																		"nativeSrc": "3821:39:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "3821:39:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "start",
																		"nativeSrc": "3760:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "3760:5:12"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "3767:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "3767:3:12"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "3757:2:12",
																	"nodeType": "YulIdentifier",
																	"src": "3757:2:12"
																},
																"nativeSrc": "3757:14:12",
																"nodeType": "YulFunctionCall",
																"src": "3757:14:12"
															},
															"nativeSrc": "3750:120:12",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "3772:26:12",
																"nodeType": "YulBlock",
																"src": "3772:26:12",
																"statements": [
																	{
																		"nativeSrc": "3774:22:12",
																		"nodeType": "YulAssignment",
																		"src": "3774:22:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "3787:5:12",
																					"nodeType": "YulIdentifier",
																					"src": "3787:5:12"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3794:1:12",
																					"nodeType": "YulLiteral",
																					"src": "3794:1:12",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3783:3:12",
																				"nodeType": "YulIdentifier",
																				"src": "3783:3:12"
																			},
																			"nativeSrc": "3783:13:12",
																			"nodeType": "YulFunctionCall",
																			"src": "3783:13:12"
																		},
																		"variableNames": [
																			{
																				"name": "start",
																				"nativeSrc": "3774:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "3774:5:12"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "3754:2:12",
																"nodeType": "YulBlock",
																"src": "3754:2:12",
																"statements": []
															},
															"src": "3750:120:12"
														}
													]
												},
												"name": "clear_storage_range_t_bytes1",
												"nativeSrc": "3690:186:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "start",
														"nativeSrc": "3728:5:12",
														"nodeType": "YulTypedName",
														"src": "3728:5:12",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "3735:3:12",
														"nodeType": "YulTypedName",
														"src": "3735:3:12",
														"type": ""
													}
												],
												"src": "3690:186:12"
											},
											{
												"body": {
													"nativeSrc": "3961:464:12",
													"nodeType": "YulBlock",
													"src": "3961:464:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "3987:431:12",
																"nodeType": "YulBlock",
																"src": "3987:431:12",
																"statements": [
																	{
																		"nativeSrc": "4001:54:12",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4001:54:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "array",
																					"nativeSrc": "4049:5:12",
																					"nodeType": "YulIdentifier",
																					"src": "4049:5:12"
																				}
																			],
																			"functionName": {
																				"name": "array_dataslot_t_string_storage",
																				"nativeSrc": "4017:31:12",
																				"nodeType": "YulIdentifier",
																				"src": "4017:31:12"
																			},
																			"nativeSrc": "4017:38:12",
																			"nodeType": "YulFunctionCall",
																			"src": "4017:38:12"
																		},
																		"variables": [
																			{
																				"name": "dataArea",
																				"nativeSrc": "4005:8:12",
																				"nodeType": "YulTypedName",
																				"src": "4005:8:12",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "4068:63:12",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4068:63:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "dataArea",
																					"nativeSrc": "4091:8:12",
																					"nodeType": "YulIdentifier",
																					"src": "4091:8:12"
																				},
																				{
																					"arguments": [
																						{
																							"name": "startIndex",
																							"nativeSrc": "4119:10:12",
																							"nodeType": "YulIdentifier",
																							"src": "4119:10:12"
																						}
																					],
																					"functionName": {
																						"name": "divide_by_32_ceil",
																						"nativeSrc": "4101:17:12",
																						"nodeType": "YulIdentifier",
																						"src": "4101:17:12"
																					},
																					"nativeSrc": "4101:29:12",
																					"nodeType": "YulFunctionCall",
																					"src": "4101:29:12"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "4087:3:12",
																				"nodeType": "YulIdentifier",
																				"src": "4087:3:12"
																			},
																			"nativeSrc": "4087:44:12",
																			"nodeType": "YulFunctionCall",
																			"src": "4087:44:12"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nativeSrc": "4072:11:12",
																				"nodeType": "YulTypedName",
																				"src": "4072:11:12",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "4288:27:12",
																			"nodeType": "YulBlock",
																			"src": "4288:27:12",
																			"statements": [
																				{
																					"nativeSrc": "4290:23:12",
																					"nodeType": "YulAssignment",
																					"src": "4290:23:12",
																					"value": {
																						"name": "dataArea",
																						"nativeSrc": "4305:8:12",
																						"nodeType": "YulIdentifier",
																						"src": "4305:8:12"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nativeSrc": "4290:11:12",
																							"nodeType": "YulIdentifier",
																							"src": "4290:11:12"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nativeSrc": "4272:10:12",
																					"nodeType": "YulIdentifier",
																					"src": "4272:10:12"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4284:2:12",
																					"nodeType": "YulLiteral",
																					"src": "4284:2:12",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "4269:2:12",
																				"nodeType": "YulIdentifier",
																				"src": "4269:2:12"
																			},
																			"nativeSrc": "4269:18:12",
																			"nodeType": "YulFunctionCall",
																			"src": "4269:18:12"
																		},
																		"nativeSrc": "4266:49:12",
																		"nodeType": "YulIf",
																		"src": "4266:49:12"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "deleteStart",
																					"nativeSrc": "4357:11:12",
																					"nodeType": "YulIdentifier",
																					"src": "4357:11:12"
																				},
																				{
																					"arguments": [
																						{
																							"name": "dataArea",
																							"nativeSrc": "4374:8:12",
																							"nodeType": "YulIdentifier",
																							"src": "4374:8:12"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nativeSrc": "4402:3:12",
																									"nodeType": "YulIdentifier",
																									"src": "4402:3:12"
																								}
																							],
																							"functionName": {
																								"name": "divide_by_32_ceil",
																								"nativeSrc": "4384:17:12",
																								"nodeType": "YulIdentifier",
																								"src": "4384:17:12"
																							},
																							"nativeSrc": "4384:22:12",
																							"nodeType": "YulFunctionCall",
																							"src": "4384:22:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "4370:3:12",
																						"nodeType": "YulIdentifier",
																						"src": "4370:3:12"
																					},
																					"nativeSrc": "4370:37:12",
																					"nodeType": "YulFunctionCall",
																					"src": "4370:37:12"
																				}
																			],
																			"functionName": {
																				"name": "clear_storage_range_t_bytes1",
																				"nativeSrc": "4328:28:12",
																				"nodeType": "YulIdentifier",
																				"src": "4328:28:12"
																			},
																			"nativeSrc": "4328:80:12",
																			"nodeType": "YulFunctionCall",
																			"src": "4328:80:12"
																		},
																		"nativeSrc": "4328:80:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "4328:80:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nativeSrc": "3978:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "3978:3:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3983:2:12",
																		"nodeType": "YulLiteral",
																		"src": "3983:2:12",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3975:2:12",
																	"nodeType": "YulIdentifier",
																	"src": "3975:2:12"
																},
																"nativeSrc": "3975:11:12",
																"nodeType": "YulFunctionCall",
																"src": "3975:11:12"
															},
															"nativeSrc": "3972:446:12",
															"nodeType": "YulIf",
															"src": "3972:446:12"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nativeSrc": "3882:543:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "3937:5:12",
														"nodeType": "YulTypedName",
														"src": "3937:5:12",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "3944:3:12",
														"nodeType": "YulTypedName",
														"src": "3944:3:12",
														"type": ""
													},
													{
														"name": "startIndex",
														"nativeSrc": "3949:10:12",
														"nodeType": "YulTypedName",
														"src": "3949:10:12",
														"type": ""
													}
												],
												"src": "3882:543:12"
											},
											{
												"body": {
													"nativeSrc": "4494:54:12",
													"nodeType": "YulBlock",
													"src": "4494:54:12",
													"statements": [
														{
															"nativeSrc": "4504:37:12",
															"nodeType": "YulAssignment",
															"src": "4504:37:12",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nativeSrc": "4529:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "4529:4:12"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "4535:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "4535:5:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "4525:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "4525:3:12"
																},
																"nativeSrc": "4525:16:12",
																"nodeType": "YulFunctionCall",
																"src": "4525:16:12"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "4504:8:12",
																	"nodeType": "YulIdentifier",
																	"src": "4504:8:12"
																}
															]
														}
													]
												},
												"name": "shift_right_unsigned_dynamic",
												"nativeSrc": "4431:117:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nativeSrc": "4469:4:12",
														"nodeType": "YulTypedName",
														"src": "4469:4:12",
														"type": ""
													},
													{
														"name": "value",
														"nativeSrc": "4475:5:12",
														"nodeType": "YulTypedName",
														"src": "4475:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "4485:8:12",
														"nodeType": "YulTypedName",
														"src": "4485:8:12",
														"type": ""
													}
												],
												"src": "4431:117:12"
											},
											{
												"body": {
													"nativeSrc": "4605:118:12",
													"nodeType": "YulBlock",
													"src": "4605:118:12",
													"statements": [
														{
															"nativeSrc": "4615:68:12",
															"nodeType": "YulVariableDeclaration",
															"src": "4615:68:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4664:1:12",
																						"nodeType": "YulLiteral",
																						"src": "4664:1:12",
																						"type": "",
																						"value": "8"
																					},
																					{
																						"name": "bytes",
																						"nativeSrc": "4667:5:12",
																						"nodeType": "YulIdentifier",
																						"src": "4667:5:12"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nativeSrc": "4660:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "4660:3:12"
																				},
																				"nativeSrc": "4660:13:12",
																				"nodeType": "YulFunctionCall",
																				"src": "4660:13:12"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4679:1:12",
																						"nodeType": "YulLiteral",
																						"src": "4679:1:12",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4675:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "4675:3:12"
																				},
																				"nativeSrc": "4675:6:12",
																				"nodeType": "YulFunctionCall",
																				"src": "4675:6:12"
																			}
																		],
																		"functionName": {
																			"name": "shift_right_unsigned_dynamic",
																			"nativeSrc": "4631:28:12",
																			"nodeType": "YulIdentifier",
																			"src": "4631:28:12"
																		},
																		"nativeSrc": "4631:51:12",
																		"nodeType": "YulFunctionCall",
																		"src": "4631:51:12"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nativeSrc": "4627:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "4627:3:12"
																},
																"nativeSrc": "4627:56:12",
																"nodeType": "YulFunctionCall",
																"src": "4627:56:12"
															},
															"variables": [
																{
																	"name": "mask",
																	"nativeSrc": "4619:4:12",
																	"nodeType": "YulTypedName",
																	"src": "4619:4:12",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4692:25:12",
															"nodeType": "YulAssignment",
															"src": "4692:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "4706:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "4706:4:12"
																	},
																	{
																		"name": "mask",
																		"nativeSrc": "4712:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "4712:4:12"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4702:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "4702:3:12"
																},
																"nativeSrc": "4702:15:12",
																"nodeType": "YulFunctionCall",
																"src": "4702:15:12"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "4692:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "4692:6:12"
																}
															]
														}
													]
												},
												"name": "mask_bytes_dynamic",
												"nativeSrc": "4554:169:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "4582:4:12",
														"nodeType": "YulTypedName",
														"src": "4582:4:12",
														"type": ""
													},
													{
														"name": "bytes",
														"nativeSrc": "4588:5:12",
														"nodeType": "YulTypedName",
														"src": "4588:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "4598:6:12",
														"nodeType": "YulTypedName",
														"src": "4598:6:12",
														"type": ""
													}
												],
												"src": "4554:169:12"
											},
											{
												"body": {
													"nativeSrc": "4809:214:12",
													"nodeType": "YulBlock",
													"src": "4809:214:12",
													"statements": [
														{
															"nativeSrc": "4942:37:12",
															"nodeType": "YulAssignment",
															"src": "4942:37:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "4969:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "4969:4:12"
																	},
																	{
																		"name": "len",
																		"nativeSrc": "4975:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "4975:3:12"
																	}
																],
																"functionName": {
																	"name": "mask_bytes_dynamic",
																	"nativeSrc": "4950:18:12",
																	"nodeType": "YulIdentifier",
																	"src": "4950:18:12"
																},
																"nativeSrc": "4950:29:12",
																"nodeType": "YulFunctionCall",
																"src": "4950:29:12"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "4942:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "4942:4:12"
																}
															]
														},
														{
															"nativeSrc": "4988:29:12",
															"nodeType": "YulAssignment",
															"src": "4988:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "4999:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "4999:4:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "5009:1:12",
																				"nodeType": "YulLiteral",
																				"src": "5009:1:12",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "len",
																				"nativeSrc": "5012:3:12",
																				"nodeType": "YulIdentifier",
																				"src": "5012:3:12"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nativeSrc": "5005:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "5005:3:12"
																		},
																		"nativeSrc": "5005:11:12",
																		"nodeType": "YulFunctionCall",
																		"src": "5005:11:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "4996:2:12",
																	"nodeType": "YulIdentifier",
																	"src": "4996:2:12"
																},
																"nativeSrc": "4996:21:12",
																"nodeType": "YulFunctionCall",
																"src": "4996:21:12"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nativeSrc": "4988:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "4988:4:12"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nativeSrc": "4728:295:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "4790:4:12",
														"nodeType": "YulTypedName",
														"src": "4790:4:12",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "4796:3:12",
														"nodeType": "YulTypedName",
														"src": "4796:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nativeSrc": "4804:4:12",
														"nodeType": "YulTypedName",
														"src": "4804:4:12",
														"type": ""
													}
												],
												"src": "4728:295:12"
											},
											{
												"body": {
													"nativeSrc": "5120:1303:12",
													"nodeType": "YulBlock",
													"src": "5120:1303:12",
													"statements": [
														{
															"nativeSrc": "5131:51:12",
															"nodeType": "YulVariableDeclaration",
															"src": "5131:51:12",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "5178:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "5178:3:12"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "5145:32:12",
																	"nodeType": "YulIdentifier",
																	"src": "5145:32:12"
																},
																"nativeSrc": "5145:37:12",
																"nodeType": "YulFunctionCall",
																"src": "5145:37:12"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nativeSrc": "5135:6:12",
																	"nodeType": "YulTypedName",
																	"src": "5135:6:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5267:22:12",
																"nodeType": "YulBlock",
																"src": "5267:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "5269:16:12",
																				"nodeType": "YulIdentifier",
																				"src": "5269:16:12"
																			},
																			"nativeSrc": "5269:18:12",
																			"nodeType": "YulFunctionCall",
																			"src": "5269:18:12"
																		},
																		"nativeSrc": "5269:18:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "5269:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "5239:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "5239:6:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5247:18:12",
																		"nodeType": "YulLiteral",
																		"src": "5247:18:12",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "5236:2:12",
																	"nodeType": "YulIdentifier",
																	"src": "5236:2:12"
																},
																"nativeSrc": "5236:30:12",
																"nodeType": "YulFunctionCall",
																"src": "5236:30:12"
															},
															"nativeSrc": "5233:56:12",
															"nodeType": "YulIf",
															"src": "5233:56:12"
														},
														{
															"nativeSrc": "5299:52:12",
															"nodeType": "YulVariableDeclaration",
															"src": "5299:52:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "slot",
																				"nativeSrc": "5345:4:12",
																				"nodeType": "YulIdentifier",
																				"src": "5345:4:12"
																			}
																		],
																		"functionName": {
																			"name": "sload",
																			"nativeSrc": "5339:5:12",
																			"nodeType": "YulIdentifier",
																			"src": "5339:5:12"
																		},
																		"nativeSrc": "5339:11:12",
																		"nodeType": "YulFunctionCall",
																		"src": "5339:11:12"
																	}
																],
																"functionName": {
																	"name": "extract_byte_array_length",
																	"nativeSrc": "5313:25:12",
																	"nodeType": "YulIdentifier",
																	"src": "5313:25:12"
																},
																"nativeSrc": "5313:38:12",
																"nodeType": "YulFunctionCall",
																"src": "5313:38:12"
															},
															"variables": [
																{
																	"name": "oldLen",
																	"nativeSrc": "5303:6:12",
																	"nodeType": "YulTypedName",
																	"src": "5303:6:12",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "5444:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "5444:4:12"
																	},
																	{
																		"name": "oldLen",
																		"nativeSrc": "5450:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "5450:6:12"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "5458:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "5458:6:12"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_t_string_storage",
																	"nativeSrc": "5398:45:12",
																	"nodeType": "YulIdentifier",
																	"src": "5398:45:12"
																},
																"nativeSrc": "5398:67:12",
																"nodeType": "YulFunctionCall",
																"src": "5398:67:12"
															},
															"nativeSrc": "5398:67:12",
															"nodeType": "YulExpressionStatement",
															"src": "5398:67:12"
														},
														{
															"nativeSrc": "5475:18:12",
															"nodeType": "YulVariableDeclaration",
															"src": "5475:18:12",
															"value": {
																"kind": "number",
																"nativeSrc": "5492:1:12",
																"nodeType": "YulLiteral",
																"src": "5492:1:12",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "5479:9:12",
																	"nodeType": "YulTypedName",
																	"src": "5479:9:12",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "5503:17:12",
															"nodeType": "YulAssignment",
															"src": "5503:17:12",
															"value": {
																"kind": "number",
																"nativeSrc": "5516:4:12",
																"nodeType": "YulLiteral",
																"src": "5516:4:12",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "5503:9:12",
																	"nodeType": "YulIdentifier",
																	"src": "5503:9:12"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "5567:611:12",
																		"nodeType": "YulBlock",
																		"src": "5567:611:12",
																		"statements": [
																			{
																				"nativeSrc": "5581:37:12",
																				"nodeType": "YulVariableDeclaration",
																				"src": "5581:37:12",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nativeSrc": "5600:6:12",
																							"nodeType": "YulIdentifier",
																							"src": "5600:6:12"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "5612:4:12",
																									"nodeType": "YulLiteral",
																									"src": "5612:4:12",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "5608:3:12",
																								"nodeType": "YulIdentifier",
																								"src": "5608:3:12"
																							},
																							"nativeSrc": "5608:9:12",
																							"nodeType": "YulFunctionCall",
																							"src": "5608:9:12"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "5596:3:12",
																						"nodeType": "YulIdentifier",
																						"src": "5596:3:12"
																					},
																					"nativeSrc": "5596:22:12",
																					"nodeType": "YulFunctionCall",
																					"src": "5596:22:12"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nativeSrc": "5585:7:12",
																						"nodeType": "YulTypedName",
																						"src": "5585:7:12",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "5632:51:12",
																				"nodeType": "YulVariableDeclaration",
																				"src": "5632:51:12",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "5678:4:12",
																							"nodeType": "YulIdentifier",
																							"src": "5678:4:12"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_t_string_storage",
																						"nativeSrc": "5646:31:12",
																						"nodeType": "YulIdentifier",
																						"src": "5646:31:12"
																					},
																					"nativeSrc": "5646:37:12",
																					"nodeType": "YulFunctionCall",
																					"src": "5646:37:12"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nativeSrc": "5636:6:12",
																						"nodeType": "YulTypedName",
																						"src": "5636:6:12",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "5696:10:12",
																				"nodeType": "YulVariableDeclaration",
																				"src": "5696:10:12",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "5705:1:12",
																					"nodeType": "YulLiteral",
																					"src": "5705:1:12",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nativeSrc": "5700:1:12",
																						"nodeType": "YulTypedName",
																						"src": "5700:1:12",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "5764:163:12",
																					"nodeType": "YulBlock",
																					"src": "5764:163:12",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "5789:6:12",
																										"nodeType": "YulIdentifier",
																										"src": "5789:6:12"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nativeSrc": "5807:3:12",
																														"nodeType": "YulIdentifier",
																														"src": "5807:3:12"
																													},
																													{
																														"name": "srcOffset",
																														"nativeSrc": "5812:9:12",
																														"nodeType": "YulIdentifier",
																														"src": "5812:9:12"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nativeSrc": "5803:3:12",
																													"nodeType": "YulIdentifier",
																													"src": "5803:3:12"
																												},
																												"nativeSrc": "5803:19:12",
																												"nodeType": "YulFunctionCall",
																												"src": "5803:19:12"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nativeSrc": "5797:5:12",
																											"nodeType": "YulIdentifier",
																											"src": "5797:5:12"
																										},
																										"nativeSrc": "5797:26:12",
																										"nodeType": "YulFunctionCall",
																										"src": "5797:26:12"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "5782:6:12",
																									"nodeType": "YulIdentifier",
																									"src": "5782:6:12"
																								},
																								"nativeSrc": "5782:42:12",
																								"nodeType": "YulFunctionCall",
																								"src": "5782:42:12"
																							},
																							"nativeSrc": "5782:42:12",
																							"nodeType": "YulExpressionStatement",
																							"src": "5782:42:12"
																						},
																						{
																							"nativeSrc": "5841:24:12",
																							"nodeType": "YulAssignment",
																							"src": "5841:24:12",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "5855:6:12",
																										"nodeType": "YulIdentifier",
																										"src": "5855:6:12"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "5863:1:12",
																										"nodeType": "YulLiteral",
																										"src": "5863:1:12",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "5851:3:12",
																									"nodeType": "YulIdentifier",
																									"src": "5851:3:12"
																								},
																								"nativeSrc": "5851:14:12",
																								"nodeType": "YulFunctionCall",
																								"src": "5851:14:12"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nativeSrc": "5841:6:12",
																									"nodeType": "YulIdentifier",
																									"src": "5841:6:12"
																								}
																							]
																						},
																						{
																							"nativeSrc": "5882:31:12",
																							"nodeType": "YulAssignment",
																							"src": "5882:31:12",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nativeSrc": "5899:9:12",
																										"nodeType": "YulIdentifier",
																										"src": "5899:9:12"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "5910:2:12",
																										"nodeType": "YulLiteral",
																										"src": "5910:2:12",
																										"type": "",
																										"value": "32"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "5895:3:12",
																									"nodeType": "YulIdentifier",
																									"src": "5895:3:12"
																								},
																								"nativeSrc": "5895:18:12",
																								"nodeType": "YulFunctionCall",
																								"src": "5895:18:12"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nativeSrc": "5882:9:12",
																									"nodeType": "YulIdentifier",
																									"src": "5882:9:12"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nativeSrc": "5730:1:12",
																							"nodeType": "YulIdentifier",
																							"src": "5730:1:12"
																						},
																						{
																							"name": "loopEnd",
																							"nativeSrc": "5733:7:12",
																							"nodeType": "YulIdentifier",
																							"src": "5733:7:12"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "5727:2:12",
																						"nodeType": "YulIdentifier",
																						"src": "5727:2:12"
																					},
																					"nativeSrc": "5727:14:12",
																					"nodeType": "YulFunctionCall",
																					"src": "5727:14:12"
																				},
																				"nativeSrc": "5719:208:12",
																				"nodeType": "YulForLoop",
																				"post": {
																					"nativeSrc": "5742:21:12",
																					"nodeType": "YulBlock",
																					"src": "5742:21:12",
																					"statements": [
																						{
																							"nativeSrc": "5744:17:12",
																							"nodeType": "YulAssignment",
																							"src": "5744:17:12",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nativeSrc": "5753:1:12",
																										"nodeType": "YulIdentifier",
																										"src": "5753:1:12"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "5756:4:12",
																										"nodeType": "YulLiteral",
																										"src": "5756:4:12",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "5749:3:12",
																									"nodeType": "YulIdentifier",
																									"src": "5749:3:12"
																								},
																								"nativeSrc": "5749:12:12",
																								"nodeType": "YulFunctionCall",
																								"src": "5749:12:12"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nativeSrc": "5744:1:12",
																									"nodeType": "YulIdentifier",
																									"src": "5744:1:12"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nativeSrc": "5723:3:12",
																					"nodeType": "YulBlock",
																					"src": "5723:3:12",
																					"statements": []
																				},
																				"src": "5719:208:12"
																			},
																			{
																				"body": {
																					"nativeSrc": "5963:156:12",
																					"nodeType": "YulBlock",
																					"src": "5963:156:12",
																					"statements": [
																						{
																							"nativeSrc": "5981:43:12",
																							"nodeType": "YulVariableDeclaration",
																							"src": "5981:43:12",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "6008:3:12",
																												"nodeType": "YulIdentifier",
																												"src": "6008:3:12"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "6013:9:12",
																												"nodeType": "YulIdentifier",
																												"src": "6013:9:12"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "6004:3:12",
																											"nodeType": "YulIdentifier",
																											"src": "6004:3:12"
																										},
																										"nativeSrc": "6004:19:12",
																										"nodeType": "YulFunctionCall",
																										"src": "6004:19:12"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "5998:5:12",
																									"nodeType": "YulIdentifier",
																									"src": "5998:5:12"
																								},
																								"nativeSrc": "5998:26:12",
																								"nodeType": "YulFunctionCall",
																								"src": "5998:26:12"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nativeSrc": "5985:9:12",
																									"nodeType": "YulTypedName",
																									"src": "5985:9:12",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "6048:6:12",
																										"nodeType": "YulIdentifier",
																										"src": "6048:6:12"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nativeSrc": "6075:9:12",
																												"nodeType": "YulIdentifier",
																												"src": "6075:9:12"
																											},
																											{
																												"arguments": [
																													{
																														"name": "newLen",
																														"nativeSrc": "6090:6:12",
																														"nodeType": "YulIdentifier",
																														"src": "6090:6:12"
																													},
																													{
																														"kind": "number",
																														"nativeSrc": "6098:4:12",
																														"nodeType": "YulLiteral",
																														"src": "6098:4:12",
																														"type": "",
																														"value": "0x1f"
																													}
																												],
																												"functionName": {
																													"name": "and",
																													"nativeSrc": "6086:3:12",
																													"nodeType": "YulIdentifier",
																													"src": "6086:3:12"
																												},
																												"nativeSrc": "6086:17:12",
																												"nodeType": "YulFunctionCall",
																												"src": "6086:17:12"
																											}
																										],
																										"functionName": {
																											"name": "mask_bytes_dynamic",
																											"nativeSrc": "6056:18:12",
																											"nodeType": "YulIdentifier",
																											"src": "6056:18:12"
																										},
																										"nativeSrc": "6056:48:12",
																										"nodeType": "YulFunctionCall",
																										"src": "6056:48:12"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "6041:6:12",
																									"nodeType": "YulIdentifier",
																									"src": "6041:6:12"
																								},
																								"nativeSrc": "6041:64:12",
																								"nodeType": "YulFunctionCall",
																								"src": "6041:64:12"
																							},
																							"nativeSrc": "6041:64:12",
																							"nodeType": "YulExpressionStatement",
																							"src": "6041:64:12"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nativeSrc": "5946:7:12",
																							"nodeType": "YulIdentifier",
																							"src": "5946:7:12"
																						},
																						{
																							"name": "newLen",
																							"nativeSrc": "5955:6:12",
																							"nodeType": "YulIdentifier",
																							"src": "5955:6:12"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "5943:2:12",
																						"nodeType": "YulIdentifier",
																						"src": "5943:2:12"
																					},
																					"nativeSrc": "5943:19:12",
																					"nodeType": "YulFunctionCall",
																					"src": "5943:19:12"
																				},
																				"nativeSrc": "5940:179:12",
																				"nodeType": "YulIf",
																				"src": "5940:179:12"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "6139:4:12",
																							"nodeType": "YulIdentifier",
																							"src": "6139:4:12"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "newLen",
																											"nativeSrc": "6153:6:12",
																											"nodeType": "YulIdentifier",
																											"src": "6153:6:12"
																										},
																										{
																											"kind": "number",
																											"nativeSrc": "6161:1:12",
																											"nodeType": "YulLiteral",
																											"src": "6161:1:12",
																											"type": "",
																											"value": "2"
																										}
																									],
																									"functionName": {
																										"name": "mul",
																										"nativeSrc": "6149:3:12",
																										"nodeType": "YulIdentifier",
																										"src": "6149:3:12"
																									},
																									"nativeSrc": "6149:14:12",
																									"nodeType": "YulFunctionCall",
																									"src": "6149:14:12"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "6165:1:12",
																									"nodeType": "YulLiteral",
																									"src": "6165:1:12",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "6145:3:12",
																								"nodeType": "YulIdentifier",
																								"src": "6145:3:12"
																							},
																							"nativeSrc": "6145:22:12",
																							"nodeType": "YulFunctionCall",
																							"src": "6145:22:12"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "6132:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "6132:6:12"
																					},
																					"nativeSrc": "6132:36:12",
																					"nodeType": "YulFunctionCall",
																					"src": "6132:36:12"
																				},
																				"nativeSrc": "6132:36:12",
																				"nodeType": "YulExpressionStatement",
																				"src": "6132:36:12"
																			}
																		]
																	},
																	"nativeSrc": "5560:618:12",
																	"nodeType": "YulCase",
																	"src": "5560:618:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5565:1:12",
																		"nodeType": "YulLiteral",
																		"src": "5565:1:12",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "6195:222:12",
																		"nodeType": "YulBlock",
																		"src": "6195:222:12",
																		"statements": [
																			{
																				"nativeSrc": "6209:14:12",
																				"nodeType": "YulVariableDeclaration",
																				"src": "6209:14:12",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "6222:1:12",
																					"nodeType": "YulLiteral",
																					"src": "6222:1:12",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nativeSrc": "6213:5:12",
																						"nodeType": "YulTypedName",
																						"src": "6213:5:12",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "6246:67:12",
																					"nodeType": "YulBlock",
																					"src": "6246:67:12",
																					"statements": [
																						{
																							"nativeSrc": "6264:35:12",
																							"nodeType": "YulAssignment",
																							"src": "6264:35:12",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "6283:3:12",
																												"nodeType": "YulIdentifier",
																												"src": "6283:3:12"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "6288:9:12",
																												"nodeType": "YulIdentifier",
																												"src": "6288:9:12"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "6279:3:12",
																											"nodeType": "YulIdentifier",
																											"src": "6279:3:12"
																										},
																										"nativeSrc": "6279:19:12",
																										"nodeType": "YulFunctionCall",
																										"src": "6279:19:12"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "6273:5:12",
																									"nodeType": "YulIdentifier",
																									"src": "6273:5:12"
																								},
																								"nativeSrc": "6273:26:12",
																								"nodeType": "YulFunctionCall",
																								"src": "6273:26:12"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nativeSrc": "6264:5:12",
																									"nodeType": "YulIdentifier",
																									"src": "6264:5:12"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nativeSrc": "6239:6:12",
																					"nodeType": "YulIdentifier",
																					"src": "6239:6:12"
																				},
																				"nativeSrc": "6236:77:12",
																				"nodeType": "YulIf",
																				"src": "6236:77:12"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "6333:4:12",
																							"nodeType": "YulIdentifier",
																							"src": "6333:4:12"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nativeSrc": "6392:5:12",
																									"nodeType": "YulIdentifier",
																									"src": "6392:5:12"
																								},
																								{
																									"name": "newLen",
																									"nativeSrc": "6399:6:12",
																									"nodeType": "YulIdentifier",
																									"src": "6399:6:12"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nativeSrc": "6339:52:12",
																								"nodeType": "YulIdentifier",
																								"src": "6339:52:12"
																							},
																							"nativeSrc": "6339:67:12",
																							"nodeType": "YulFunctionCall",
																							"src": "6339:67:12"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "6326:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "6326:6:12"
																					},
																					"nativeSrc": "6326:81:12",
																					"nodeType": "YulFunctionCall",
																					"src": "6326:81:12"
																				},
																				"nativeSrc": "6326:81:12",
																				"nodeType": "YulExpressionStatement",
																				"src": "6326:81:12"
																			}
																		]
																	},
																	"nativeSrc": "6187:230:12",
																	"nodeType": "YulCase",
																	"src": "6187:230:12",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "5540:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "5540:6:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5548:2:12",
																		"nodeType": "YulLiteral",
																		"src": "5548:2:12",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "5537:2:12",
																	"nodeType": "YulIdentifier",
																	"src": "5537:2:12"
																},
																"nativeSrc": "5537:14:12",
																"nodeType": "YulFunctionCall",
																"src": "5537:14:12"
															},
															"nativeSrc": "5530:887:12",
															"nodeType": "YulSwitch",
															"src": "5530:887:12"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nativeSrc": "5028:1395:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "5109:4:12",
														"nodeType": "YulTypedName",
														"src": "5109:4:12",
														"type": ""
													},
													{
														"name": "src",
														"nativeSrc": "5115:3:12",
														"nodeType": "YulTypedName",
														"src": "5115:3:12",
														"type": ""
													}
												],
												"src": "5028:1395:12"
											},
											{
												"body": {
													"nativeSrc": "6487:40:12",
													"nodeType": "YulBlock",
													"src": "6487:40:12",
													"statements": [
														{
															"nativeSrc": "6498:22:12",
															"nodeType": "YulAssignment",
															"src": "6498:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "6514:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "6514:5:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "6508:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "6508:5:12"
																},
																"nativeSrc": "6508:12:12",
																"nodeType": "YulFunctionCall",
																"src": "6508:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "6498:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "6498:6:12"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nativeSrc": "6429:98:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6470:5:12",
														"nodeType": "YulTypedName",
														"src": "6470:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "6480:6:12",
														"nodeType": "YulTypedName",
														"src": "6480:6:12",
														"type": ""
													}
												],
												"src": "6429:98:12"
											},
											{
												"body": {
													"nativeSrc": "6646:34:12",
													"nodeType": "YulBlock",
													"src": "6646:34:12",
													"statements": [
														{
															"nativeSrc": "6656:18:12",
															"nodeType": "YulAssignment",
															"src": "6656:18:12",
															"value": {
																"name": "pos",
																"nativeSrc": "6671:3:12",
																"nodeType": "YulIdentifier",
																"src": "6671:3:12"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "6656:11:12",
																	"nodeType": "YulIdentifier",
																	"src": "6656:11:12"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nativeSrc": "6533:147:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "6618:3:12",
														"nodeType": "YulTypedName",
														"src": "6618:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "6623:6:12",
														"nodeType": "YulTypedName",
														"src": "6623:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "6634:11:12",
														"nodeType": "YulTypedName",
														"src": "6634:11:12",
														"type": ""
													}
												],
												"src": "6533:147:12"
											},
											{
												"body": {
													"nativeSrc": "6748:77:12",
													"nodeType": "YulBlock",
													"src": "6748:77:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nativeSrc": "6765:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "6765:3:12"
																	},
																	{
																		"name": "src",
																		"nativeSrc": "6770:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "6770:3:12"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "6775:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "6775:6:12"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "6759:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "6759:5:12"
																},
																"nativeSrc": "6759:23:12",
																"nodeType": "YulFunctionCall",
																"src": "6759:23:12"
															},
															"nativeSrc": "6759:23:12",
															"nodeType": "YulExpressionStatement",
															"src": "6759:23:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nativeSrc": "6802:3:12",
																				"nodeType": "YulIdentifier",
																				"src": "6802:3:12"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "6807:6:12",
																				"nodeType": "YulIdentifier",
																				"src": "6807:6:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6798:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "6798:3:12"
																		},
																		"nativeSrc": "6798:16:12",
																		"nodeType": "YulFunctionCall",
																		"src": "6798:16:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6816:1:12",
																		"nodeType": "YulLiteral",
																		"src": "6816:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6791:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "6791:6:12"
																},
																"nativeSrc": "6791:27:12",
																"nodeType": "YulFunctionCall",
																"src": "6791:27:12"
															},
															"nativeSrc": "6791:27:12",
															"nodeType": "YulExpressionStatement",
															"src": "6791:27:12"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "6686:139:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "6730:3:12",
														"nodeType": "YulTypedName",
														"src": "6730:3:12",
														"type": ""
													},
													{
														"name": "dst",
														"nativeSrc": "6735:3:12",
														"nodeType": "YulTypedName",
														"src": "6735:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "6740:6:12",
														"nodeType": "YulTypedName",
														"src": "6740:6:12",
														"type": ""
													}
												],
												"src": "6686:139:12"
											},
											{
												"body": {
													"nativeSrc": "6939:278:12",
													"nodeType": "YulBlock",
													"src": "6939:278:12",
													"statements": [
														{
															"nativeSrc": "6949:52:12",
															"nodeType": "YulVariableDeclaration",
															"src": "6949:52:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "6995:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "6995:5:12"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nativeSrc": "6963:31:12",
																	"nodeType": "YulIdentifier",
																	"src": "6963:31:12"
																},
																"nativeSrc": "6963:38:12",
																"nodeType": "YulFunctionCall",
																"src": "6963:38:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "6953:6:12",
																	"nodeType": "YulTypedName",
																	"src": "6953:6:12",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "7010:95:12",
															"nodeType": "YulAssignment",
															"src": "7010:95:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7093:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "7093:3:12"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7098:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "7098:6:12"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nativeSrc": "7017:75:12",
																	"nodeType": "YulIdentifier",
																	"src": "7017:75:12"
																},
																"nativeSrc": "7017:88:12",
																"nodeType": "YulFunctionCall",
																"src": "7017:88:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "7010:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "7010:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "7153:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "7153:5:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7160:4:12",
																				"nodeType": "YulLiteral",
																				"src": "7160:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7149:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "7149:3:12"
																		},
																		"nativeSrc": "7149:16:12",
																		"nodeType": "YulFunctionCall",
																		"src": "7149:16:12"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "7167:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "7167:3:12"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7172:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "7172:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "7114:34:12",
																	"nodeType": "YulIdentifier",
																	"src": "7114:34:12"
																},
																"nativeSrc": "7114:65:12",
																"nodeType": "YulFunctionCall",
																"src": "7114:65:12"
															},
															"nativeSrc": "7114:65:12",
															"nodeType": "YulExpressionStatement",
															"src": "7114:65:12"
														},
														{
															"nativeSrc": "7188:23:12",
															"nodeType": "YulAssignment",
															"src": "7188:23:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7199:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "7199:3:12"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7204:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "7204:6:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7195:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "7195:3:12"
																},
																"nativeSrc": "7195:16:12",
																"nodeType": "YulFunctionCall",
																"src": "7195:16:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "7188:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "7188:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nativeSrc": "6831:386:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6920:5:12",
														"nodeType": "YulTypedName",
														"src": "6920:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "6927:3:12",
														"nodeType": "YulTypedName",
														"src": "6927:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "6935:3:12",
														"nodeType": "YulTypedName",
														"src": "6935:3:12",
														"type": ""
													}
												],
												"src": "6831:386:12"
											},
											{
												"body": {
													"nativeSrc": "7357:137:12",
													"nodeType": "YulBlock",
													"src": "7357:137:12",
													"statements": [
														{
															"nativeSrc": "7368:100:12",
															"nodeType": "YulAssignment",
															"src": "7368:100:12",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "7455:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "7455:6:12"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "7464:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "7464:3:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nativeSrc": "7375:79:12",
																	"nodeType": "YulIdentifier",
																	"src": "7375:79:12"
																},
																"nativeSrc": "7375:93:12",
																"nodeType": "YulFunctionCall",
																"src": "7375:93:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "7368:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "7368:3:12"
																}
															]
														},
														{
															"nativeSrc": "7478:10:12",
															"nodeType": "YulAssignment",
															"src": "7478:10:12",
															"value": {
																"name": "pos",
																"nativeSrc": "7485:3:12",
																"nodeType": "YulIdentifier",
																"src": "7485:3:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "7478:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "7478:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nativeSrc": "7223:271:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "7336:3:12",
														"nodeType": "YulTypedName",
														"src": "7336:3:12",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "7342:6:12",
														"nodeType": "YulTypedName",
														"src": "7342:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "7353:3:12",
														"nodeType": "YulTypedName",
														"src": "7353:3:12",
														"type": ""
													}
												],
												"src": "7223:271:12"
											},
											{
												"body": {
													"nativeSrc": "7543:79:12",
													"nodeType": "YulBlock",
													"src": "7543:79:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "7600:16:12",
																"nodeType": "YulBlock",
																"src": "7600:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7609:1:12",
																					"nodeType": "YulLiteral",
																					"src": "7609:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "7612:1:12",
																					"nodeType": "YulLiteral",
																					"src": "7612:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "7602:6:12",
																				"nodeType": "YulIdentifier",
																				"src": "7602:6:12"
																			},
																			"nativeSrc": "7602:12:12",
																			"nodeType": "YulFunctionCall",
																			"src": "7602:12:12"
																		},
																		"nativeSrc": "7602:12:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "7602:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "7566:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "7566:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "7591:5:12",
																						"nodeType": "YulIdentifier",
																						"src": "7591:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "7573:17:12",
																					"nodeType": "YulIdentifier",
																					"src": "7573:17:12"
																				},
																				"nativeSrc": "7573:24:12",
																				"nodeType": "YulFunctionCall",
																				"src": "7573:24:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "7563:2:12",
																			"nodeType": "YulIdentifier",
																			"src": "7563:2:12"
																		},
																		"nativeSrc": "7563:35:12",
																		"nodeType": "YulFunctionCall",
																		"src": "7563:35:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "7556:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "7556:6:12"
																},
																"nativeSrc": "7556:43:12",
																"nodeType": "YulFunctionCall",
																"src": "7556:43:12"
															},
															"nativeSrc": "7553:63:12",
															"nodeType": "YulIf",
															"src": "7553:63:12"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nativeSrc": "7500:122:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "7536:5:12",
														"nodeType": "YulTypedName",
														"src": "7536:5:12",
														"type": ""
													}
												],
												"src": "7500:122:12"
											},
											{
												"body": {
													"nativeSrc": "7691:80:12",
													"nodeType": "YulBlock",
													"src": "7691:80:12",
													"statements": [
														{
															"nativeSrc": "7701:22:12",
															"nodeType": "YulAssignment",
															"src": "7701:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "7716:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "7716:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "7710:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "7710:5:12"
																},
																"nativeSrc": "7710:13:12",
																"nodeType": "YulFunctionCall",
																"src": "7710:13:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "7701:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "7701:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "7759:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "7759:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "7732:26:12",
																	"nodeType": "YulIdentifier",
																	"src": "7732:26:12"
																},
																"nativeSrc": "7732:33:12",
																"nodeType": "YulFunctionCall",
																"src": "7732:33:12"
															},
															"nativeSrc": "7732:33:12",
															"nodeType": "YulExpressionStatement",
															"src": "7732:33:12"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nativeSrc": "7628:143:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "7669:6:12",
														"nodeType": "YulTypedName",
														"src": "7669:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "7677:3:12",
														"nodeType": "YulTypedName",
														"src": "7677:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "7685:5:12",
														"nodeType": "YulTypedName",
														"src": "7685:5:12",
														"type": ""
													}
												],
												"src": "7628:143:12"
											},
											{
												"body": {
													"nativeSrc": "7854:274:12",
													"nodeType": "YulBlock",
													"src": "7854:274:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "7900:83:12",
																"nodeType": "YulBlock",
																"src": "7900:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "7902:77:12",
																				"nodeType": "YulIdentifier",
																				"src": "7902:77:12"
																			},
																			"nativeSrc": "7902:79:12",
																			"nodeType": "YulFunctionCall",
																			"src": "7902:79:12"
																		},
																		"nativeSrc": "7902:79:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "7902:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "7875:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "7875:7:12"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "7884:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "7884:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "7871:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "7871:3:12"
																		},
																		"nativeSrc": "7871:23:12",
																		"nodeType": "YulFunctionCall",
																		"src": "7871:23:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7896:2:12",
																		"nodeType": "YulLiteral",
																		"src": "7896:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "7867:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "7867:3:12"
																},
																"nativeSrc": "7867:32:12",
																"nodeType": "YulFunctionCall",
																"src": "7867:32:12"
															},
															"nativeSrc": "7864:119:12",
															"nodeType": "YulIf",
															"src": "7864:119:12"
														},
														{
															"nativeSrc": "7993:128:12",
															"nodeType": "YulBlock",
															"src": "7993:128:12",
															"statements": [
																{
																	"nativeSrc": "8008:15:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "8008:15:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "8022:1:12",
																		"nodeType": "YulLiteral",
																		"src": "8022:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "8012:6:12",
																			"nodeType": "YulTypedName",
																			"src": "8012:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "8037:74:12",
																	"nodeType": "YulAssignment",
																	"src": "8037:74:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "8083:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "8083:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "8094:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "8094:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "8079:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "8079:3:12"
																				},
																				"nativeSrc": "8079:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "8079:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "8103:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "8103:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nativeSrc": "8047:31:12",
																			"nodeType": "YulIdentifier",
																			"src": "8047:31:12"
																		},
																		"nativeSrc": "8047:64:12",
																		"nodeType": "YulFunctionCall",
																		"src": "8047:64:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "8037:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "8037:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nativeSrc": "7777:351:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7824:9:12",
														"nodeType": "YulTypedName",
														"src": "7824:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "7835:7:12",
														"nodeType": "YulTypedName",
														"src": "7835:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "7847:6:12",
														"nodeType": "YulTypedName",
														"src": "7847:6:12",
														"type": ""
													}
												],
												"src": "7777:351:12"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        mcopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60c060405234801561000f575f80fd5b50604051612dc4380380612dc483398181016040528101906100319190610294565b806040518060400160405280600d81526020017f4d795661756c74536861726573000000000000000000000000000000000000008152506040518060400160405280600381526020017f4d5653000000000000000000000000000000000000000000000000000000000081525081600390816100ad91906104f9565b5080600490816100bd91906104f9565b5050505f806100d18361012d60201b60201c565b91509150816100e15760126100e3565b805b60ff1660a08160ff16815250508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050505050610685565b5f805f808473ffffffffffffffffffffffffffffffffffffffff1660405160240160405160208183030381529060405263313ce56760e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516101a0919061061a565b5f60405180830381855afa9150503d805f81146101d8576040519150601f19603f3d011682016040523d82523d5f602084013e6101dd565b606091505b50915091508180156101f157506020815110155b15610228575f8180602001905181019061020b919061065a565b905060ff801681116102265760018194509450505050610231565b505b5f809350935050505b915091565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102638261023a565b9050919050565b61027381610259565b811461027d575f80fd5b50565b5f8151905061028e8161026a565b92915050565b5f602082840312156102a9576102a8610236565b5b5f6102b684828501610280565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061033a57607f821691505b60208210810361034d5761034c6102f6565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026103af7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610374565b6103b98683610374565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6103fd6103f86103f3846103d1565b6103da565b6103d1565b9050919050565b5f819050919050565b610416836103e3565b61042a61042282610404565b848454610380565b825550505050565b5f90565b61043e610432565b61044981848461040d565b505050565b5b8181101561046c576104615f82610436565b60018101905061044f565b5050565b601f8211156104b15761048281610353565b61048b84610365565b8101602085101561049a578190505b6104ae6104a685610365565b83018261044e565b50505b505050565b5f82821c905092915050565b5f6104d15f19846008026104b6565b1980831691505092915050565b5f6104e983836104c2565b9150826002028217905092915050565b610502826102bf565b67ffffffffffffffff81111561051b5761051a6102c9565b5b6105258254610323565b610530828285610470565b5f60209050601f831160018114610561575f841561054f578287015190505b61055985826104de565b8655506105c0565b601f19841661056f86610353565b5f5b8281101561059657848901518255600182019150602085019450602081019050610571565b868310156105b357848901516105af601f8916826104c2565b8355505b6001600288020188555050505b505050505050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f6105f4826105c8565b6105fe81856105d2565b935061060e8185602086016105dc565b80840191505092915050565b5f61062582846105ea565b915081905092915050565b610639816103d1565b8114610643575f80fd5b50565b5f8151905061065481610630565b92915050565b5f6020828403121561066f5761066e610236565b5b5f61067c84828501610646565b91505092915050565b60805160a0516127096106bb5f395f61085701525f8181610640015281816108880152818161115101526112bf01526127095ff3fe608060405234801561000f575f80fd5b50600436106101a7575f3560e01c806392bdf9ba116100f7578063ba08765211610095578063ce96cb771161006f578063ce96cb771461057d578063d905777e146105ad578063dd62ed3e146105dd578063ef8b30f71461060d576101a7565b8063ba087652146104ed578063c63d75b61461051d578063c6e6f5921461054d576101a7565b80639d76ea58116100d15780639d76ea581461043f578063a9059cbb1461045d578063b3d7f6b91461048d578063b460af94146104bd576101a7565b806392bdf9ba146103c157806394bf804d146103f157806395d89b4114610421576101a7565b806323b872dd11610164578063402d267d1161013e578063402d267d146103015780634cdad506146103315780636e553f651461036157806370a0823114610391576101a7565b806323b872dd14610295578063313ce567146102c557806338d52e0f146102e3576101a7565b806301e1d114146101ab57806306fdde03146101c957806307a2d13a146101e7578063095ea7b3146102175780630a28a4771461024757806318160ddd14610277575b5f80fd5b6101b361063d565b6040516101c09190611da0565b60405180910390f35b6101d16106db565b6040516101de9190611e29565b60405180910390f35b61020160048036038101906101fc9190611e77565b61076b565b60405161020e9190611da0565b60405180910390f35b610231600480360381019061022c9190611efc565b61077d565b60405161023e9190611f54565b60405180910390f35b610261600480360381019061025c9190611e77565b61079f565b60405161026e9190611da0565b60405180910390f35b61027f610815565b60405161028c9190611da0565b60405180910390f35b6102af60048036038101906102aa9190611f6d565b61081e565b6040516102bc9190611f54565b60405180910390f35b6102cd61084c565b6040516102da9190611fd8565b60405180910390f35b6102eb610885565b6040516102f89190612000565b60405180910390f35b61031b60048036038101906103169190612019565b6108ac565b6040516103289190611da0565b60405180910390f35b61034b60048036038101906103469190611e77565b6108d5565b6040516103589190611da0565b60405180910390f35b61037b60048036038101906103769190612044565b6108e7565b6040516103889190611da0565b60405180910390f35b6103ab60048036038101906103a69190612019565b6109a0565b6040516103b89190611da0565b60405180910390f35b6103db60048036038101906103d69190612019565b6109e5565b6040516103e89190611da0565b60405180910390f35b61040b60048036038101906104069190612044565b6109fa565b6040516104189190611da0565b60405180910390f35b610429610a7a565b6040516104369190611e29565b60405180910390f35b610447610b0a565b6040516104549190612000565b60405180910390f35b61047760048036038101906104729190611efc565b610b2f565b6040516104849190611f54565b60405180910390f35b6104a760048036038101906104a29190611e77565b610b51565b6040516104b49190611da0565b60405180910390f35b6104d760048036038101906104d29190612082565b610b64565b6040516104e49190611da0565b60405180910390f35b61050760048036038101906105029190612082565b610cea565b6040516105149190611da0565b60405180910390f35b61053760048036038101906105329190612019565b610d6c565b6040516105449190611da0565b60405180910390f35b61056760048036038101906105629190611e77565b610d95565b6040516105749190611da0565b60405180910390f35b61059760048036038101906105929190612019565b610da7565b6040516105a49190611da0565b60405180910390f35b6105c760048036038101906105c29190612019565b610e1d565b6040516105d49190611da0565b60405180910390f35b6105f760048036038101906105f291906120d2565b610e2e565b6040516106049190611da0565b60405180910390f35b61062760048036038101906106229190611e77565b610eb0565b6040516106349190611da0565b60405180910390f35b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106979190612000565b602060405180830381865afa1580156106b2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106d69190612124565b905090565b6060600380546106ea9061217c565b80601f01602080910402602001604051908101604052809291908181526020018280546107169061217c565b80156107615780601f1061073857610100808354040283529160200191610761565b820191905f5260205f20905b81548152906001019060200180831161074457829003601f168201915b5050505050905090565b5f610776825f610ec2565b9050919050565b5f80610787610f1a565b9050610794818585610f21565b600191505092915050565b5f806107aa83610f33565b90505f60055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490508082111561080a57808261080191906121d9565b92505050610810565b5f925050505b919050565b5f600254905090565b5f80610828610f1a565b9050610835858285610f46565b610840858585610fd8565b60019150509392505050565b5f6108556110c8565b7f0000000000000000000000000000000000000000000000000000000000000000610880919061220c565b905090565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050919050565b5f6108e0825f610ec2565b9050919050565b5f806108f384846110cc565b90508360055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546109419190612240565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167f2251f6a4ed7fe619e9e8ce557d05a63dd484284f9c95c9ab334f6a7707cd08008560405161098e9190611da0565b60405180910390a28091505092915050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6005602052805f5260405f205f915090505481565b5f80610a0583610d6c565b905080841115610a50578284826040517f284ff667000000000000000000000000000000000000000000000000000000008152600401610a4793929190612273565b60405180910390fd5b5f610a5a85610b51565b9050610a6f610a67610f1a565b85838861114c565b809250505092915050565b606060048054610a899061217c565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab59061217c565b8015610b005780601f10610ad757610100808354040283529160200191610b00565b820191905f5260205f20905b815481529060010190602001808311610ae357829003601f168201915b5050505050905090565b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f80610b39610f1a565b9050610b46818585610fd8565b600191505092915050565b5f610b5d826001610ec2565b9050919050565b5f610b6e82610da7565b841115610bb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba7906122f2565b60405180910390fd5b60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054841115610c30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2790612380565b60405180910390fd5b5f610c3c8585856111ef565b90508460055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610c8a91906121d9565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167fb4eaf47ecd4bc76248f192433e8067c96cb3e17aced42fbc47a512742fb7421686604051610cd79190611da0565b60405180910390a2809150509392505050565b5f80610cf583610e1d565b905080851115610d40578285826040517fb94abeec000000000000000000000000000000000000000000000000000000008152600401610d3793929190612273565b60405180910390fd5b5f610d4a866108d5565b9050610d60610d57610f1a565b8686848a611271565b80925050509392505050565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050919050565b5f610da0825f61136a565b9050919050565b5f80610db2836113c2565b90505f60055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905080821115610e12578082610e0991906121d9565b92505050610e18565b5f925050505b919050565b5f610e27826109a0565b9050919050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f610ebb825f61136a565b9050919050565b5f610f126001610ed061063d565b610eda9190612240565b610ee26110c8565b600a610eee91906124cd565b610ef6610815565b610f009190612240565b84866113dc909392919063ffffffff16565b905092915050565b5f33905090565b610f2e8383836001611431565b505050565b5f610f3f82600161136a565b9050919050565b5f610f518484610e2e565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610fd25781811015610fc3578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610fba93929190612273565b60405180910390fd5b610fd184848484035f611431565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611048575f6040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161103f9190612000565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110b8575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016110af9190612000565b60405180910390fd5b6110c3838383611600565b505050565b5f90565b5f806110d7836108ac565b905080841115611122578284826040517f79012fb200000000000000000000000000000000000000000000000000000000815260040161111993929190612273565b60405180910390fd5b5f61112c85610eb0565b9050611141611139610f1a565b85878461114c565b809250505092915050565b6111787f0000000000000000000000000000000000000000000000000000000000000000853085611819565b611182838261189b565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d784846040516111e1929190612517565b60405180910390a350505050565b5f806111fa83610da7565b905080851115611245578285826040517ffe9cceec00000000000000000000000000000000000000000000000000000000815260040161123c93929190612273565b60405180910390fd5b5f61124f8661079f565b905061126561125c610f1a565b86868985611271565b80925050509392505050565b8273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146112b0576112af838683610f46565b5b6112ba838261191a565b6112e57f00000000000000000000000000000000000000000000000000000000000000008584611999565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db858560405161135b929190612517565b60405180910390a45050505050565b5f6113ba6113766110c8565b600a61138291906124cd565b61138a610815565b6113949190612240565b600161139e61063d565b6113a89190612240565b84866113dc909392919063ffffffff16565b905092915050565b5f6113d56113cf836109a0565b5f610ec2565b9050919050565b5f806113e9868686611a18565b90506113f483611b17565b801561141057505f848061140b5761140a61253e565b5b868809115b15611425576001816114229190612240565b90505b80915050949350505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036114a1575f6040517fe602df050000000000000000000000000000000000000000000000000000000081526004016114989190612000565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611511575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016115089190612000565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555080156115fa578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516115f19190611da0565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611650578060025f8282546116449190612240565b9250508190555061171e565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156116d9578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016116d093929190612273565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611765578060025f82825403925050819055506117af565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161180c9190611da0565b60405180910390a3505050565b611895848573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161184e9392919061256b565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b44565b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361190b575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016119029190612000565b60405180910390fd5b6119165f8383611600565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361198a575f6040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016119819190612000565b60405180910390fd5b611995825f83611600565b5050565b611a13838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016119cc9291906125a0565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b44565b505050565b5f8083850290505f8019858709828110838203039150505f8103611a5057838281611a4657611a4561253e565b5b0492505050611b10565b808411611a89576040517f227bc15300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8486880990508281118203915080830392505f855f038616905080860495508084049350600181825f0304019050808302841793505f600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b5f60016002836003811115611b2f57611b2e6125c7565b5b611b3991906125f4565b60ff16149050919050565b5f611b6e828473ffffffffffffffffffffffffffffffffffffffff16611bd990919063ffffffff16565b90505f815114158015611b92575080806020019051810190611b90919061264e565b155b15611bd457826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401611bcb9190612000565b60405180910390fd5b505050565b6060611be683835f611bee565b905092915050565b606081471015611c3557306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401611c2c9190612000565b60405180910390fd5b5f808573ffffffffffffffffffffffffffffffffffffffff168486604051611c5d91906126bd565b5f6040518083038185875af1925050503d805f8114611c97576040519150601f19603f3d011682016040523d82523d5f602084013e611c9c565b606091505b5091509150611cac868383611cb7565b925050509392505050565b606082611ccc57611cc782611d44565b611d3c565b5f8251148015611cf257505f8473ffffffffffffffffffffffffffffffffffffffff163b145b15611d3457836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401611d2b9190612000565b60405180910390fd5b819050611d3d565b5b9392505050565b5f81511115611d565780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f819050919050565b611d9a81611d88565b82525050565b5f602082019050611db35f830184611d91565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611dfb82611db9565b611e058185611dc3565b9350611e15818560208601611dd3565b611e1e81611de1565b840191505092915050565b5f6020820190508181035f830152611e418184611df1565b905092915050565b5f80fd5b611e5681611d88565b8114611e60575f80fd5b50565b5f81359050611e7181611e4d565b92915050565b5f60208284031215611e8c57611e8b611e49565b5b5f611e9984828501611e63565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611ecb82611ea2565b9050919050565b611edb81611ec1565b8114611ee5575f80fd5b50565b5f81359050611ef681611ed2565b92915050565b5f8060408385031215611f1257611f11611e49565b5b5f611f1f85828601611ee8565b9250506020611f3085828601611e63565b9150509250929050565b5f8115159050919050565b611f4e81611f3a565b82525050565b5f602082019050611f675f830184611f45565b92915050565b5f805f60608486031215611f8457611f83611e49565b5b5f611f9186828701611ee8565b9350506020611fa286828701611ee8565b9250506040611fb386828701611e63565b9150509250925092565b5f60ff82169050919050565b611fd281611fbd565b82525050565b5f602082019050611feb5f830184611fc9565b92915050565b611ffa81611ec1565b82525050565b5f6020820190506120135f830184611ff1565b92915050565b5f6020828403121561202e5761202d611e49565b5b5f61203b84828501611ee8565b91505092915050565b5f806040838503121561205a57612059611e49565b5b5f61206785828601611e63565b925050602061207885828601611ee8565b9150509250929050565b5f805f6060848603121561209957612098611e49565b5b5f6120a686828701611e63565b93505060206120b786828701611ee8565b92505060406120c886828701611ee8565b9150509250925092565b5f80604083850312156120e8576120e7611e49565b5b5f6120f585828601611ee8565b925050602061210685828601611ee8565b9150509250929050565b5f8151905061211e81611e4d565b92915050565b5f6020828403121561213957612138611e49565b5b5f61214684828501612110565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061219357607f821691505b6020821081036121a6576121a561214f565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6121e382611d88565b91506121ee83611d88565b9250828203905081811115612206576122056121ac565b5b92915050565b5f61221682611fbd565b915061222183611fbd565b9250828201905060ff81111561223a576122396121ac565b5b92915050565b5f61224a82611d88565b915061225583611d88565b925082820190508082111561226d5761226c6121ac565b5b92915050565b5f6060820190506122865f830186611ff1565b6122936020830185611d91565b6122a06040830184611d91565b949350505050565b7f45786365656473206d617820776974686472617720616d6f756e7400000000005f82015250565b5f6122dc601b83611dc3565b91506122e7826122a8565b602082019050919050565b5f6020820190508181035f830152612309816122d0565b9050919050565b7f43616e6e6f74207769746864726177206c6f636b656420636f6c6c61746572615f8201527f6c00000000000000000000000000000000000000000000000000000000000000602082015250565b5f61236a602183611dc3565b915061237582612310565b604082019050919050565b5f6020820190508181035f8301526123978161235e565b9050919050565b5f8160011c9050919050565b5f808291508390505b60018511156123f3578086048111156123cf576123ce6121ac565b5b60018516156123de5780820291505b80810290506123ec8561239e565b94506123b3565b94509492505050565b5f8261240b57600190506124c6565b81612418575f90506124c6565b816001811461242e576002811461243857612467565b60019150506124c6565b60ff84111561244a576124496121ac565b5b8360020a915084821115612461576124606121ac565b5b506124c6565b5060208310610133831016604e8410600b841016171561249c5782820a905083811115612497576124966121ac565b5b6124c6565b6124a984848460016123aa565b925090508184048111156124c0576124bf6121ac565b5b81810290505b9392505050565b5f6124d782611d88565b91506124e283611fbd565b925061250f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846123fc565b905092915050565b5f60408201905061252a5f830185611d91565b6125376020830184611d91565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f60608201905061257e5f830186611ff1565b61258b6020830185611ff1565b6125986040830184611d91565b949350505050565b5f6040820190506125b35f830185611ff1565b6125c06020830184611d91565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f6125fe82611fbd565b915061260983611fbd565b9250826126195761261861253e565b5b828206905092915050565b61262d81611f3a565b8114612637575f80fd5b50565b5f8151905061264881612624565b92915050565b5f6020828403121561266357612662611e49565b5b5f6126708482850161263a565b91505092915050565b5f81519050919050565b5f81905092915050565b5f61269782612679565b6126a18185612683565b93506126b1818560208601611dd3565b80840191505092915050565b5f6126c8828461268d565b91508190509291505056fea2646970667358221220d59a5cd3265cb00800220248f085c73f2003b7373affba19a4b309537e087b0d64736f6c634300081a0033",
							"opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2DC4 CODESIZE SUB DUP1 PUSH2 0x2DC4 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x31 SWAP2 SWAP1 PUSH2 0x294 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D795661756C7453686172657300000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D56530000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH2 0xAD SWAP2 SWAP1 PUSH2 0x4F9 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP2 PUSH2 0xBD SWAP2 SWAP1 PUSH2 0x4F9 JUMP JUMPDEST POP POP POP PUSH0 DUP1 PUSH2 0xD1 DUP4 PUSH2 0x12D PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0xE1 JUMPI PUSH1 0x12 PUSH2 0xE3 JUMP JUMPDEST DUP1 JUMPDEST PUSH1 0xFF AND PUSH1 0xA0 DUP2 PUSH1 0xFF AND DUP2 MSTORE POP POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP POP POP POP PUSH2 0x685 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH4 0x313CE567 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0x1A0 SWAP2 SWAP1 PUSH2 0x61A JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x1D8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1DD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1F1 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x228 JUMPI PUSH0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x20B SWAP2 SWAP1 PUSH2 0x65A JUMP JUMPDEST SWAP1 POP PUSH1 0xFF DUP1 AND DUP2 GT PUSH2 0x226 JUMPI PUSH1 0x1 DUP2 SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x231 JUMP JUMPDEST POP JUMPDEST PUSH0 DUP1 SWAP4 POP SWAP4 POP POP POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x263 DUP3 PUSH2 0x23A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x273 DUP2 PUSH2 0x259 JUMP JUMPDEST DUP2 EQ PUSH2 0x27D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x28E DUP2 PUSH2 0x26A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A9 JUMPI PUSH2 0x2A8 PUSH2 0x236 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2B6 DUP5 DUP3 DUP6 ADD PUSH2 0x280 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x33A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x34D JUMPI PUSH2 0x34C PUSH2 0x2F6 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH2 0x3AF PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x374 JUMP JUMPDEST PUSH2 0x3B9 DUP7 DUP4 PUSH2 0x374 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x3FD PUSH2 0x3F8 PUSH2 0x3F3 DUP5 PUSH2 0x3D1 JUMP JUMPDEST PUSH2 0x3DA JUMP JUMPDEST PUSH2 0x3D1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x416 DUP4 PUSH2 0x3E3 JUMP JUMPDEST PUSH2 0x42A PUSH2 0x422 DUP3 PUSH2 0x404 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x380 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH2 0x43E PUSH2 0x432 JUMP JUMPDEST PUSH2 0x449 DUP2 DUP5 DUP5 PUSH2 0x40D JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x46C JUMPI PUSH2 0x461 PUSH0 DUP3 PUSH2 0x436 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x44F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x4B1 JUMPI PUSH2 0x482 DUP2 PUSH2 0x353 JUMP JUMPDEST PUSH2 0x48B DUP5 PUSH2 0x365 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x49A JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x4AE PUSH2 0x4A6 DUP6 PUSH2 0x365 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x44E JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x4D1 PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x4B6 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x4E9 DUP4 DUP4 PUSH2 0x4C2 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x502 DUP3 PUSH2 0x2BF JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x51B JUMPI PUSH2 0x51A PUSH2 0x2C9 JUMP JUMPDEST JUMPDEST PUSH2 0x525 DUP3 SLOAD PUSH2 0x323 JUMP JUMPDEST PUSH2 0x530 DUP3 DUP3 DUP6 PUSH2 0x470 JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x561 JUMPI PUSH0 DUP5 ISZERO PUSH2 0x54F JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x559 DUP6 DUP3 PUSH2 0x4DE JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x5C0 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x56F DUP7 PUSH2 0x353 JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x596 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x571 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x5B3 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x5AF PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x4C2 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x5F4 DUP3 PUSH2 0x5C8 JUMP JUMPDEST PUSH2 0x5FE DUP2 DUP6 PUSH2 0x5D2 JUMP JUMPDEST SWAP4 POP PUSH2 0x60E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x5DC JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x625 DUP3 DUP5 PUSH2 0x5EA JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x639 DUP2 PUSH2 0x3D1 JUMP JUMPDEST DUP2 EQ PUSH2 0x643 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x654 DUP2 PUSH2 0x630 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x66F JUMPI PUSH2 0x66E PUSH2 0x236 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x67C DUP5 DUP3 DUP6 ADD PUSH2 0x646 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x2709 PUSH2 0x6BB PUSH0 CODECOPY PUSH0 PUSH2 0x857 ADD MSTORE PUSH0 DUP2 DUP2 PUSH2 0x640 ADD MSTORE DUP2 DUP2 PUSH2 0x888 ADD MSTORE DUP2 DUP2 PUSH2 0x1151 ADD MSTORE PUSH2 0x12BF ADD MSTORE PUSH2 0x2709 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1A7 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x92BDF9BA GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xBA087652 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xCE96CB77 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xCE96CB77 EQ PUSH2 0x57D JUMPI DUP1 PUSH4 0xD905777E EQ PUSH2 0x5AD JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x5DD JUMPI DUP1 PUSH4 0xEF8B30F7 EQ PUSH2 0x60D JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0xBA087652 EQ PUSH2 0x4ED JUMPI DUP1 PUSH4 0xC63D75B6 EQ PUSH2 0x51D JUMPI DUP1 PUSH4 0xC6E6F592 EQ PUSH2 0x54D JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x9D76EA58 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x9D76EA58 EQ PUSH2 0x43F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x45D JUMPI DUP1 PUSH4 0xB3D7F6B9 EQ PUSH2 0x48D JUMPI DUP1 PUSH4 0xB460AF94 EQ PUSH2 0x4BD JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x92BDF9BA EQ PUSH2 0x3C1 JUMPI DUP1 PUSH4 0x94BF804D EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x421 JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x402D267D GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x402D267D EQ PUSH2 0x301 JUMPI DUP1 PUSH4 0x4CDAD506 EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0x6E553F65 EQ PUSH2 0x361 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x391 JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x38D52E0F EQ PUSH2 0x2E3 JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x1E1D114 EQ PUSH2 0x1AB JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x7A2D13A EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0xA28A477 EQ PUSH2 0x247 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x277 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1B3 PUSH2 0x63D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C0 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D1 PUSH2 0x6DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DE SWAP2 SWAP1 PUSH2 0x1E29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x201 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FC SWAP2 SWAP1 PUSH2 0x1E77 JUMP JUMPDEST PUSH2 0x76B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20E SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x231 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22C SWAP2 SWAP1 PUSH2 0x1EFC JUMP JUMPDEST PUSH2 0x77D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23E SWAP2 SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x261 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25C SWAP2 SWAP1 PUSH2 0x1E77 JUMP JUMPDEST PUSH2 0x79F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26E SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27F PUSH2 0x815 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28C SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AA SWAP2 SWAP1 PUSH2 0x1F6D JUMP JUMPDEST PUSH2 0x81E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BC SWAP2 SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CD PUSH2 0x84C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DA SWAP2 SWAP1 PUSH2 0x1FD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2EB PUSH2 0x885 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F8 SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x316 SWAP2 SWAP1 PUSH2 0x2019 JUMP JUMPDEST PUSH2 0x8AC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x328 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x34B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x346 SWAP2 SWAP1 PUSH2 0x1E77 JUMP JUMPDEST PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x358 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x37B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x376 SWAP2 SWAP1 PUSH2 0x2044 JUMP JUMPDEST PUSH2 0x8E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3AB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A6 SWAP2 SWAP1 PUSH2 0x2019 JUMP JUMPDEST PUSH2 0x9A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B8 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3DB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D6 SWAP2 SWAP1 PUSH2 0x2019 JUMP JUMPDEST PUSH2 0x9E5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3E8 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x40B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x406 SWAP2 SWAP1 PUSH2 0x2044 JUMP JUMPDEST PUSH2 0x9FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x429 PUSH2 0xA7A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x436 SWAP2 SWAP1 PUSH2 0x1E29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x447 PUSH2 0xB0A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x454 SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x477 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x472 SWAP2 SWAP1 PUSH2 0x1EFC JUMP JUMPDEST PUSH2 0xB2F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x484 SWAP2 SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4A7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4A2 SWAP2 SWAP1 PUSH2 0x1E77 JUMP JUMPDEST PUSH2 0xB51 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4B4 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4D7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4D2 SWAP2 SWAP1 PUSH2 0x2082 JUMP JUMPDEST PUSH2 0xB64 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4E4 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x507 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x502 SWAP2 SWAP1 PUSH2 0x2082 JUMP JUMPDEST PUSH2 0xCEA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x514 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x537 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x532 SWAP2 SWAP1 PUSH2 0x2019 JUMP JUMPDEST PUSH2 0xD6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x544 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x567 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x562 SWAP2 SWAP1 PUSH2 0x1E77 JUMP JUMPDEST PUSH2 0xD95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x574 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x597 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x592 SWAP2 SWAP1 PUSH2 0x2019 JUMP JUMPDEST PUSH2 0xDA7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5A4 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5C2 SWAP2 SWAP1 PUSH2 0x2019 JUMP JUMPDEST PUSH2 0xE1D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5D4 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5F7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5F2 SWAP2 SWAP1 PUSH2 0x20D2 JUMP JUMPDEST PUSH2 0xE2E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x604 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x627 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x622 SWAP2 SWAP1 PUSH2 0x1E77 JUMP JUMPDEST PUSH2 0xEB0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x634 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x697 SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6B2 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6D6 SWAP2 SWAP1 PUSH2 0x2124 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x6EA SWAP1 PUSH2 0x217C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x716 SWAP1 PUSH2 0x217C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x761 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x738 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x761 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x744 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x776 DUP3 PUSH0 PUSH2 0xEC2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x787 PUSH2 0xF1A JUMP JUMPDEST SWAP1 POP PUSH2 0x794 DUP2 DUP6 DUP6 PUSH2 0xF21 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x7AA DUP4 PUSH2 0xF33 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x5 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x80A JUMPI DUP1 DUP3 PUSH2 0x801 SWAP2 SWAP1 PUSH2 0x21D9 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x810 JUMP JUMPDEST PUSH0 SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x828 PUSH2 0xF1A JUMP JUMPDEST SWAP1 POP PUSH2 0x835 DUP6 DUP3 DUP6 PUSH2 0xF46 JUMP JUMPDEST PUSH2 0x840 DUP6 DUP6 DUP6 PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x855 PUSH2 0x10C8 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x880 SWAP2 SWAP1 PUSH2 0x220C JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x8E0 DUP3 PUSH0 PUSH2 0xEC2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x8F3 DUP5 DUP5 PUSH2 0x10CC JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x5 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x941 SWAP2 SWAP1 PUSH2 0x2240 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x2251F6A4ED7FE619E9E8CE557D05A63DD484284F9C95C9AB334F6A7707CD0800 DUP6 PUSH1 0x40 MLOAD PUSH2 0x98E SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP1 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xA05 DUP4 PUSH2 0xD6C JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0xA50 JUMPI DUP3 DUP5 DUP3 PUSH1 0x40 MLOAD PUSH32 0x284FF66700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA47 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2273 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xA5A DUP6 PUSH2 0xB51 JUMP JUMPDEST SWAP1 POP PUSH2 0xA6F PUSH2 0xA67 PUSH2 0xF1A JUMP JUMPDEST DUP6 DUP4 DUP9 PUSH2 0x114C JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0xA89 SWAP1 PUSH2 0x217C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xAB5 SWAP1 PUSH2 0x217C JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB00 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAD7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB00 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAE3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x6 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xB39 PUSH2 0xF1A JUMP JUMPDEST SWAP1 POP PUSH2 0xB46 DUP2 DUP6 DUP6 PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xB5D DUP3 PUSH1 0x1 PUSH2 0xEC2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xB6E DUP3 PUSH2 0xDA7 JUMP JUMPDEST DUP5 GT ISZERO PUSH2 0xBB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA7 SWAP1 PUSH2 0x22F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD DUP5 GT ISZERO PUSH2 0xC30 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC27 SWAP1 PUSH2 0x2380 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xC3C DUP6 DUP6 DUP6 PUSH2 0x11EF JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x5 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xC8A SWAP2 SWAP1 PUSH2 0x21D9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xB4EAF47ECD4BC76248F192433E8067C96CB3E17ACED42FBC47A512742FB74216 DUP7 PUSH1 0x40 MLOAD PUSH2 0xCD7 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xCF5 DUP4 PUSH2 0xE1D JUMP JUMPDEST SWAP1 POP DUP1 DUP6 GT ISZERO PUSH2 0xD40 JUMPI DUP3 DUP6 DUP3 PUSH1 0x40 MLOAD PUSH32 0xB94ABEEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD37 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2273 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xD4A DUP7 PUSH2 0x8D5 JUMP JUMPDEST SWAP1 POP PUSH2 0xD60 PUSH2 0xD57 PUSH2 0xF1A JUMP JUMPDEST DUP7 DUP7 DUP5 DUP11 PUSH2 0x1271 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xDA0 DUP3 PUSH0 PUSH2 0x136A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xDB2 DUP4 PUSH2 0x13C2 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x5 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xE12 JUMPI DUP1 DUP3 PUSH2 0xE09 SWAP2 SWAP1 PUSH2 0x21D9 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0xE18 JUMP JUMPDEST PUSH0 SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xE27 DUP3 PUSH2 0x9A0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xEBB DUP3 PUSH0 PUSH2 0x136A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xF12 PUSH1 0x1 PUSH2 0xED0 PUSH2 0x63D JUMP JUMPDEST PUSH2 0xEDA SWAP2 SWAP1 PUSH2 0x2240 JUMP JUMPDEST PUSH2 0xEE2 PUSH2 0x10C8 JUMP JUMPDEST PUSH1 0xA PUSH2 0xEEE SWAP2 SWAP1 PUSH2 0x24CD JUMP JUMPDEST PUSH2 0xEF6 PUSH2 0x815 JUMP JUMPDEST PUSH2 0xF00 SWAP2 SWAP1 PUSH2 0x2240 JUMP JUMPDEST DUP5 DUP7 PUSH2 0x13DC SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xF2E DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1431 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xF3F DUP3 PUSH1 0x1 PUSH2 0x136A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xF51 DUP5 DUP5 PUSH2 0xE2E JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0xFD2 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xFC3 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFBA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2273 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFD1 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x1431 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1048 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x103F SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x10B8 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10AF SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x10C3 DUP4 DUP4 DUP4 PUSH2 0x1600 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x10D7 DUP4 PUSH2 0x8AC JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0x1122 JUMPI DUP3 DUP5 DUP3 PUSH1 0x40 MLOAD PUSH32 0x79012FB200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1119 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2273 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x112C DUP6 PUSH2 0xEB0 JUMP JUMPDEST SWAP1 POP PUSH2 0x1141 PUSH2 0x1139 PUSH2 0xF1A JUMP JUMPDEST DUP6 DUP8 DUP5 PUSH2 0x114C JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1178 PUSH32 0x0 DUP6 ADDRESS DUP6 PUSH2 0x1819 JUMP JUMPDEST PUSH2 0x1182 DUP4 DUP3 PUSH2 0x189B JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDCBC1C05240F31FF3AD067EF1EE35CE4997762752E3A095284754544F4C709D7 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x11E1 SWAP3 SWAP2 SWAP1 PUSH2 0x2517 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x11FA DUP4 PUSH2 0xDA7 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 GT ISZERO PUSH2 0x1245 JUMPI DUP3 DUP6 DUP3 PUSH1 0x40 MLOAD PUSH32 0xFE9CCEEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x123C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2273 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x124F DUP7 PUSH2 0x79F JUMP JUMPDEST SWAP1 POP PUSH2 0x1265 PUSH2 0x125C PUSH2 0xF1A JUMP JUMPDEST DUP7 DUP7 DUP10 DUP6 PUSH2 0x1271 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12B0 JUMPI PUSH2 0x12AF DUP4 DUP7 DUP4 PUSH2 0xF46 JUMP JUMPDEST JUMPDEST PUSH2 0x12BA DUP4 DUP3 PUSH2 0x191A JUMP JUMPDEST PUSH2 0x12E5 PUSH32 0x0 DUP6 DUP5 PUSH2 0x1999 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFBDE797D201C681B91056529119E0B02407C7BB96A4A2C75C01FC9667232C8DB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x135B SWAP3 SWAP2 SWAP1 PUSH2 0x2517 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x13BA PUSH2 0x1376 PUSH2 0x10C8 JUMP JUMPDEST PUSH1 0xA PUSH2 0x1382 SWAP2 SWAP1 PUSH2 0x24CD JUMP JUMPDEST PUSH2 0x138A PUSH2 0x815 JUMP JUMPDEST PUSH2 0x1394 SWAP2 SWAP1 PUSH2 0x2240 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x139E PUSH2 0x63D JUMP JUMPDEST PUSH2 0x13A8 SWAP2 SWAP1 PUSH2 0x2240 JUMP JUMPDEST DUP5 DUP7 PUSH2 0x13DC SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x13D5 PUSH2 0x13CF DUP4 PUSH2 0x9A0 JUMP JUMPDEST PUSH0 PUSH2 0xEC2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x13E9 DUP7 DUP7 DUP7 PUSH2 0x1A18 JUMP JUMPDEST SWAP1 POP PUSH2 0x13F4 DUP4 PUSH2 0x1B17 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1410 JUMPI POP PUSH0 DUP5 DUP1 PUSH2 0x140B JUMPI PUSH2 0x140A PUSH2 0x253E JUMP JUMPDEST JUMPDEST DUP7 DUP9 MULMOD GT JUMPDEST ISZERO PUSH2 0x1425 JUMPI PUSH1 0x1 DUP2 PUSH2 0x1422 SWAP2 SWAP1 PUSH2 0x2240 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x14A1 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1498 SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1511 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1508 SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x15FA JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x15F1 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1650 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1644 SWAP2 SWAP1 PUSH2 0x2240 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x171E JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x16D9 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16D0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2273 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1765 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x17AF JUMP JUMPDEST DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x180C SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1895 DUP5 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x184E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x256B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1B44 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x190B JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1902 SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1916 PUSH0 DUP4 DUP4 PUSH2 0x1600 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x198A JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1981 SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1995 DUP3 PUSH0 DUP4 PUSH2 0x1600 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1A13 DUP4 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x19CC SWAP3 SWAP2 SWAP1 PUSH2 0x25A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1B44 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP1 DUP4 DUP6 MUL SWAP1 POP PUSH0 DUP1 NOT DUP6 DUP8 MULMOD DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH0 DUP2 SUB PUSH2 0x1A50 JUMPI DUP4 DUP3 DUP2 PUSH2 0x1A46 JUMPI PUSH2 0x1A45 PUSH2 0x253E JUMP JUMPDEST JUMPDEST DIV SWAP3 POP POP POP PUSH2 0x1B10 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x1A89 JUMPI PUSH1 0x40 MLOAD PUSH32 0x227BC15300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP5 DUP7 DUP9 MULMOD SWAP1 POP DUP3 DUP2 GT DUP3 SUB SWAP2 POP DUP1 DUP4 SUB SWAP3 POP PUSH0 DUP6 PUSH0 SUB DUP7 AND SWAP1 POP DUP1 DUP7 DIV SWAP6 POP DUP1 DUP5 DIV SWAP4 POP PUSH1 0x1 DUP2 DUP3 PUSH0 SUB DIV ADD SWAP1 POP DUP1 DUP4 MUL DUP5 OR SWAP4 POP PUSH0 PUSH1 0x2 DUP8 PUSH1 0x3 MUL XOR SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP6 MUL SWAP6 POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x2 DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B2F JUMPI PUSH2 0x1B2E PUSH2 0x25C7 JUMP JUMPDEST JUMPDEST PUSH2 0x1B39 SWAP2 SWAP1 PUSH2 0x25F4 JUMP JUMPDEST PUSH1 0xFF AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1B6E DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BD9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD EQ ISZERO DUP1 ISZERO PUSH2 0x1B92 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1B90 SWAP2 SWAP1 PUSH2 0x264E JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1BD4 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BCB SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1BE6 DUP4 DUP4 PUSH0 PUSH2 0x1BEE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 SELFBALANCE LT ISZERO PUSH2 0x1C35 JUMPI ADDRESS PUSH1 0x40 MLOAD PUSH32 0xCD78605900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C2C SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1C5D SWAP2 SWAP1 PUSH2 0x26BD JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x1C97 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1C9C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1CAC DUP7 DUP4 DUP4 PUSH2 0x1CB7 JUMP JUMPDEST SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x1CCC JUMPI PUSH2 0x1CC7 DUP3 PUSH2 0x1D44 JUMP JUMPDEST PUSH2 0x1D3C JUMP JUMPDEST PUSH0 DUP3 MLOAD EQ DUP1 ISZERO PUSH2 0x1CF2 JUMPI POP PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST ISZERO PUSH2 0x1D34 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D2B SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP PUSH2 0x1D3D JUMP JUMPDEST JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD GT ISZERO PUSH2 0x1D56 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1D9A DUP2 PUSH2 0x1D88 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DB3 PUSH0 DUP4 ADD DUP5 PUSH2 0x1D91 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1DFB DUP3 PUSH2 0x1DB9 JUMP JUMPDEST PUSH2 0x1E05 DUP2 DUP6 PUSH2 0x1DC3 JUMP JUMPDEST SWAP4 POP PUSH2 0x1E15 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1DD3 JUMP JUMPDEST PUSH2 0x1E1E DUP2 PUSH2 0x1DE1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1E41 DUP2 DUP5 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1E56 DUP2 PUSH2 0x1D88 JUMP JUMPDEST DUP2 EQ PUSH2 0x1E60 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E71 DUP2 PUSH2 0x1E4D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E8C JUMPI PUSH2 0x1E8B PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1E99 DUP5 DUP3 DUP6 ADD PUSH2 0x1E63 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1ECB DUP3 PUSH2 0x1EA2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1EDB DUP2 PUSH2 0x1EC1 JUMP JUMPDEST DUP2 EQ PUSH2 0x1EE5 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1EF6 DUP2 PUSH2 0x1ED2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F12 JUMPI PUSH2 0x1F11 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1F1F DUP6 DUP3 DUP7 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1F30 DUP6 DUP3 DUP7 ADD PUSH2 0x1E63 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F4E DUP2 PUSH2 0x1F3A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1F67 PUSH0 DUP4 ADD DUP5 PUSH2 0x1F45 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F84 JUMPI PUSH2 0x1F83 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1F91 DUP7 DUP3 DUP8 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1FA2 DUP7 DUP3 DUP8 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1FB3 DUP7 DUP3 DUP8 ADD PUSH2 0x1E63 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FD2 DUP2 PUSH2 0x1FBD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1FEB PUSH0 DUP4 ADD DUP5 PUSH2 0x1FC9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1FFA DUP2 PUSH2 0x1EC1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2013 PUSH0 DUP4 ADD DUP5 PUSH2 0x1FF1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x202E JUMPI PUSH2 0x202D PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x203B DUP5 DUP3 DUP6 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x205A JUMPI PUSH2 0x2059 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2067 DUP6 DUP3 DUP7 ADD PUSH2 0x1E63 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2078 DUP6 DUP3 DUP7 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2099 JUMPI PUSH2 0x2098 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x20A6 DUP7 DUP3 DUP8 ADD PUSH2 0x1E63 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x20B7 DUP7 DUP3 DUP8 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x20C8 DUP7 DUP3 DUP8 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20E8 JUMPI PUSH2 0x20E7 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x20F5 DUP6 DUP3 DUP7 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2106 DUP6 DUP3 DUP7 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x211E DUP2 PUSH2 0x1E4D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2139 JUMPI PUSH2 0x2138 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2146 DUP5 DUP3 DUP6 ADD PUSH2 0x2110 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2193 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x21A6 JUMPI PUSH2 0x21A5 PUSH2 0x214F JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x21E3 DUP3 PUSH2 0x1D88 JUMP JUMPDEST SWAP2 POP PUSH2 0x21EE DUP4 PUSH2 0x1D88 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2206 JUMPI PUSH2 0x2205 PUSH2 0x21AC JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2216 DUP3 PUSH2 0x1FBD JUMP JUMPDEST SWAP2 POP PUSH2 0x2221 DUP4 PUSH2 0x1FBD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH1 0xFF DUP2 GT ISZERO PUSH2 0x223A JUMPI PUSH2 0x2239 PUSH2 0x21AC JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x224A DUP3 PUSH2 0x1D88 JUMP JUMPDEST SWAP2 POP PUSH2 0x2255 DUP4 PUSH2 0x1D88 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x226D JUMPI PUSH2 0x226C PUSH2 0x21AC JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2286 PUSH0 DUP4 ADD DUP7 PUSH2 0x1FF1 JUMP JUMPDEST PUSH2 0x2293 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1D91 JUMP JUMPDEST PUSH2 0x22A0 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1D91 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x45786365656473206D617820776974686472617720616D6F756E740000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x22DC PUSH1 0x1B DUP4 PUSH2 0x1DC3 JUMP JUMPDEST SWAP2 POP PUSH2 0x22E7 DUP3 PUSH2 0x22A8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x2309 DUP2 PUSH2 0x22D0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207769746864726177206C6F636B656420636F6C6C6174657261 PUSH0 DUP3 ADD MSTORE PUSH32 0x6C00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x236A PUSH1 0x21 DUP4 PUSH2 0x1DC3 JUMP JUMPDEST SWAP2 POP PUSH2 0x2375 DUP3 PUSH2 0x2310 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x2397 DUP2 PUSH2 0x235E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0x23F3 JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0x23CF JUMPI PUSH2 0x23CE PUSH2 0x21AC JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x23DE JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0x23EC DUP6 PUSH2 0x239E JUMP JUMPDEST SWAP5 POP PUSH2 0x23B3 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x240B JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x24C6 JUMP JUMPDEST DUP2 PUSH2 0x2418 JUMPI PUSH0 SWAP1 POP PUSH2 0x24C6 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x242E JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x2438 JUMPI PUSH2 0x2467 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x24C6 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x244A JUMPI PUSH2 0x2449 PUSH2 0x21AC JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x2461 JUMPI PUSH2 0x2460 PUSH2 0x21AC JUMP JUMPDEST JUMPDEST POP PUSH2 0x24C6 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x249C JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x2497 JUMPI PUSH2 0x2496 PUSH2 0x21AC JUMP JUMPDEST JUMPDEST PUSH2 0x24C6 JUMP JUMPDEST PUSH2 0x24A9 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x23AA JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x24C0 JUMPI PUSH2 0x24BF PUSH2 0x21AC JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x24D7 DUP3 PUSH2 0x1D88 JUMP JUMPDEST SWAP2 POP PUSH2 0x24E2 DUP4 PUSH2 0x1FBD JUMP JUMPDEST SWAP3 POP PUSH2 0x250F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0x23FC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x252A PUSH0 DUP4 ADD DUP6 PUSH2 0x1D91 JUMP JUMPDEST PUSH2 0x2537 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D91 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x257E PUSH0 DUP4 ADD DUP7 PUSH2 0x1FF1 JUMP JUMPDEST PUSH2 0x258B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1FF1 JUMP JUMPDEST PUSH2 0x2598 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1D91 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x25B3 PUSH0 DUP4 ADD DUP6 PUSH2 0x1FF1 JUMP JUMPDEST PUSH2 0x25C0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D91 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x25FE DUP3 PUSH2 0x1FBD JUMP JUMPDEST SWAP2 POP PUSH2 0x2609 DUP4 PUSH2 0x1FBD JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2619 JUMPI PUSH2 0x2618 PUSH2 0x253E JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x262D DUP2 PUSH2 0x1F3A JUMP JUMPDEST DUP2 EQ PUSH2 0x2637 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x2648 DUP2 PUSH2 0x2624 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2663 JUMPI PUSH2 0x2662 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2670 DUP5 DUP3 DUP6 ADD PUSH2 0x263A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2697 DUP3 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0x26A1 DUP2 DUP6 PUSH2 0x2683 JUMP JUMPDEST SWAP4 POP PUSH2 0x26B1 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1DD3 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x26C8 DUP3 DUP5 PUSH2 0x268D JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 SWAP11 TLOAD 0xD3 0x26 TLOAD 0xB0 ADDMOD STOP 0x22 MUL BASEFEE CREATE DUP6 0xC7 EXTCODEHASH KECCAK256 SUB 0xB7 CALLDATACOPY GASPRICE SELFDESTRUCT 0xBA NOT LOG4 0xB3 MULMOD MSTORE8 PUSH31 0x87B0D64736F6C634300081A00330000000000000000000000000000000000 ",
							"sourceMap": "193:2642:11:-:0;;;603:98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;653:13;1896:113:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1970:5;1962;:13;;;;;;:::i;:::-;;1995:7;1985;:17;;;;;;:::i;:::-;;1896:113;;4203:12:4;4217:19;4240:28;4261:6;4240:20;;;:28;;:::i;:::-;4202:66;;;;4300:7;:28;;4326:2;4300:28;;;4310:13;4300:28;4278:50;;;;;;;;;;4347:6;4338:15;;;;;;;;;;4192:168;;4165:195;603:98:11;193:2642;;4503:533:4;4570:4;4576:5;4594:12;4608:28;4648:6;4640:26;;4680:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4640:93;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4593:140;;;;4747:7;:39;;;;;4784:2;4758:15;:22;:28;;4747:39;4743:260;;;4802:24;4840:15;4829:38;;;;;;;;;;;;:::i;:::-;4802:65;;4905:15;4885:35;;:16;:35;4881:112;;4948:4;4960:16;4940:38;;;;;;;;;4881:112;4788:215;4743:260;5020:5;5027:1;5012:17;;;;;;4503:533;;;;:::o;88:117:12:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;1202:99::-;1254:6;1288:5;1282:12;1272:22;;1202:99;;;:::o;1307:180::-;1355:77;1352:1;1345:88;1452:4;1449:1;1442:15;1476:4;1473:1;1466:15;1493:180;1541:77;1538:1;1531:88;1638:4;1635:1;1628:15;1662:4;1659:1;1652:15;1679:320;1723:6;1760:1;1754:4;1750:12;1740:22;;1807:1;1801:4;1797:12;1828:18;1818:81;;1884:4;1876:6;1872:17;1862:27;;1818:81;1946:2;1938:6;1935:14;1915:18;1912:38;1909:84;;1965:18;;:::i;:::-;1909:84;1730:269;1679:320;;;:::o;2005:141::-;2054:4;2077:3;2069:11;;2100:3;2097:1;2090:14;2134:4;2131:1;2121:18;2113:26;;2005:141;;;:::o;2152:93::-;2189:6;2236:2;2231;2224:5;2220:14;2216:23;2206:33;;2152:93;;;:::o;2251:107::-;2295:8;2345:5;2339:4;2335:16;2314:37;;2251:107;;;;:::o;2364:393::-;2433:6;2483:1;2471:10;2467:18;2506:97;2536:66;2525:9;2506:97;:::i;:::-;2624:39;2654:8;2643:9;2624:39;:::i;:::-;2612:51;;2696:4;2692:9;2685:5;2681:21;2672:30;;2745:4;2735:8;2731:19;2724:5;2721:30;2711:40;;2440:317;;2364:393;;;;;:::o;2763:77::-;2800:7;2829:5;2818:16;;2763:77;;;:::o;2846:60::-;2874:3;2895:5;2888:12;;2846:60;;;:::o;2912:142::-;2962:9;2995:53;3013:34;3022:24;3040:5;3022:24;:::i;:::-;3013:34;:::i;:::-;2995:53;:::i;:::-;2982:66;;2912:142;;;:::o;3060:75::-;3103:3;3124:5;3117:12;;3060:75;;;:::o;3141:269::-;3251:39;3282:7;3251:39;:::i;:::-;3312:91;3361:41;3385:16;3361:41;:::i;:::-;3353:6;3346:4;3340:11;3312:91;:::i;:::-;3306:4;3299:105;3217:193;3141:269;;;:::o;3416:73::-;3461:3;3416:73;:::o;3495:189::-;3572:32;;:::i;:::-;3613:65;3671:6;3663;3657:4;3613:65;:::i;:::-;3548:136;3495:189;;:::o;3690:186::-;3750:120;3767:3;3760:5;3757:14;3750:120;;;3821:39;3858:1;3851:5;3821:39;:::i;:::-;3794:1;3787:5;3783:13;3774:22;;3750:120;;;3690:186;;:::o;3882:543::-;3983:2;3978:3;3975:11;3972:446;;;4017:38;4049:5;4017:38;:::i;:::-;4101:29;4119:10;4101:29;:::i;:::-;4091:8;4087:44;4284:2;4272:10;4269:18;4266:49;;;4305:8;4290:23;;4266:49;4328:80;4384:22;4402:3;4384:22;:::i;:::-;4374:8;4370:37;4357:11;4328:80;:::i;:::-;3987:431;;3972:446;3882:543;;;:::o;4431:117::-;4485:8;4535:5;4529:4;4525:16;4504:37;;4431:117;;;;:::o;4554:169::-;4598:6;4631:51;4679:1;4675:6;4667:5;4664:1;4660:13;4631:51;:::i;:::-;4627:56;4712:4;4706;4702:15;4692:25;;4605:118;4554:169;;;;:::o;4728:295::-;4804:4;4950:29;4975:3;4969:4;4950:29;:::i;:::-;4942:37;;5012:3;5009:1;5005:11;4999:4;4996:21;4988:29;;4728:295;;;;:::o;5028:1395::-;5145:37;5178:3;5145:37;:::i;:::-;5247:18;5239:6;5236:30;5233:56;;;5269:18;;:::i;:::-;5233:56;5313:38;5345:4;5339:11;5313:38;:::i;:::-;5398:67;5458:6;5450;5444:4;5398:67;:::i;:::-;5492:1;5516:4;5503:17;;5548:2;5540:6;5537:14;5565:1;5560:618;;;;6222:1;6239:6;6236:77;;;6288:9;6283:3;6279:19;6273:26;6264:35;;6236:77;6339:67;6399:6;6392:5;6339:67;:::i;:::-;6333:4;6326:81;6195:222;5530:887;;5560:618;5612:4;5608:9;5600:6;5596:22;5646:37;5678:4;5646:37;:::i;:::-;5705:1;5719:208;5733:7;5730:1;5727:14;5719:208;;;5812:9;5807:3;5803:19;5797:26;5789:6;5782:42;5863:1;5855:6;5851:14;5841:24;;5910:2;5899:9;5895:18;5882:31;;5756:4;5753:1;5749:12;5744:17;;5719:208;;;5955:6;5946:7;5943:19;5940:179;;;6013:9;6008:3;6004:19;5998:26;6056:48;6098:4;6090:6;6086:17;6075:9;6056:48;:::i;:::-;6048:6;6041:64;5963:156;5940:179;6165:1;6161;6153:6;6149:14;6145:22;6139:4;6132:36;5567:611;;;5530:887;;5120:1303;;;5028:1395;;:::o;6429:98::-;6480:6;6514:5;6508:12;6498:22;;6429:98;;;:::o;6533:147::-;6634:11;6671:3;6656:18;;6533:147;;;;:::o;6686:139::-;6775:6;6770:3;6765;6759:23;6816:1;6807:6;6802:3;6798:16;6791:27;6686:139;;;:::o;6831:386::-;6935:3;6963:38;6995:5;6963:38;:::i;:::-;7017:88;7098:6;7093:3;7017:88;:::i;:::-;7010:95;;7114:65;7172:6;7167:3;7160:4;7153:5;7149:16;7114:65;:::i;:::-;7204:6;7199:3;7195:16;7188:23;;6939:278;6831:386;;;;:::o;7223:271::-;7353:3;7375:93;7464:3;7455:6;7375:93;:::i;:::-;7368:100;;7485:3;7478:10;;7223:271;;;;:::o;7500:122::-;7573:24;7591:5;7573:24;:::i;:::-;7566:5;7563:35;7553:63;;7612:1;7609;7602:12;7553:63;7500:122;:::o;7628:143::-;7685:5;7716:6;7710:13;7701:22;;7732:33;7759:5;7732:33;:::i;:::-;7628:143;;;;:::o;7777:351::-;7847:6;7896:2;7884:9;7875:7;7871:23;7867:32;7864:119;;;7902:79;;:::i;:::-;7864:119;8022:1;8047:64;8103:7;8094:6;8083:9;8079:22;8047:64;:::i;:::-;8037:74;;7993:128;7777:351;;;;:::o;193:2642:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_approve_712": {
									"entryPoint": 3873,
									"id": 712,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_772": {
									"entryPoint": 5169,
									"id": 772,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_burn_694": {
									"entryPoint": 6426,
									"id": 694,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_callOptionalReturn_1886": {
									"entryPoint": 6980,
									"id": 1886,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_convertToAssets_1491": {
									"entryPoint": 3778,
									"id": 1491,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_convertToShares_1463": {
									"entryPoint": 4970,
									"id": 1463,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_decimalsOffset_1583": {
									"entryPoint": 4296,
									"id": 1583,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_deposit_1528": {
									"entryPoint": 4428,
									"id": 1528,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_mint_661": {
									"entryPoint": 6299,
									"id": 661,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_2201": {
									"entryPoint": 3866,
									"id": 2201,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_revert_2188": {
									"entryPoint": 7492,
									"id": 2188,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_spendAllowance_820": {
									"entryPoint": 3910,
									"id": 820,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_551": {
									"entryPoint": 4056,
									"id": 551,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_628": {
									"entryPoint": 5632,
									"id": 628,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_withdraw_1575": {
									"entryPoint": 4721,
									"id": 1575,
									"parameterSlots": 5,
									"returnSlots": 0
								},
								"@allowance_448": {
									"entryPoint": 3630,
									"id": 448,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_472": {
									"entryPoint": 1917,
									"id": 472,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@asset_1081": {
									"entryPoint": 2181,
									"id": 1081,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@balanceOf_407": {
									"entryPoint": 2464,
									"id": 407,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@convertToAssets_1128": {
									"entryPoint": 1899,
									"id": 1128,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@convertToShares_1112": {
									"entryPoint": 3477,
									"id": 1112,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_1069": {
									"entryPoint": 2124,
									"id": 1069,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@deposit_1297": {
									"entryPoint": 4300,
									"id": 1297,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@deposit_3344": {
									"entryPoint": 2279,
									"id": 3344,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@functionCallWithValue_2056": {
									"entryPoint": 7150,
									"id": 2056,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@functionCall_2010": {
									"entryPoint": 7129,
									"id": 2010,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@lockedCollateral_3283": {
									"entryPoint": 2533,
									"id": 3283,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@maxDeposit_1143": {
									"entryPoint": 2220,
									"id": 1143,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@maxMint_1158": {
									"entryPoint": 3436,
									"id": 1158,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@maxRedeem_1189": {
									"entryPoint": 3613,
									"id": 1189,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@maxWithdraw_1176": {
									"entryPoint": 5058,
									"id": 1176,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@maxWithdraw_3464": {
									"entryPoint": 3495,
									"id": 3464,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@mint_1341": {
									"entryPoint": 2554,
									"id": 1341,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@mulDiv_2607": {
									"entryPoint": 6680,
									"id": 2607,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@mulDiv_2650": {
									"entryPoint": 5084,
									"id": 2650,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@name_367": {
									"entryPoint": 1755,
									"id": 367,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@previewDeposit_1205": {
									"entryPoint": 3760,
									"id": 1205,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@previewMint_1221": {
									"entryPoint": 2897,
									"id": 1221,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@previewRedeem_1253": {
									"entryPoint": 2261,
									"id": 1253,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@previewWithdraw_1237": {
									"entryPoint": 3891,
									"id": 1237,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@previewWithdraw_3431": {
									"entryPoint": 1951,
									"id": 3431,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@redeem_1435": {
									"entryPoint": 3306,
									"id": 1435,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@safeTransferFrom_1723": {
									"entryPoint": 6169,
									"id": 1723,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@safeTransfer_1696": {
									"entryPoint": 6553,
									"id": 1696,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@symbol_376": {
									"entryPoint": 2682,
									"id": 376,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@tokenAddress_3285": {
									"entryPoint": 2826,
									"id": 3285,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@totalAssets_1096": {
									"entryPoint": 1597,
									"id": 1096,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_394": {
									"entryPoint": 2069,
									"id": 394,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_504": {
									"entryPoint": 2078,
									"id": 504,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_431": {
									"entryPoint": 2863,
									"id": 431,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@unsignedRoundsUp_3272": {
									"entryPoint": 6935,
									"id": 3272,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@verifyCallResultFromTarget_2148": {
									"entryPoint": 7351,
									"id": 2148,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@withdraw_1388": {
									"entryPoint": 4591,
									"id": 1388,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@withdraw_3397": {
									"entryPoint": 2916,
									"id": 3397,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 7912,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 9786,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 7779,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 8464,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 8217,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 8402,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 8045,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 7932,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 9806,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 7799,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 8484,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_address": {
									"entryPoint": 8260,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256t_addresst_address": {
									"entryPoint": 8322,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 8177,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 8005,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 9869,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7665,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_806ba8ee32c103c2a737750386240fe468a7ec44d5136f2c1c91c5d6ce999f73_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 9054,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_ef106c0bbb744e74987954b239ff90422a58d8a59de2058902bb4271029d7abf_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 8912,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 7569,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint8_to_t_uint8_fromStack": {
									"entryPoint": 8137,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 9917,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 8192,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 9579,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 9632,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 8819,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 8020,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7721,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_806ba8ee32c103c2a737750386240fe468a7ec44d5136f2c1c91c5d6ce999f73__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 9088,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ef106c0bbb744e74987954b239ff90422a58d8a59de2058902bb4271029d7abf__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 8946,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 7584,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 9495,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": 8152,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 9849,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 7609,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 9859,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 7619,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 8768,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint8": {
									"entryPoint": 8716,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 9130,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint8": {
									"entryPoint": 9421,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 9212,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 8665,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 7873,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 7994,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 7842,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 7560,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 8125,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 7635,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 8572,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mod_t_uint8": {
									"entryPoint": 9716,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 8620,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 9534,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x21": {
									"entryPoint": 9671,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 8527,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 7753,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 7649,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"shift_right_1_unsigned": {
									"entryPoint": 9118,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_806ba8ee32c103c2a737750386240fe468a7ec44d5136f2c1c91c5d6ce999f73": {
									"entryPoint": 8976,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_ef106c0bbb744e74987954b239ff90422a58d8a59de2058902bb4271029d7abf": {
									"entryPoint": 8872,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 7890,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 9764,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 7757,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:17138:12",
										"nodeType": "YulBlock",
										"src": "0:17138:12",
										"statements": [
											{
												"body": {
													"nativeSrc": "52:32:12",
													"nodeType": "YulBlock",
													"src": "52:32:12",
													"statements": [
														{
															"nativeSrc": "62:16:12",
															"nodeType": "YulAssignment",
															"src": "62:16:12",
															"value": {
																"name": "value",
																"nativeSrc": "73:5:12",
																"nodeType": "YulIdentifier",
																"src": "73:5:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "62:7:12",
																	"nodeType": "YulIdentifier",
																	"src": "62:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "7:77:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "34:5:12",
														"nodeType": "YulTypedName",
														"src": "34:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "44:7:12",
														"nodeType": "YulTypedName",
														"src": "44:7:12",
														"type": ""
													}
												],
												"src": "7:77:12"
											},
											{
												"body": {
													"nativeSrc": "155:53:12",
													"nodeType": "YulBlock",
													"src": "155:53:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "172:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "172:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "195:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "195:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nativeSrc": "177:17:12",
																			"nodeType": "YulIdentifier",
																			"src": "177:17:12"
																		},
																		"nativeSrc": "177:24:12",
																		"nodeType": "YulFunctionCall",
																		"src": "177:24:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "165:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "165:6:12"
																},
																"nativeSrc": "165:37:12",
																"nodeType": "YulFunctionCall",
																"src": "165:37:12"
															},
															"nativeSrc": "165:37:12",
															"nodeType": "YulExpressionStatement",
															"src": "165:37:12"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "90:118:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "143:5:12",
														"nodeType": "YulTypedName",
														"src": "143:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "150:3:12",
														"nodeType": "YulTypedName",
														"src": "150:3:12",
														"type": ""
													}
												],
												"src": "90:118:12"
											},
											{
												"body": {
													"nativeSrc": "312:124:12",
													"nodeType": "YulBlock",
													"src": "312:124:12",
													"statements": [
														{
															"nativeSrc": "322:26:12",
															"nodeType": "YulAssignment",
															"src": "322:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "334:9:12",
																		"nodeType": "YulIdentifier",
																		"src": "334:9:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "345:2:12",
																		"nodeType": "YulLiteral",
																		"src": "345:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "330:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "330:3:12"
																},
																"nativeSrc": "330:18:12",
																"nodeType": "YulFunctionCall",
																"src": "330:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "322:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "322:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "402:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "402:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "415:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "415:9:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "426:1:12",
																				"nodeType": "YulLiteral",
																				"src": "426:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "411:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "411:3:12"
																		},
																		"nativeSrc": "411:17:12",
																		"nodeType": "YulFunctionCall",
																		"src": "411:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "358:43:12",
																	"nodeType": "YulIdentifier",
																	"src": "358:43:12"
																},
																"nativeSrc": "358:71:12",
																"nodeType": "YulFunctionCall",
																"src": "358:71:12"
															},
															"nativeSrc": "358:71:12",
															"nodeType": "YulExpressionStatement",
															"src": "358:71:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "214:222:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "284:9:12",
														"nodeType": "YulTypedName",
														"src": "284:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "296:6:12",
														"nodeType": "YulTypedName",
														"src": "296:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "307:4:12",
														"nodeType": "YulTypedName",
														"src": "307:4:12",
														"type": ""
													}
												],
												"src": "214:222:12"
											},
											{
												"body": {
													"nativeSrc": "501:40:12",
													"nodeType": "YulBlock",
													"src": "501:40:12",
													"statements": [
														{
															"nativeSrc": "512:22:12",
															"nodeType": "YulAssignment",
															"src": "512:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "528:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "528:5:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "522:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "522:5:12"
																},
																"nativeSrc": "522:12:12",
																"nodeType": "YulFunctionCall",
																"src": "522:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "512:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "512:6:12"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "442:99:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "484:5:12",
														"nodeType": "YulTypedName",
														"src": "484:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "494:6:12",
														"nodeType": "YulTypedName",
														"src": "494:6:12",
														"type": ""
													}
												],
												"src": "442:99:12"
											},
											{
												"body": {
													"nativeSrc": "643:73:12",
													"nodeType": "YulBlock",
													"src": "643:73:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "660:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "660:3:12"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "665:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "665:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "653:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "653:6:12"
																},
																"nativeSrc": "653:19:12",
																"nodeType": "YulFunctionCall",
																"src": "653:19:12"
															},
															"nativeSrc": "653:19:12",
															"nodeType": "YulExpressionStatement",
															"src": "653:19:12"
														},
														{
															"nativeSrc": "681:29:12",
															"nodeType": "YulAssignment",
															"src": "681:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "700:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "700:3:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "705:4:12",
																		"nodeType": "YulLiteral",
																		"src": "705:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "696:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "696:3:12"
																},
																"nativeSrc": "696:14:12",
																"nodeType": "YulFunctionCall",
																"src": "696:14:12"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "681:11:12",
																	"nodeType": "YulIdentifier",
																	"src": "681:11:12"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "547:169:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "615:3:12",
														"nodeType": "YulTypedName",
														"src": "615:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "620:6:12",
														"nodeType": "YulTypedName",
														"src": "620:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "631:11:12",
														"nodeType": "YulTypedName",
														"src": "631:11:12",
														"type": ""
													}
												],
												"src": "547:169:12"
											},
											{
												"body": {
													"nativeSrc": "784:77:12",
													"nodeType": "YulBlock",
													"src": "784:77:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nativeSrc": "801:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "801:3:12"
																	},
																	{
																		"name": "src",
																		"nativeSrc": "806:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "806:3:12"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "811:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "811:6:12"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "795:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "795:5:12"
																},
																"nativeSrc": "795:23:12",
																"nodeType": "YulFunctionCall",
																"src": "795:23:12"
															},
															"nativeSrc": "795:23:12",
															"nodeType": "YulExpressionStatement",
															"src": "795:23:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nativeSrc": "838:3:12",
																				"nodeType": "YulIdentifier",
																				"src": "838:3:12"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "843:6:12",
																				"nodeType": "YulIdentifier",
																				"src": "843:6:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "834:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "834:3:12"
																		},
																		"nativeSrc": "834:16:12",
																		"nodeType": "YulFunctionCall",
																		"src": "834:16:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "852:1:12",
																		"nodeType": "YulLiteral",
																		"src": "852:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "827:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "827:6:12"
																},
																"nativeSrc": "827:27:12",
																"nodeType": "YulFunctionCall",
																"src": "827:27:12"
															},
															"nativeSrc": "827:27:12",
															"nodeType": "YulExpressionStatement",
															"src": "827:27:12"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "722:139:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "766:3:12",
														"nodeType": "YulTypedName",
														"src": "766:3:12",
														"type": ""
													},
													{
														"name": "dst",
														"nativeSrc": "771:3:12",
														"nodeType": "YulTypedName",
														"src": "771:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "776:6:12",
														"nodeType": "YulTypedName",
														"src": "776:6:12",
														"type": ""
													}
												],
												"src": "722:139:12"
											},
											{
												"body": {
													"nativeSrc": "915:54:12",
													"nodeType": "YulBlock",
													"src": "915:54:12",
													"statements": [
														{
															"nativeSrc": "925:38:12",
															"nodeType": "YulAssignment",
															"src": "925:38:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "943:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "943:5:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "950:2:12",
																				"nodeType": "YulLiteral",
																				"src": "950:2:12",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "939:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "939:3:12"
																		},
																		"nativeSrc": "939:14:12",
																		"nodeType": "YulFunctionCall",
																		"src": "939:14:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "959:2:12",
																				"nodeType": "YulLiteral",
																				"src": "959:2:12",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "955:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "955:3:12"
																		},
																		"nativeSrc": "955:7:12",
																		"nodeType": "YulFunctionCall",
																		"src": "955:7:12"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "935:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "935:3:12"
																},
																"nativeSrc": "935:28:12",
																"nodeType": "YulFunctionCall",
																"src": "935:28:12"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "925:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "925:6:12"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nativeSrc": "867:102:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "898:5:12",
														"nodeType": "YulTypedName",
														"src": "898:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "908:6:12",
														"nodeType": "YulTypedName",
														"src": "908:6:12",
														"type": ""
													}
												],
												"src": "867:102:12"
											},
											{
												"body": {
													"nativeSrc": "1067:285:12",
													"nodeType": "YulBlock",
													"src": "1067:285:12",
													"statements": [
														{
															"nativeSrc": "1077:53:12",
															"nodeType": "YulVariableDeclaration",
															"src": "1077:53:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1124:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "1124:5:12"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "1091:32:12",
																	"nodeType": "YulIdentifier",
																	"src": "1091:32:12"
																},
																"nativeSrc": "1091:39:12",
																"nodeType": "YulFunctionCall",
																"src": "1091:39:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "1081:6:12",
																	"nodeType": "YulTypedName",
																	"src": "1081:6:12",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1139:78:12",
															"nodeType": "YulAssignment",
															"src": "1139:78:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "1205:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "1205:3:12"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "1210:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "1210:6:12"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "1146:58:12",
																	"nodeType": "YulIdentifier",
																	"src": "1146:58:12"
																},
																"nativeSrc": "1146:71:12",
																"nodeType": "YulFunctionCall",
																"src": "1146:71:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "1139:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "1139:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1265:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "1265:5:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1272:4:12",
																				"nodeType": "YulLiteral",
																				"src": "1272:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1261:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "1261:3:12"
																		},
																		"nativeSrc": "1261:16:12",
																		"nodeType": "YulFunctionCall",
																		"src": "1261:16:12"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "1279:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "1279:3:12"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "1284:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "1284:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "1226:34:12",
																	"nodeType": "YulIdentifier",
																	"src": "1226:34:12"
																},
																"nativeSrc": "1226:65:12",
																"nodeType": "YulFunctionCall",
																"src": "1226:65:12"
															},
															"nativeSrc": "1226:65:12",
															"nodeType": "YulExpressionStatement",
															"src": "1226:65:12"
														},
														{
															"nativeSrc": "1300:46:12",
															"nodeType": "YulAssignment",
															"src": "1300:46:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "1311:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "1311:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "1338:6:12",
																				"nodeType": "YulIdentifier",
																				"src": "1338:6:12"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nativeSrc": "1316:21:12",
																			"nodeType": "YulIdentifier",
																			"src": "1316:21:12"
																		},
																		"nativeSrc": "1316:29:12",
																		"nodeType": "YulFunctionCall",
																		"src": "1316:29:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1307:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "1307:3:12"
																},
																"nativeSrc": "1307:39:12",
																"nodeType": "YulFunctionCall",
																"src": "1307:39:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "1300:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "1300:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "975:377:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1048:5:12",
														"nodeType": "YulTypedName",
														"src": "1048:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "1055:3:12",
														"nodeType": "YulTypedName",
														"src": "1055:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "1063:3:12",
														"nodeType": "YulTypedName",
														"src": "1063:3:12",
														"type": ""
													}
												],
												"src": "975:377:12"
											},
											{
												"body": {
													"nativeSrc": "1476:195:12",
													"nodeType": "YulBlock",
													"src": "1476:195:12",
													"statements": [
														{
															"nativeSrc": "1486:26:12",
															"nodeType": "YulAssignment",
															"src": "1486:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1498:9:12",
																		"nodeType": "YulIdentifier",
																		"src": "1498:9:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1509:2:12",
																		"nodeType": "YulLiteral",
																		"src": "1509:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1494:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "1494:3:12"
																},
																"nativeSrc": "1494:18:12",
																"nodeType": "YulFunctionCall",
																"src": "1494:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1486:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "1486:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1533:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "1533:9:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1544:1:12",
																				"nodeType": "YulLiteral",
																				"src": "1544:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1529:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "1529:3:12"
																		},
																		"nativeSrc": "1529:17:12",
																		"nodeType": "YulFunctionCall",
																		"src": "1529:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "1552:4:12",
																				"nodeType": "YulIdentifier",
																				"src": "1552:4:12"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1558:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "1558:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1548:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "1548:3:12"
																		},
																		"nativeSrc": "1548:20:12",
																		"nodeType": "YulFunctionCall",
																		"src": "1548:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1522:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "1522:6:12"
																},
																"nativeSrc": "1522:47:12",
																"nodeType": "YulFunctionCall",
																"src": "1522:47:12"
															},
															"nativeSrc": "1522:47:12",
															"nodeType": "YulExpressionStatement",
															"src": "1522:47:12"
														},
														{
															"nativeSrc": "1578:86:12",
															"nodeType": "YulAssignment",
															"src": "1578:86:12",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "1650:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "1650:6:12"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "1659:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "1659:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "1586:63:12",
																	"nodeType": "YulIdentifier",
																	"src": "1586:63:12"
																},
																"nativeSrc": "1586:78:12",
																"nodeType": "YulFunctionCall",
																"src": "1586:78:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1578:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "1578:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "1358:313:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1448:9:12",
														"nodeType": "YulTypedName",
														"src": "1448:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1460:6:12",
														"nodeType": "YulTypedName",
														"src": "1460:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1471:4:12",
														"nodeType": "YulTypedName",
														"src": "1471:4:12",
														"type": ""
													}
												],
												"src": "1358:313:12"
											},
											{
												"body": {
													"nativeSrc": "1717:35:12",
													"nodeType": "YulBlock",
													"src": "1717:35:12",
													"statements": [
														{
															"nativeSrc": "1727:19:12",
															"nodeType": "YulAssignment",
															"src": "1727:19:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1743:2:12",
																		"nodeType": "YulLiteral",
																		"src": "1743:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1737:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "1737:5:12"
																},
																"nativeSrc": "1737:9:12",
																"nodeType": "YulFunctionCall",
																"src": "1737:9:12"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "1727:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "1727:6:12"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "1677:75:12",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "1710:6:12",
														"nodeType": "YulTypedName",
														"src": "1710:6:12",
														"type": ""
													}
												],
												"src": "1677:75:12"
											},
											{
												"body": {
													"nativeSrc": "1847:28:12",
													"nodeType": "YulBlock",
													"src": "1847:28:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1864:1:12",
																		"nodeType": "YulLiteral",
																		"src": "1864:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1867:1:12",
																		"nodeType": "YulLiteral",
																		"src": "1867:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1857:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "1857:6:12"
																},
																"nativeSrc": "1857:12:12",
																"nodeType": "YulFunctionCall",
																"src": "1857:12:12"
															},
															"nativeSrc": "1857:12:12",
															"nodeType": "YulExpressionStatement",
															"src": "1857:12:12"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "1758:117:12",
												"nodeType": "YulFunctionDefinition",
												"src": "1758:117:12"
											},
											{
												"body": {
													"nativeSrc": "1970:28:12",
													"nodeType": "YulBlock",
													"src": "1970:28:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1987:1:12",
																		"nodeType": "YulLiteral",
																		"src": "1987:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1990:1:12",
																		"nodeType": "YulLiteral",
																		"src": "1990:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1980:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "1980:6:12"
																},
																"nativeSrc": "1980:12:12",
																"nodeType": "YulFunctionCall",
																"src": "1980:12:12"
															},
															"nativeSrc": "1980:12:12",
															"nodeType": "YulExpressionStatement",
															"src": "1980:12:12"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "1881:117:12",
												"nodeType": "YulFunctionDefinition",
												"src": "1881:117:12"
											},
											{
												"body": {
													"nativeSrc": "2047:79:12",
													"nodeType": "YulBlock",
													"src": "2047:79:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "2104:16:12",
																"nodeType": "YulBlock",
																"src": "2104:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2113:1:12",
																					"nodeType": "YulLiteral",
																					"src": "2113:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2116:1:12",
																					"nodeType": "YulLiteral",
																					"src": "2116:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2106:6:12",
																				"nodeType": "YulIdentifier",
																				"src": "2106:6:12"
																			},
																			"nativeSrc": "2106:12:12",
																			"nodeType": "YulFunctionCall",
																			"src": "2106:12:12"
																		},
																		"nativeSrc": "2106:12:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "2106:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2070:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "2070:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "2095:5:12",
																						"nodeType": "YulIdentifier",
																						"src": "2095:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "2077:17:12",
																					"nodeType": "YulIdentifier",
																					"src": "2077:17:12"
																				},
																				"nativeSrc": "2077:24:12",
																				"nodeType": "YulFunctionCall",
																				"src": "2077:24:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "2067:2:12",
																			"nodeType": "YulIdentifier",
																			"src": "2067:2:12"
																		},
																		"nativeSrc": "2067:35:12",
																		"nodeType": "YulFunctionCall",
																		"src": "2067:35:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2060:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "2060:6:12"
																},
																"nativeSrc": "2060:43:12",
																"nodeType": "YulFunctionCall",
																"src": "2060:43:12"
															},
															"nativeSrc": "2057:63:12",
															"nodeType": "YulIf",
															"src": "2057:63:12"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nativeSrc": "2004:122:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2040:5:12",
														"nodeType": "YulTypedName",
														"src": "2040:5:12",
														"type": ""
													}
												],
												"src": "2004:122:12"
											},
											{
												"body": {
													"nativeSrc": "2184:87:12",
													"nodeType": "YulBlock",
													"src": "2184:87:12",
													"statements": [
														{
															"nativeSrc": "2194:29:12",
															"nodeType": "YulAssignment",
															"src": "2194:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2216:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "2216:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2203:12:12",
																	"nodeType": "YulIdentifier",
																	"src": "2203:12:12"
																},
																"nativeSrc": "2203:20:12",
																"nodeType": "YulFunctionCall",
																"src": "2203:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2194:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "2194:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2259:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "2259:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "2232:26:12",
																	"nodeType": "YulIdentifier",
																	"src": "2232:26:12"
																},
																"nativeSrc": "2232:33:12",
																"nodeType": "YulFunctionCall",
																"src": "2232:33:12"
															},
															"nativeSrc": "2232:33:12",
															"nodeType": "YulExpressionStatement",
															"src": "2232:33:12"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nativeSrc": "2132:139:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "2162:6:12",
														"nodeType": "YulTypedName",
														"src": "2162:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "2170:3:12",
														"nodeType": "YulTypedName",
														"src": "2170:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "2178:5:12",
														"nodeType": "YulTypedName",
														"src": "2178:5:12",
														"type": ""
													}
												],
												"src": "2132:139:12"
											},
											{
												"body": {
													"nativeSrc": "2343:263:12",
													"nodeType": "YulBlock",
													"src": "2343:263:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "2389:83:12",
																"nodeType": "YulBlock",
																"src": "2389:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "2391:77:12",
																				"nodeType": "YulIdentifier",
																				"src": "2391:77:12"
																			},
																			"nativeSrc": "2391:79:12",
																			"nodeType": "YulFunctionCall",
																			"src": "2391:79:12"
																		},
																		"nativeSrc": "2391:79:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "2391:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2364:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "2364:7:12"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2373:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "2373:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2360:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "2360:3:12"
																		},
																		"nativeSrc": "2360:23:12",
																		"nodeType": "YulFunctionCall",
																		"src": "2360:23:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2385:2:12",
																		"nodeType": "YulLiteral",
																		"src": "2385:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2356:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "2356:3:12"
																},
																"nativeSrc": "2356:32:12",
																"nodeType": "YulFunctionCall",
																"src": "2356:32:12"
															},
															"nativeSrc": "2353:119:12",
															"nodeType": "YulIf",
															"src": "2353:119:12"
														},
														{
															"nativeSrc": "2482:117:12",
															"nodeType": "YulBlock",
															"src": "2482:117:12",
															"statements": [
																{
																	"nativeSrc": "2497:15:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2497:15:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2511:1:12",
																		"nodeType": "YulLiteral",
																		"src": "2511:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2501:6:12",
																			"nodeType": "YulTypedName",
																			"src": "2501:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "2526:63:12",
																	"nodeType": "YulAssignment",
																	"src": "2526:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2561:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "2561:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "2572:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "2572:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2557:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "2557:3:12"
																				},
																				"nativeSrc": "2557:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "2557:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2581:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "2581:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "2536:20:12",
																			"nodeType": "YulIdentifier",
																			"src": "2536:20:12"
																		},
																		"nativeSrc": "2536:53:12",
																		"nodeType": "YulFunctionCall",
																		"src": "2536:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "2526:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "2526:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "2277:329:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2313:9:12",
														"nodeType": "YulTypedName",
														"src": "2313:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2324:7:12",
														"nodeType": "YulTypedName",
														"src": "2324:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2336:6:12",
														"nodeType": "YulTypedName",
														"src": "2336:6:12",
														"type": ""
													}
												],
												"src": "2277:329:12"
											},
											{
												"body": {
													"nativeSrc": "2657:81:12",
													"nodeType": "YulBlock",
													"src": "2657:81:12",
													"statements": [
														{
															"nativeSrc": "2667:65:12",
															"nodeType": "YulAssignment",
															"src": "2667:65:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2682:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "2682:5:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2689:42:12",
																		"nodeType": "YulLiteral",
																		"src": "2689:42:12",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "2678:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "2678:3:12"
																},
																"nativeSrc": "2678:54:12",
																"nodeType": "YulFunctionCall",
																"src": "2678:54:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2667:7:12",
																	"nodeType": "YulIdentifier",
																	"src": "2667:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "2612:126:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2639:5:12",
														"nodeType": "YulTypedName",
														"src": "2639:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2649:7:12",
														"nodeType": "YulTypedName",
														"src": "2649:7:12",
														"type": ""
													}
												],
												"src": "2612:126:12"
											},
											{
												"body": {
													"nativeSrc": "2789:51:12",
													"nodeType": "YulBlock",
													"src": "2789:51:12",
													"statements": [
														{
															"nativeSrc": "2799:35:12",
															"nodeType": "YulAssignment",
															"src": "2799:35:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2828:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "2828:5:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "2810:17:12",
																	"nodeType": "YulIdentifier",
																	"src": "2810:17:12"
																},
																"nativeSrc": "2810:24:12",
																"nodeType": "YulFunctionCall",
																"src": "2810:24:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2799:7:12",
																	"nodeType": "YulIdentifier",
																	"src": "2799:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "2744:96:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2771:5:12",
														"nodeType": "YulTypedName",
														"src": "2771:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2781:7:12",
														"nodeType": "YulTypedName",
														"src": "2781:7:12",
														"type": ""
													}
												],
												"src": "2744:96:12"
											},
											{
												"body": {
													"nativeSrc": "2889:79:12",
													"nodeType": "YulBlock",
													"src": "2889:79:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "2946:16:12",
																"nodeType": "YulBlock",
																"src": "2946:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2955:1:12",
																					"nodeType": "YulLiteral",
																					"src": "2955:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2958:1:12",
																					"nodeType": "YulLiteral",
																					"src": "2958:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2948:6:12",
																				"nodeType": "YulIdentifier",
																				"src": "2948:6:12"
																			},
																			"nativeSrc": "2948:12:12",
																			"nodeType": "YulFunctionCall",
																			"src": "2948:12:12"
																		},
																		"nativeSrc": "2948:12:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "2948:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2912:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "2912:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "2937:5:12",
																						"nodeType": "YulIdentifier",
																						"src": "2937:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "2919:17:12",
																					"nodeType": "YulIdentifier",
																					"src": "2919:17:12"
																				},
																				"nativeSrc": "2919:24:12",
																				"nodeType": "YulFunctionCall",
																				"src": "2919:24:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "2909:2:12",
																			"nodeType": "YulIdentifier",
																			"src": "2909:2:12"
																		},
																		"nativeSrc": "2909:35:12",
																		"nodeType": "YulFunctionCall",
																		"src": "2909:35:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2902:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "2902:6:12"
																},
																"nativeSrc": "2902:43:12",
																"nodeType": "YulFunctionCall",
																"src": "2902:43:12"
															},
															"nativeSrc": "2899:63:12",
															"nodeType": "YulIf",
															"src": "2899:63:12"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "2846:122:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2882:5:12",
														"nodeType": "YulTypedName",
														"src": "2882:5:12",
														"type": ""
													}
												],
												"src": "2846:122:12"
											},
											{
												"body": {
													"nativeSrc": "3026:87:12",
													"nodeType": "YulBlock",
													"src": "3026:87:12",
													"statements": [
														{
															"nativeSrc": "3036:29:12",
															"nodeType": "YulAssignment",
															"src": "3036:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "3058:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "3058:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "3045:12:12",
																	"nodeType": "YulIdentifier",
																	"src": "3045:12:12"
																},
																"nativeSrc": "3045:20:12",
																"nodeType": "YulFunctionCall",
																"src": "3045:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "3036:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "3036:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "3101:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "3101:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "3074:26:12",
																	"nodeType": "YulIdentifier",
																	"src": "3074:26:12"
																},
																"nativeSrc": "3074:33:12",
																"nodeType": "YulFunctionCall",
																"src": "3074:33:12"
															},
															"nativeSrc": "3074:33:12",
															"nodeType": "YulExpressionStatement",
															"src": "3074:33:12"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nativeSrc": "2974:139:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "3004:6:12",
														"nodeType": "YulTypedName",
														"src": "3004:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "3012:3:12",
														"nodeType": "YulTypedName",
														"src": "3012:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "3020:5:12",
														"nodeType": "YulTypedName",
														"src": "3020:5:12",
														"type": ""
													}
												],
												"src": "2974:139:12"
											},
											{
												"body": {
													"nativeSrc": "3202:391:12",
													"nodeType": "YulBlock",
													"src": "3202:391:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "3248:83:12",
																"nodeType": "YulBlock",
																"src": "3248:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "3250:77:12",
																				"nodeType": "YulIdentifier",
																				"src": "3250:77:12"
																			},
																			"nativeSrc": "3250:79:12",
																			"nodeType": "YulFunctionCall",
																			"src": "3250:79:12"
																		},
																		"nativeSrc": "3250:79:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "3250:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3223:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "3223:7:12"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3232:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "3232:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3219:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "3219:3:12"
																		},
																		"nativeSrc": "3219:23:12",
																		"nodeType": "YulFunctionCall",
																		"src": "3219:23:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3244:2:12",
																		"nodeType": "YulLiteral",
																		"src": "3244:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3215:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "3215:3:12"
																},
																"nativeSrc": "3215:32:12",
																"nodeType": "YulFunctionCall",
																"src": "3215:32:12"
															},
															"nativeSrc": "3212:119:12",
															"nodeType": "YulIf",
															"src": "3212:119:12"
														},
														{
															"nativeSrc": "3341:117:12",
															"nodeType": "YulBlock",
															"src": "3341:117:12",
															"statements": [
																{
																	"nativeSrc": "3356:15:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3356:15:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3370:1:12",
																		"nodeType": "YulLiteral",
																		"src": "3370:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "3360:6:12",
																			"nodeType": "YulTypedName",
																			"src": "3360:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "3385:63:12",
																	"nodeType": "YulAssignment",
																	"src": "3385:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "3420:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "3420:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "3431:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "3431:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3416:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "3416:3:12"
																				},
																				"nativeSrc": "3416:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "3416:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3440:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "3440:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "3395:20:12",
																			"nodeType": "YulIdentifier",
																			"src": "3395:20:12"
																		},
																		"nativeSrc": "3395:53:12",
																		"nodeType": "YulFunctionCall",
																		"src": "3395:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "3385:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "3385:6:12"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "3468:118:12",
															"nodeType": "YulBlock",
															"src": "3468:118:12",
															"statements": [
																{
																	"nativeSrc": "3483:16:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3483:16:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3497:2:12",
																		"nodeType": "YulLiteral",
																		"src": "3497:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "3487:6:12",
																			"nodeType": "YulTypedName",
																			"src": "3487:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "3513:63:12",
																	"nodeType": "YulAssignment",
																	"src": "3513:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "3548:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "3548:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "3559:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "3559:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3544:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "3544:3:12"
																				},
																				"nativeSrc": "3544:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "3544:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3568:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "3568:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "3523:20:12",
																			"nodeType": "YulIdentifier",
																			"src": "3523:20:12"
																		},
																		"nativeSrc": "3523:53:12",
																		"nodeType": "YulFunctionCall",
																		"src": "3523:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "3513:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "3513:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "3119:474:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3164:9:12",
														"nodeType": "YulTypedName",
														"src": "3164:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3175:7:12",
														"nodeType": "YulTypedName",
														"src": "3175:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3187:6:12",
														"nodeType": "YulTypedName",
														"src": "3187:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3195:6:12",
														"nodeType": "YulTypedName",
														"src": "3195:6:12",
														"type": ""
													}
												],
												"src": "3119:474:12"
											},
											{
												"body": {
													"nativeSrc": "3641:48:12",
													"nodeType": "YulBlock",
													"src": "3641:48:12",
													"statements": [
														{
															"nativeSrc": "3651:32:12",
															"nodeType": "YulAssignment",
															"src": "3651:32:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3676:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "3676:5:12"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "3669:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "3669:6:12"
																		},
																		"nativeSrc": "3669:13:12",
																		"nodeType": "YulFunctionCall",
																		"src": "3669:13:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3662:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "3662:6:12"
																},
																"nativeSrc": "3662:21:12",
																"nodeType": "YulFunctionCall",
																"src": "3662:21:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "3651:7:12",
																	"nodeType": "YulIdentifier",
																	"src": "3651:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nativeSrc": "3599:90:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3623:5:12",
														"nodeType": "YulTypedName",
														"src": "3623:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "3633:7:12",
														"nodeType": "YulTypedName",
														"src": "3633:7:12",
														"type": ""
													}
												],
												"src": "3599:90:12"
											},
											{
												"body": {
													"nativeSrc": "3754:50:12",
													"nodeType": "YulBlock",
													"src": "3754:50:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3771:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "3771:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3791:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "3791:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nativeSrc": "3776:14:12",
																			"nodeType": "YulIdentifier",
																			"src": "3776:14:12"
																		},
																		"nativeSrc": "3776:21:12",
																		"nodeType": "YulFunctionCall",
																		"src": "3776:21:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3764:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "3764:6:12"
																},
																"nativeSrc": "3764:34:12",
																"nodeType": "YulFunctionCall",
																"src": "3764:34:12"
															},
															"nativeSrc": "3764:34:12",
															"nodeType": "YulExpressionStatement",
															"src": "3764:34:12"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nativeSrc": "3695:109:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3742:5:12",
														"nodeType": "YulTypedName",
														"src": "3742:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "3749:3:12",
														"nodeType": "YulTypedName",
														"src": "3749:3:12",
														"type": ""
													}
												],
												"src": "3695:109:12"
											},
											{
												"body": {
													"nativeSrc": "3902:118:12",
													"nodeType": "YulBlock",
													"src": "3902:118:12",
													"statements": [
														{
															"nativeSrc": "3912:26:12",
															"nodeType": "YulAssignment",
															"src": "3912:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3924:9:12",
																		"nodeType": "YulIdentifier",
																		"src": "3924:9:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3935:2:12",
																		"nodeType": "YulLiteral",
																		"src": "3935:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3920:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "3920:3:12"
																},
																"nativeSrc": "3920:18:12",
																"nodeType": "YulFunctionCall",
																"src": "3920:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3912:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "3912:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "3986:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "3986:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3999:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "3999:9:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4010:1:12",
																				"nodeType": "YulLiteral",
																				"src": "4010:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3995:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "3995:3:12"
																		},
																		"nativeSrc": "3995:17:12",
																		"nodeType": "YulFunctionCall",
																		"src": "3995:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nativeSrc": "3948:37:12",
																	"nodeType": "YulIdentifier",
																	"src": "3948:37:12"
																},
																"nativeSrc": "3948:65:12",
																"nodeType": "YulFunctionCall",
																"src": "3948:65:12"
															},
															"nativeSrc": "3948:65:12",
															"nodeType": "YulExpressionStatement",
															"src": "3948:65:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "3810:210:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3874:9:12",
														"nodeType": "YulTypedName",
														"src": "3874:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3886:6:12",
														"nodeType": "YulTypedName",
														"src": "3886:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3897:4:12",
														"nodeType": "YulTypedName",
														"src": "3897:4:12",
														"type": ""
													}
												],
												"src": "3810:210:12"
											},
											{
												"body": {
													"nativeSrc": "4126:519:12",
													"nodeType": "YulBlock",
													"src": "4126:519:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "4172:83:12",
																"nodeType": "YulBlock",
																"src": "4172:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "4174:77:12",
																				"nodeType": "YulIdentifier",
																				"src": "4174:77:12"
																			},
																			"nativeSrc": "4174:79:12",
																			"nodeType": "YulFunctionCall",
																			"src": "4174:79:12"
																		},
																		"nativeSrc": "4174:79:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "4174:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4147:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "4147:7:12"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "4156:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "4156:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4143:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "4143:3:12"
																		},
																		"nativeSrc": "4143:23:12",
																		"nodeType": "YulFunctionCall",
																		"src": "4143:23:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4168:2:12",
																		"nodeType": "YulLiteral",
																		"src": "4168:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "4139:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "4139:3:12"
																},
																"nativeSrc": "4139:32:12",
																"nodeType": "YulFunctionCall",
																"src": "4139:32:12"
															},
															"nativeSrc": "4136:119:12",
															"nodeType": "YulIf",
															"src": "4136:119:12"
														},
														{
															"nativeSrc": "4265:117:12",
															"nodeType": "YulBlock",
															"src": "4265:117:12",
															"statements": [
																{
																	"nativeSrc": "4280:15:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4280:15:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4294:1:12",
																		"nodeType": "YulLiteral",
																		"src": "4294:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4284:6:12",
																			"nodeType": "YulTypedName",
																			"src": "4284:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4309:63:12",
																	"nodeType": "YulAssignment",
																	"src": "4309:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4344:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "4344:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4355:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "4355:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4340:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "4340:3:12"
																				},
																				"nativeSrc": "4340:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "4340:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4364:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "4364:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "4319:20:12",
																			"nodeType": "YulIdentifier",
																			"src": "4319:20:12"
																		},
																		"nativeSrc": "4319:53:12",
																		"nodeType": "YulFunctionCall",
																		"src": "4319:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "4309:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "4309:6:12"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4392:118:12",
															"nodeType": "YulBlock",
															"src": "4392:118:12",
															"statements": [
																{
																	"nativeSrc": "4407:16:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4407:16:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4421:2:12",
																		"nodeType": "YulLiteral",
																		"src": "4421:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4411:6:12",
																			"nodeType": "YulTypedName",
																			"src": "4411:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4437:63:12",
																	"nodeType": "YulAssignment",
																	"src": "4437:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4472:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "4472:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4483:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "4483:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4468:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "4468:3:12"
																				},
																				"nativeSrc": "4468:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "4468:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4492:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "4492:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "4447:20:12",
																			"nodeType": "YulIdentifier",
																			"src": "4447:20:12"
																		},
																		"nativeSrc": "4447:53:12",
																		"nodeType": "YulFunctionCall",
																		"src": "4447:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "4437:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "4437:6:12"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4520:118:12",
															"nodeType": "YulBlock",
															"src": "4520:118:12",
															"statements": [
																{
																	"nativeSrc": "4535:16:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4535:16:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4549:2:12",
																		"nodeType": "YulLiteral",
																		"src": "4549:2:12",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4539:6:12",
																			"nodeType": "YulTypedName",
																			"src": "4539:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4565:63:12",
																	"nodeType": "YulAssignment",
																	"src": "4565:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4600:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "4600:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4611:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "4611:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4596:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "4596:3:12"
																				},
																				"nativeSrc": "4596:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "4596:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4620:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "4620:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "4575:20:12",
																			"nodeType": "YulIdentifier",
																			"src": "4575:20:12"
																		},
																		"nativeSrc": "4575:53:12",
																		"nodeType": "YulFunctionCall",
																		"src": "4575:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nativeSrc": "4565:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "4565:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nativeSrc": "4026:619:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4080:9:12",
														"nodeType": "YulTypedName",
														"src": "4080:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "4091:7:12",
														"nodeType": "YulTypedName",
														"src": "4091:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "4103:6:12",
														"nodeType": "YulTypedName",
														"src": "4103:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "4111:6:12",
														"nodeType": "YulTypedName",
														"src": "4111:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "4119:6:12",
														"nodeType": "YulTypedName",
														"src": "4119:6:12",
														"type": ""
													}
												],
												"src": "4026:619:12"
											},
											{
												"body": {
													"nativeSrc": "4694:43:12",
													"nodeType": "YulBlock",
													"src": "4694:43:12",
													"statements": [
														{
															"nativeSrc": "4704:27:12",
															"nodeType": "YulAssignment",
															"src": "4704:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4719:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "4719:5:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4726:4:12",
																		"nodeType": "YulLiteral",
																		"src": "4726:4:12",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4715:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "4715:3:12"
																},
																"nativeSrc": "4715:16:12",
																"nodeType": "YulFunctionCall",
																"src": "4715:16:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "4704:7:12",
																	"nodeType": "YulIdentifier",
																	"src": "4704:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nativeSrc": "4651:86:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4676:5:12",
														"nodeType": "YulTypedName",
														"src": "4676:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "4686:7:12",
														"nodeType": "YulTypedName",
														"src": "4686:7:12",
														"type": ""
													}
												],
												"src": "4651:86:12"
											},
											{
												"body": {
													"nativeSrc": "4804:51:12",
													"nodeType": "YulBlock",
													"src": "4804:51:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "4821:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "4821:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "4842:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "4842:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint8",
																			"nativeSrc": "4826:15:12",
																			"nodeType": "YulIdentifier",
																			"src": "4826:15:12"
																		},
																		"nativeSrc": "4826:22:12",
																		"nodeType": "YulFunctionCall",
																		"src": "4826:22:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4814:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "4814:6:12"
																},
																"nativeSrc": "4814:35:12",
																"nodeType": "YulFunctionCall",
																"src": "4814:35:12"
															},
															"nativeSrc": "4814:35:12",
															"nodeType": "YulExpressionStatement",
															"src": "4814:35:12"
														}
													]
												},
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nativeSrc": "4743:112:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4792:5:12",
														"nodeType": "YulTypedName",
														"src": "4792:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "4799:3:12",
														"nodeType": "YulTypedName",
														"src": "4799:3:12",
														"type": ""
													}
												],
												"src": "4743:112:12"
											},
											{
												"body": {
													"nativeSrc": "4955:120:12",
													"nodeType": "YulBlock",
													"src": "4955:120:12",
													"statements": [
														{
															"nativeSrc": "4965:26:12",
															"nodeType": "YulAssignment",
															"src": "4965:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4977:9:12",
																		"nodeType": "YulIdentifier",
																		"src": "4977:9:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4988:2:12",
																		"nodeType": "YulLiteral",
																		"src": "4988:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4973:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "4973:3:12"
																},
																"nativeSrc": "4973:18:12",
																"nodeType": "YulFunctionCall",
																"src": "4973:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4965:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "4965:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "5041:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "5041:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5054:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "5054:9:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5065:1:12",
																				"nodeType": "YulLiteral",
																				"src": "5065:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5050:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "5050:3:12"
																		},
																		"nativeSrc": "5050:17:12",
																		"nodeType": "YulFunctionCall",
																		"src": "5050:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nativeSrc": "5001:39:12",
																	"nodeType": "YulIdentifier",
																	"src": "5001:39:12"
																},
																"nativeSrc": "5001:67:12",
																"nodeType": "YulFunctionCall",
																"src": "5001:67:12"
															},
															"nativeSrc": "5001:67:12",
															"nodeType": "YulExpressionStatement",
															"src": "5001:67:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nativeSrc": "4861:214:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4927:9:12",
														"nodeType": "YulTypedName",
														"src": "4927:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4939:6:12",
														"nodeType": "YulTypedName",
														"src": "4939:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4950:4:12",
														"nodeType": "YulTypedName",
														"src": "4950:4:12",
														"type": ""
													}
												],
												"src": "4861:214:12"
											},
											{
												"body": {
													"nativeSrc": "5146:53:12",
													"nodeType": "YulBlock",
													"src": "5146:53:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "5163:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "5163:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "5186:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "5186:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nativeSrc": "5168:17:12",
																			"nodeType": "YulIdentifier",
																			"src": "5168:17:12"
																		},
																		"nativeSrc": "5168:24:12",
																		"nodeType": "YulFunctionCall",
																		"src": "5168:24:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5156:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "5156:6:12"
																},
																"nativeSrc": "5156:37:12",
																"nodeType": "YulFunctionCall",
																"src": "5156:37:12"
															},
															"nativeSrc": "5156:37:12",
															"nodeType": "YulExpressionStatement",
															"src": "5156:37:12"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "5081:118:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5134:5:12",
														"nodeType": "YulTypedName",
														"src": "5134:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "5141:3:12",
														"nodeType": "YulTypedName",
														"src": "5141:3:12",
														"type": ""
													}
												],
												"src": "5081:118:12"
											},
											{
												"body": {
													"nativeSrc": "5303:124:12",
													"nodeType": "YulBlock",
													"src": "5303:124:12",
													"statements": [
														{
															"nativeSrc": "5313:26:12",
															"nodeType": "YulAssignment",
															"src": "5313:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5325:9:12",
																		"nodeType": "YulIdentifier",
																		"src": "5325:9:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5336:2:12",
																		"nodeType": "YulLiteral",
																		"src": "5336:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5321:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "5321:3:12"
																},
																"nativeSrc": "5321:18:12",
																"nodeType": "YulFunctionCall",
																"src": "5321:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5313:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "5313:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "5393:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "5393:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5406:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "5406:9:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5417:1:12",
																				"nodeType": "YulLiteral",
																				"src": "5417:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5402:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "5402:3:12"
																		},
																		"nativeSrc": "5402:17:12",
																		"nodeType": "YulFunctionCall",
																		"src": "5402:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "5349:43:12",
																	"nodeType": "YulIdentifier",
																	"src": "5349:43:12"
																},
																"nativeSrc": "5349:71:12",
																"nodeType": "YulFunctionCall",
																"src": "5349:71:12"
															},
															"nativeSrc": "5349:71:12",
															"nodeType": "YulExpressionStatement",
															"src": "5349:71:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "5205:222:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5275:9:12",
														"nodeType": "YulTypedName",
														"src": "5275:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5287:6:12",
														"nodeType": "YulTypedName",
														"src": "5287:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5298:4:12",
														"nodeType": "YulTypedName",
														"src": "5298:4:12",
														"type": ""
													}
												],
												"src": "5205:222:12"
											},
											{
												"body": {
													"nativeSrc": "5499:263:12",
													"nodeType": "YulBlock",
													"src": "5499:263:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "5545:83:12",
																"nodeType": "YulBlock",
																"src": "5545:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "5547:77:12",
																				"nodeType": "YulIdentifier",
																				"src": "5547:77:12"
																			},
																			"nativeSrc": "5547:79:12",
																			"nodeType": "YulFunctionCall",
																			"src": "5547:79:12"
																		},
																		"nativeSrc": "5547:79:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "5547:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5520:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "5520:7:12"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5529:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "5529:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5516:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "5516:3:12"
																		},
																		"nativeSrc": "5516:23:12",
																		"nodeType": "YulFunctionCall",
																		"src": "5516:23:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5541:2:12",
																		"nodeType": "YulLiteral",
																		"src": "5541:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5512:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "5512:3:12"
																},
																"nativeSrc": "5512:32:12",
																"nodeType": "YulFunctionCall",
																"src": "5512:32:12"
															},
															"nativeSrc": "5509:119:12",
															"nodeType": "YulIf",
															"src": "5509:119:12"
														},
														{
															"nativeSrc": "5638:117:12",
															"nodeType": "YulBlock",
															"src": "5638:117:12",
															"statements": [
																{
																	"nativeSrc": "5653:15:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "5653:15:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5667:1:12",
																		"nodeType": "YulLiteral",
																		"src": "5667:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "5657:6:12",
																			"nodeType": "YulTypedName",
																			"src": "5657:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "5682:63:12",
																	"nodeType": "YulAssignment",
																	"src": "5682:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5717:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "5717:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5728:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "5728:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5713:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "5713:3:12"
																				},
																				"nativeSrc": "5713:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "5713:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5737:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "5737:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "5692:20:12",
																			"nodeType": "YulIdentifier",
																			"src": "5692:20:12"
																		},
																		"nativeSrc": "5692:53:12",
																		"nodeType": "YulFunctionCall",
																		"src": "5692:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "5682:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "5682:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "5433:329:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5469:9:12",
														"nodeType": "YulTypedName",
														"src": "5469:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5480:7:12",
														"nodeType": "YulTypedName",
														"src": "5480:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5492:6:12",
														"nodeType": "YulTypedName",
														"src": "5492:6:12",
														"type": ""
													}
												],
												"src": "5433:329:12"
											},
											{
												"body": {
													"nativeSrc": "5851:391:12",
													"nodeType": "YulBlock",
													"src": "5851:391:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "5897:83:12",
																"nodeType": "YulBlock",
																"src": "5897:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "5899:77:12",
																				"nodeType": "YulIdentifier",
																				"src": "5899:77:12"
																			},
																			"nativeSrc": "5899:79:12",
																			"nodeType": "YulFunctionCall",
																			"src": "5899:79:12"
																		},
																		"nativeSrc": "5899:79:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "5899:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5872:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "5872:7:12"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5881:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "5881:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5868:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "5868:3:12"
																		},
																		"nativeSrc": "5868:23:12",
																		"nodeType": "YulFunctionCall",
																		"src": "5868:23:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5893:2:12",
																		"nodeType": "YulLiteral",
																		"src": "5893:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5864:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "5864:3:12"
																},
																"nativeSrc": "5864:32:12",
																"nodeType": "YulFunctionCall",
																"src": "5864:32:12"
															},
															"nativeSrc": "5861:119:12",
															"nodeType": "YulIf",
															"src": "5861:119:12"
														},
														{
															"nativeSrc": "5990:117:12",
															"nodeType": "YulBlock",
															"src": "5990:117:12",
															"statements": [
																{
																	"nativeSrc": "6005:15:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "6005:15:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "6019:1:12",
																		"nodeType": "YulLiteral",
																		"src": "6019:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "6009:6:12",
																			"nodeType": "YulTypedName",
																			"src": "6009:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "6034:63:12",
																	"nodeType": "YulAssignment",
																	"src": "6034:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "6069:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "6069:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "6080:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "6080:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "6065:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "6065:3:12"
																				},
																				"nativeSrc": "6065:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "6065:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "6089:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "6089:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "6044:20:12",
																			"nodeType": "YulIdentifier",
																			"src": "6044:20:12"
																		},
																		"nativeSrc": "6044:53:12",
																		"nodeType": "YulFunctionCall",
																		"src": "6044:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "6034:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "6034:6:12"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "6117:118:12",
															"nodeType": "YulBlock",
															"src": "6117:118:12",
															"statements": [
																{
																	"nativeSrc": "6132:16:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "6132:16:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "6146:2:12",
																		"nodeType": "YulLiteral",
																		"src": "6146:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "6136:6:12",
																			"nodeType": "YulTypedName",
																			"src": "6136:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "6162:63:12",
																	"nodeType": "YulAssignment",
																	"src": "6162:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "6197:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "6197:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "6208:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "6208:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "6193:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "6193:3:12"
																				},
																				"nativeSrc": "6193:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "6193:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "6217:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "6217:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "6172:20:12",
																			"nodeType": "YulIdentifier",
																			"src": "6172:20:12"
																		},
																		"nativeSrc": "6172:53:12",
																		"nodeType": "YulFunctionCall",
																		"src": "6172:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "6162:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "6162:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_address",
												"nativeSrc": "5768:474:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5813:9:12",
														"nodeType": "YulTypedName",
														"src": "5813:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5824:7:12",
														"nodeType": "YulTypedName",
														"src": "5824:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5836:6:12",
														"nodeType": "YulTypedName",
														"src": "5836:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "5844:6:12",
														"nodeType": "YulTypedName",
														"src": "5844:6:12",
														"type": ""
													}
												],
												"src": "5768:474:12"
											},
											{
												"body": {
													"nativeSrc": "6348:519:12",
													"nodeType": "YulBlock",
													"src": "6348:519:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "6394:83:12",
																"nodeType": "YulBlock",
																"src": "6394:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "6396:77:12",
																				"nodeType": "YulIdentifier",
																				"src": "6396:77:12"
																			},
																			"nativeSrc": "6396:79:12",
																			"nodeType": "YulFunctionCall",
																			"src": "6396:79:12"
																		},
																		"nativeSrc": "6396:79:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "6396:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "6369:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "6369:7:12"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "6378:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "6378:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "6365:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "6365:3:12"
																		},
																		"nativeSrc": "6365:23:12",
																		"nodeType": "YulFunctionCall",
																		"src": "6365:23:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6390:2:12",
																		"nodeType": "YulLiteral",
																		"src": "6390:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "6361:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "6361:3:12"
																},
																"nativeSrc": "6361:32:12",
																"nodeType": "YulFunctionCall",
																"src": "6361:32:12"
															},
															"nativeSrc": "6358:119:12",
															"nodeType": "YulIf",
															"src": "6358:119:12"
														},
														{
															"nativeSrc": "6487:117:12",
															"nodeType": "YulBlock",
															"src": "6487:117:12",
															"statements": [
																{
																	"nativeSrc": "6502:15:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "6502:15:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "6516:1:12",
																		"nodeType": "YulLiteral",
																		"src": "6516:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "6506:6:12",
																			"nodeType": "YulTypedName",
																			"src": "6506:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "6531:63:12",
																	"nodeType": "YulAssignment",
																	"src": "6531:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "6566:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "6566:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "6577:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "6577:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "6562:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "6562:3:12"
																				},
																				"nativeSrc": "6562:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "6562:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "6586:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "6586:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "6541:20:12",
																			"nodeType": "YulIdentifier",
																			"src": "6541:20:12"
																		},
																		"nativeSrc": "6541:53:12",
																		"nodeType": "YulFunctionCall",
																		"src": "6541:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "6531:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "6531:6:12"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "6614:118:12",
															"nodeType": "YulBlock",
															"src": "6614:118:12",
															"statements": [
																{
																	"nativeSrc": "6629:16:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "6629:16:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "6643:2:12",
																		"nodeType": "YulLiteral",
																		"src": "6643:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "6633:6:12",
																			"nodeType": "YulTypedName",
																			"src": "6633:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "6659:63:12",
																	"nodeType": "YulAssignment",
																	"src": "6659:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "6694:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "6694:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "6705:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "6705:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "6690:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "6690:3:12"
																				},
																				"nativeSrc": "6690:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "6690:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "6714:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "6714:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "6669:20:12",
																			"nodeType": "YulIdentifier",
																			"src": "6669:20:12"
																		},
																		"nativeSrc": "6669:53:12",
																		"nodeType": "YulFunctionCall",
																		"src": "6669:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "6659:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "6659:6:12"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "6742:118:12",
															"nodeType": "YulBlock",
															"src": "6742:118:12",
															"statements": [
																{
																	"nativeSrc": "6757:16:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "6757:16:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "6771:2:12",
																		"nodeType": "YulLiteral",
																		"src": "6771:2:12",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "6761:6:12",
																			"nodeType": "YulTypedName",
																			"src": "6761:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "6787:63:12",
																	"nodeType": "YulAssignment",
																	"src": "6787:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "6822:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "6822:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "6833:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "6833:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "6818:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "6818:3:12"
																				},
																				"nativeSrc": "6818:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "6818:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "6842:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "6842:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "6797:20:12",
																			"nodeType": "YulIdentifier",
																			"src": "6797:20:12"
																		},
																		"nativeSrc": "6797:53:12",
																		"nodeType": "YulFunctionCall",
																		"src": "6797:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nativeSrc": "6787:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "6787:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_addresst_address",
												"nativeSrc": "6248:619:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6302:9:12",
														"nodeType": "YulTypedName",
														"src": "6302:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "6313:7:12",
														"nodeType": "YulTypedName",
														"src": "6313:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "6325:6:12",
														"nodeType": "YulTypedName",
														"src": "6325:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6333:6:12",
														"nodeType": "YulTypedName",
														"src": "6333:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "6341:6:12",
														"nodeType": "YulTypedName",
														"src": "6341:6:12",
														"type": ""
													}
												],
												"src": "6248:619:12"
											},
											{
												"body": {
													"nativeSrc": "6956:391:12",
													"nodeType": "YulBlock",
													"src": "6956:391:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "7002:83:12",
																"nodeType": "YulBlock",
																"src": "7002:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "7004:77:12",
																				"nodeType": "YulIdentifier",
																				"src": "7004:77:12"
																			},
																			"nativeSrc": "7004:79:12",
																			"nodeType": "YulFunctionCall",
																			"src": "7004:79:12"
																		},
																		"nativeSrc": "7004:79:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "7004:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "6977:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "6977:7:12"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "6986:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "6986:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "6973:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "6973:3:12"
																		},
																		"nativeSrc": "6973:23:12",
																		"nodeType": "YulFunctionCall",
																		"src": "6973:23:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6998:2:12",
																		"nodeType": "YulLiteral",
																		"src": "6998:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "6969:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "6969:3:12"
																},
																"nativeSrc": "6969:32:12",
																"nodeType": "YulFunctionCall",
																"src": "6969:32:12"
															},
															"nativeSrc": "6966:119:12",
															"nodeType": "YulIf",
															"src": "6966:119:12"
														},
														{
															"nativeSrc": "7095:117:12",
															"nodeType": "YulBlock",
															"src": "7095:117:12",
															"statements": [
																{
																	"nativeSrc": "7110:15:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "7110:15:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "7124:1:12",
																		"nodeType": "YulLiteral",
																		"src": "7124:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "7114:6:12",
																			"nodeType": "YulTypedName",
																			"src": "7114:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "7139:63:12",
																	"nodeType": "YulAssignment",
																	"src": "7139:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "7174:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "7174:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "7185:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "7185:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "7170:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "7170:3:12"
																				},
																				"nativeSrc": "7170:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "7170:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "7194:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "7194:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "7149:20:12",
																			"nodeType": "YulIdentifier",
																			"src": "7149:20:12"
																		},
																		"nativeSrc": "7149:53:12",
																		"nodeType": "YulFunctionCall",
																		"src": "7149:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "7139:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "7139:6:12"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "7222:118:12",
															"nodeType": "YulBlock",
															"src": "7222:118:12",
															"statements": [
																{
																	"nativeSrc": "7237:16:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "7237:16:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "7251:2:12",
																		"nodeType": "YulLiteral",
																		"src": "7251:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "7241:6:12",
																			"nodeType": "YulTypedName",
																			"src": "7241:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "7267:63:12",
																	"nodeType": "YulAssignment",
																	"src": "7267:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "7302:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "7302:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "7313:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "7313:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "7298:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "7298:3:12"
																				},
																				"nativeSrc": "7298:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "7298:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "7322:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "7322:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "7277:20:12",
																			"nodeType": "YulIdentifier",
																			"src": "7277:20:12"
																		},
																		"nativeSrc": "7277:53:12",
																		"nodeType": "YulFunctionCall",
																		"src": "7277:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "7267:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "7267:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nativeSrc": "6873:474:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6918:9:12",
														"nodeType": "YulTypedName",
														"src": "6918:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "6929:7:12",
														"nodeType": "YulTypedName",
														"src": "6929:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "6941:6:12",
														"nodeType": "YulTypedName",
														"src": "6941:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6949:6:12",
														"nodeType": "YulTypedName",
														"src": "6949:6:12",
														"type": ""
													}
												],
												"src": "6873:474:12"
											},
											{
												"body": {
													"nativeSrc": "7416:80:12",
													"nodeType": "YulBlock",
													"src": "7416:80:12",
													"statements": [
														{
															"nativeSrc": "7426:22:12",
															"nodeType": "YulAssignment",
															"src": "7426:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "7441:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "7441:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "7435:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "7435:5:12"
																},
																"nativeSrc": "7435:13:12",
																"nodeType": "YulFunctionCall",
																"src": "7435:13:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "7426:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "7426:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "7484:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "7484:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "7457:26:12",
																	"nodeType": "YulIdentifier",
																	"src": "7457:26:12"
																},
																"nativeSrc": "7457:33:12",
																"nodeType": "YulFunctionCall",
																"src": "7457:33:12"
															},
															"nativeSrc": "7457:33:12",
															"nodeType": "YulExpressionStatement",
															"src": "7457:33:12"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nativeSrc": "7353:143:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "7394:6:12",
														"nodeType": "YulTypedName",
														"src": "7394:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "7402:3:12",
														"nodeType": "YulTypedName",
														"src": "7402:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "7410:5:12",
														"nodeType": "YulTypedName",
														"src": "7410:5:12",
														"type": ""
													}
												],
												"src": "7353:143:12"
											},
											{
												"body": {
													"nativeSrc": "7579:274:12",
													"nodeType": "YulBlock",
													"src": "7579:274:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "7625:83:12",
																"nodeType": "YulBlock",
																"src": "7625:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "7627:77:12",
																				"nodeType": "YulIdentifier",
																				"src": "7627:77:12"
																			},
																			"nativeSrc": "7627:79:12",
																			"nodeType": "YulFunctionCall",
																			"src": "7627:79:12"
																		},
																		"nativeSrc": "7627:79:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "7627:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "7600:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "7600:7:12"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "7609:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "7609:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "7596:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "7596:3:12"
																		},
																		"nativeSrc": "7596:23:12",
																		"nodeType": "YulFunctionCall",
																		"src": "7596:23:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7621:2:12",
																		"nodeType": "YulLiteral",
																		"src": "7621:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "7592:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "7592:3:12"
																},
																"nativeSrc": "7592:32:12",
																"nodeType": "YulFunctionCall",
																"src": "7592:32:12"
															},
															"nativeSrc": "7589:119:12",
															"nodeType": "YulIf",
															"src": "7589:119:12"
														},
														{
															"nativeSrc": "7718:128:12",
															"nodeType": "YulBlock",
															"src": "7718:128:12",
															"statements": [
																{
																	"nativeSrc": "7733:15:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "7733:15:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "7747:1:12",
																		"nodeType": "YulLiteral",
																		"src": "7747:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "7737:6:12",
																			"nodeType": "YulTypedName",
																			"src": "7737:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "7762:74:12",
																	"nodeType": "YulAssignment",
																	"src": "7762:74:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "7808:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "7808:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "7819:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "7819:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "7804:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "7804:3:12"
																				},
																				"nativeSrc": "7804:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "7804:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "7828:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "7828:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nativeSrc": "7772:31:12",
																			"nodeType": "YulIdentifier",
																			"src": "7772:31:12"
																		},
																		"nativeSrc": "7772:64:12",
																		"nodeType": "YulFunctionCall",
																		"src": "7772:64:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "7762:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "7762:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nativeSrc": "7502:351:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7549:9:12",
														"nodeType": "YulTypedName",
														"src": "7549:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "7560:7:12",
														"nodeType": "YulTypedName",
														"src": "7560:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "7572:6:12",
														"nodeType": "YulTypedName",
														"src": "7572:6:12",
														"type": ""
													}
												],
												"src": "7502:351:12"
											},
											{
												"body": {
													"nativeSrc": "7887:152:12",
													"nodeType": "YulBlock",
													"src": "7887:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "7904:1:12",
																		"nodeType": "YulLiteral",
																		"src": "7904:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7907:77:12",
																		"nodeType": "YulLiteral",
																		"src": "7907:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7897:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "7897:6:12"
																},
																"nativeSrc": "7897:88:12",
																"nodeType": "YulFunctionCall",
																"src": "7897:88:12"
															},
															"nativeSrc": "7897:88:12",
															"nodeType": "YulExpressionStatement",
															"src": "7897:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8001:1:12",
																		"nodeType": "YulLiteral",
																		"src": "8001:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8004:4:12",
																		"nodeType": "YulLiteral",
																		"src": "8004:4:12",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7994:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "7994:6:12"
																},
																"nativeSrc": "7994:15:12",
																"nodeType": "YulFunctionCall",
																"src": "7994:15:12"
															},
															"nativeSrc": "7994:15:12",
															"nodeType": "YulExpressionStatement",
															"src": "7994:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8025:1:12",
																		"nodeType": "YulLiteral",
																		"src": "8025:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8028:4:12",
																		"nodeType": "YulLiteral",
																		"src": "8028:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "8018:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "8018:6:12"
																},
																"nativeSrc": "8018:15:12",
																"nodeType": "YulFunctionCall",
																"src": "8018:15:12"
															},
															"nativeSrc": "8018:15:12",
															"nodeType": "YulExpressionStatement",
															"src": "8018:15:12"
														}
													]
												},
												"name": "panic_error_0x22",
												"nativeSrc": "7859:180:12",
												"nodeType": "YulFunctionDefinition",
												"src": "7859:180:12"
											},
											{
												"body": {
													"nativeSrc": "8096:269:12",
													"nodeType": "YulBlock",
													"src": "8096:269:12",
													"statements": [
														{
															"nativeSrc": "8106:22:12",
															"nodeType": "YulAssignment",
															"src": "8106:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "8120:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "8120:4:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8126:1:12",
																		"nodeType": "YulLiteral",
																		"src": "8126:1:12",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "8116:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "8116:3:12"
																},
																"nativeSrc": "8116:12:12",
																"nodeType": "YulFunctionCall",
																"src": "8116:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "8106:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "8106:6:12"
																}
															]
														},
														{
															"nativeSrc": "8137:38:12",
															"nodeType": "YulVariableDeclaration",
															"src": "8137:38:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "8167:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "8167:4:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8173:1:12",
																		"nodeType": "YulLiteral",
																		"src": "8173:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "8163:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "8163:3:12"
																},
																"nativeSrc": "8163:12:12",
																"nodeType": "YulFunctionCall",
																"src": "8163:12:12"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "8141:18:12",
																	"nodeType": "YulTypedName",
																	"src": "8141:18:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "8214:51:12",
																"nodeType": "YulBlock",
																"src": "8214:51:12",
																"statements": [
																	{
																		"nativeSrc": "8228:27:12",
																		"nodeType": "YulAssignment",
																		"src": "8228:27:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "8242:6:12",
																					"nodeType": "YulIdentifier",
																					"src": "8242:6:12"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "8250:4:12",
																					"nodeType": "YulLiteral",
																					"src": "8250:4:12",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "8238:3:12",
																				"nodeType": "YulIdentifier",
																				"src": "8238:3:12"
																			},
																			"nativeSrc": "8238:17:12",
																			"nodeType": "YulFunctionCall",
																			"src": "8238:17:12"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "8228:6:12",
																				"nodeType": "YulIdentifier",
																				"src": "8228:6:12"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "8194:18:12",
																		"nodeType": "YulIdentifier",
																		"src": "8194:18:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "8187:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "8187:6:12"
																},
																"nativeSrc": "8187:26:12",
																"nodeType": "YulFunctionCall",
																"src": "8187:26:12"
															},
															"nativeSrc": "8184:81:12",
															"nodeType": "YulIf",
															"src": "8184:81:12"
														},
														{
															"body": {
																"nativeSrc": "8317:42:12",
																"nodeType": "YulBlock",
																"src": "8317:42:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nativeSrc": "8331:16:12",
																				"nodeType": "YulIdentifier",
																				"src": "8331:16:12"
																			},
																			"nativeSrc": "8331:18:12",
																			"nodeType": "YulFunctionCall",
																			"src": "8331:18:12"
																		},
																		"nativeSrc": "8331:18:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "8331:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "8281:18:12",
																		"nodeType": "YulIdentifier",
																		"src": "8281:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "8304:6:12",
																				"nodeType": "YulIdentifier",
																				"src": "8304:6:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8312:2:12",
																				"nodeType": "YulLiteral",
																				"src": "8312:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "8301:2:12",
																			"nodeType": "YulIdentifier",
																			"src": "8301:2:12"
																		},
																		"nativeSrc": "8301:14:12",
																		"nodeType": "YulFunctionCall",
																		"src": "8301:14:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "8278:2:12",
																	"nodeType": "YulIdentifier",
																	"src": "8278:2:12"
																},
																"nativeSrc": "8278:38:12",
																"nodeType": "YulFunctionCall",
																"src": "8278:38:12"
															},
															"nativeSrc": "8275:84:12",
															"nodeType": "YulIf",
															"src": "8275:84:12"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "8045:320:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "8080:4:12",
														"nodeType": "YulTypedName",
														"src": "8080:4:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "8089:6:12",
														"nodeType": "YulTypedName",
														"src": "8089:6:12",
														"type": ""
													}
												],
												"src": "8045:320:12"
											},
											{
												"body": {
													"nativeSrc": "8399:152:12",
													"nodeType": "YulBlock",
													"src": "8399:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8416:1:12",
																		"nodeType": "YulLiteral",
																		"src": "8416:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8419:77:12",
																		"nodeType": "YulLiteral",
																		"src": "8419:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8409:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "8409:6:12"
																},
																"nativeSrc": "8409:88:12",
																"nodeType": "YulFunctionCall",
																"src": "8409:88:12"
															},
															"nativeSrc": "8409:88:12",
															"nodeType": "YulExpressionStatement",
															"src": "8409:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8513:1:12",
																		"nodeType": "YulLiteral",
																		"src": "8513:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8516:4:12",
																		"nodeType": "YulLiteral",
																		"src": "8516:4:12",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8506:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "8506:6:12"
																},
																"nativeSrc": "8506:15:12",
																"nodeType": "YulFunctionCall",
																"src": "8506:15:12"
															},
															"nativeSrc": "8506:15:12",
															"nodeType": "YulExpressionStatement",
															"src": "8506:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8537:1:12",
																		"nodeType": "YulLiteral",
																		"src": "8537:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8540:4:12",
																		"nodeType": "YulLiteral",
																		"src": "8540:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "8530:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "8530:6:12"
																},
																"nativeSrc": "8530:15:12",
																"nodeType": "YulFunctionCall",
																"src": "8530:15:12"
															},
															"nativeSrc": "8530:15:12",
															"nodeType": "YulExpressionStatement",
															"src": "8530:15:12"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "8371:180:12",
												"nodeType": "YulFunctionDefinition",
												"src": "8371:180:12"
											},
											{
												"body": {
													"nativeSrc": "8602:149:12",
													"nodeType": "YulBlock",
													"src": "8602:149:12",
													"statements": [
														{
															"nativeSrc": "8612:25:12",
															"nodeType": "YulAssignment",
															"src": "8612:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "8635:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "8635:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "8617:17:12",
																	"nodeType": "YulIdentifier",
																	"src": "8617:17:12"
																},
																"nativeSrc": "8617:20:12",
																"nodeType": "YulFunctionCall",
																"src": "8617:20:12"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "8612:1:12",
																	"nodeType": "YulIdentifier",
																	"src": "8612:1:12"
																}
															]
														},
														{
															"nativeSrc": "8646:25:12",
															"nodeType": "YulAssignment",
															"src": "8646:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "8669:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "8669:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "8651:17:12",
																	"nodeType": "YulIdentifier",
																	"src": "8651:17:12"
																},
																"nativeSrc": "8651:20:12",
																"nodeType": "YulFunctionCall",
																"src": "8651:20:12"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "8646:1:12",
																	"nodeType": "YulIdentifier",
																	"src": "8646:1:12"
																}
															]
														},
														{
															"nativeSrc": "8680:17:12",
															"nodeType": "YulAssignment",
															"src": "8680:17:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "8692:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "8692:1:12"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "8695:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "8695:1:12"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nativeSrc": "8688:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "8688:3:12"
																},
																"nativeSrc": "8688:9:12",
																"nodeType": "YulFunctionCall",
																"src": "8688:9:12"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nativeSrc": "8680:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "8680:4:12"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "8722:22:12",
																"nodeType": "YulBlock",
																"src": "8722:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "8724:16:12",
																				"nodeType": "YulIdentifier",
																				"src": "8724:16:12"
																			},
																			"nativeSrc": "8724:18:12",
																			"nodeType": "YulFunctionCall",
																			"src": "8724:18:12"
																		},
																		"nativeSrc": "8724:18:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "8724:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nativeSrc": "8713:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "8713:4:12"
																	},
																	{
																		"name": "x",
																		"nativeSrc": "8719:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "8719:1:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "8710:2:12",
																	"nodeType": "YulIdentifier",
																	"src": "8710:2:12"
																},
																"nativeSrc": "8710:11:12",
																"nodeType": "YulFunctionCall",
																"src": "8710:11:12"
															},
															"nativeSrc": "8707:37:12",
															"nodeType": "YulIf",
															"src": "8707:37:12"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nativeSrc": "8557:194:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "8588:1:12",
														"nodeType": "YulTypedName",
														"src": "8588:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "8591:1:12",
														"nodeType": "YulTypedName",
														"src": "8591:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nativeSrc": "8597:4:12",
														"nodeType": "YulTypedName",
														"src": "8597:4:12",
														"type": ""
													}
												],
												"src": "8557:194:12"
											},
											{
												"body": {
													"nativeSrc": "8799:146:12",
													"nodeType": "YulBlock",
													"src": "8799:146:12",
													"statements": [
														{
															"nativeSrc": "8809:23:12",
															"nodeType": "YulAssignment",
															"src": "8809:23:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "8830:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "8830:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nativeSrc": "8814:15:12",
																	"nodeType": "YulIdentifier",
																	"src": "8814:15:12"
																},
																"nativeSrc": "8814:18:12",
																"nodeType": "YulFunctionCall",
																"src": "8814:18:12"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "8809:1:12",
																	"nodeType": "YulIdentifier",
																	"src": "8809:1:12"
																}
															]
														},
														{
															"nativeSrc": "8841:23:12",
															"nodeType": "YulAssignment",
															"src": "8841:23:12",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "8862:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "8862:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nativeSrc": "8846:15:12",
																	"nodeType": "YulIdentifier",
																	"src": "8846:15:12"
																},
																"nativeSrc": "8846:18:12",
																"nodeType": "YulFunctionCall",
																"src": "8846:18:12"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "8841:1:12",
																	"nodeType": "YulIdentifier",
																	"src": "8841:1:12"
																}
															]
														},
														{
															"nativeSrc": "8873:16:12",
															"nodeType": "YulAssignment",
															"src": "8873:16:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "8884:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "8884:1:12"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "8887:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "8887:1:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "8880:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "8880:3:12"
																},
																"nativeSrc": "8880:9:12",
																"nodeType": "YulFunctionCall",
																"src": "8880:9:12"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "8873:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "8873:3:12"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "8916:22:12",
																"nodeType": "YulBlock",
																"src": "8916:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "8918:16:12",
																				"nodeType": "YulIdentifier",
																				"src": "8918:16:12"
																			},
																			"nativeSrc": "8918:18:12",
																			"nodeType": "YulFunctionCall",
																			"src": "8918:18:12"
																		},
																		"nativeSrc": "8918:18:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "8918:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "sum",
																		"nativeSrc": "8905:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "8905:3:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8910:4:12",
																		"nodeType": "YulLiteral",
																		"src": "8910:4:12",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "8902:2:12",
																	"nodeType": "YulIdentifier",
																	"src": "8902:2:12"
																},
																"nativeSrc": "8902:13:12",
																"nodeType": "YulFunctionCall",
																"src": "8902:13:12"
															},
															"nativeSrc": "8899:39:12",
															"nodeType": "YulIf",
															"src": "8899:39:12"
														}
													]
												},
												"name": "checked_add_t_uint8",
												"nativeSrc": "8757:188:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "8786:1:12",
														"nodeType": "YulTypedName",
														"src": "8786:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "8789:1:12",
														"nodeType": "YulTypedName",
														"src": "8789:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "8795:3:12",
														"nodeType": "YulTypedName",
														"src": "8795:3:12",
														"type": ""
													}
												],
												"src": "8757:188:12"
											},
											{
												"body": {
													"nativeSrc": "8995:147:12",
													"nodeType": "YulBlock",
													"src": "8995:147:12",
													"statements": [
														{
															"nativeSrc": "9005:25:12",
															"nodeType": "YulAssignment",
															"src": "9005:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "9028:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "9028:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "9010:17:12",
																	"nodeType": "YulIdentifier",
																	"src": "9010:17:12"
																},
																"nativeSrc": "9010:20:12",
																"nodeType": "YulFunctionCall",
																"src": "9010:20:12"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "9005:1:12",
																	"nodeType": "YulIdentifier",
																	"src": "9005:1:12"
																}
															]
														},
														{
															"nativeSrc": "9039:25:12",
															"nodeType": "YulAssignment",
															"src": "9039:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "9062:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "9062:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "9044:17:12",
																	"nodeType": "YulIdentifier",
																	"src": "9044:17:12"
																},
																"nativeSrc": "9044:20:12",
																"nodeType": "YulFunctionCall",
																"src": "9044:20:12"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "9039:1:12",
																	"nodeType": "YulIdentifier",
																	"src": "9039:1:12"
																}
															]
														},
														{
															"nativeSrc": "9073:16:12",
															"nodeType": "YulAssignment",
															"src": "9073:16:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "9084:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "9084:1:12"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "9087:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "9087:1:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9080:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "9080:3:12"
																},
																"nativeSrc": "9080:9:12",
																"nodeType": "YulFunctionCall",
																"src": "9080:9:12"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "9073:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "9073:3:12"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "9113:22:12",
																"nodeType": "YulBlock",
																"src": "9113:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "9115:16:12",
																				"nodeType": "YulIdentifier",
																				"src": "9115:16:12"
																			},
																			"nativeSrc": "9115:18:12",
																			"nodeType": "YulFunctionCall",
																			"src": "9115:18:12"
																		},
																		"nativeSrc": "9115:18:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "9115:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "9105:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "9105:1:12"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "9108:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "9108:3:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "9102:2:12",
																	"nodeType": "YulIdentifier",
																	"src": "9102:2:12"
																},
																"nativeSrc": "9102:10:12",
																"nodeType": "YulFunctionCall",
																"src": "9102:10:12"
															},
															"nativeSrc": "9099:36:12",
															"nodeType": "YulIf",
															"src": "9099:36:12"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "8951:191:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "8982:1:12",
														"nodeType": "YulTypedName",
														"src": "8982:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "8985:1:12",
														"nodeType": "YulTypedName",
														"src": "8985:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "8991:3:12",
														"nodeType": "YulTypedName",
														"src": "8991:3:12",
														"type": ""
													}
												],
												"src": "8951:191:12"
											},
											{
												"body": {
													"nativeSrc": "9302:288:12",
													"nodeType": "YulBlock",
													"src": "9302:288:12",
													"statements": [
														{
															"nativeSrc": "9312:26:12",
															"nodeType": "YulAssignment",
															"src": "9312:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "9324:9:12",
																		"nodeType": "YulIdentifier",
																		"src": "9324:9:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9335:2:12",
																		"nodeType": "YulLiteral",
																		"src": "9335:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9320:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "9320:3:12"
																},
																"nativeSrc": "9320:18:12",
																"nodeType": "YulFunctionCall",
																"src": "9320:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "9312:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "9312:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "9392:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "9392:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9405:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "9405:9:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9416:1:12",
																				"nodeType": "YulLiteral",
																				"src": "9416:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9401:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "9401:3:12"
																		},
																		"nativeSrc": "9401:17:12",
																		"nodeType": "YulFunctionCall",
																		"src": "9401:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "9348:43:12",
																	"nodeType": "YulIdentifier",
																	"src": "9348:43:12"
																},
																"nativeSrc": "9348:71:12",
																"nodeType": "YulFunctionCall",
																"src": "9348:71:12"
															},
															"nativeSrc": "9348:71:12",
															"nodeType": "YulExpressionStatement",
															"src": "9348:71:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "9473:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "9473:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9486:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "9486:9:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9497:2:12",
																				"nodeType": "YulLiteral",
																				"src": "9497:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9482:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "9482:3:12"
																		},
																		"nativeSrc": "9482:18:12",
																		"nodeType": "YulFunctionCall",
																		"src": "9482:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "9429:43:12",
																	"nodeType": "YulIdentifier",
																	"src": "9429:43:12"
																},
																"nativeSrc": "9429:72:12",
																"nodeType": "YulFunctionCall",
																"src": "9429:72:12"
															},
															"nativeSrc": "9429:72:12",
															"nodeType": "YulExpressionStatement",
															"src": "9429:72:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "9555:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "9555:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9568:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "9568:9:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9579:2:12",
																				"nodeType": "YulLiteral",
																				"src": "9579:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9564:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "9564:3:12"
																		},
																		"nativeSrc": "9564:18:12",
																		"nodeType": "YulFunctionCall",
																		"src": "9564:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "9511:43:12",
																	"nodeType": "YulIdentifier",
																	"src": "9511:43:12"
																},
																"nativeSrc": "9511:72:12",
																"nodeType": "YulFunctionCall",
																"src": "9511:72:12"
															},
															"nativeSrc": "9511:72:12",
															"nodeType": "YulExpressionStatement",
															"src": "9511:72:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "9148:442:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "9258:9:12",
														"nodeType": "YulTypedName",
														"src": "9258:9:12",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "9270:6:12",
														"nodeType": "YulTypedName",
														"src": "9270:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "9278:6:12",
														"nodeType": "YulTypedName",
														"src": "9278:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "9286:6:12",
														"nodeType": "YulTypedName",
														"src": "9286:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "9297:4:12",
														"nodeType": "YulTypedName",
														"src": "9297:4:12",
														"type": ""
													}
												],
												"src": "9148:442:12"
											},
											{
												"body": {
													"nativeSrc": "9702:71:12",
													"nodeType": "YulBlock",
													"src": "9702:71:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "9724:6:12",
																				"nodeType": "YulIdentifier",
																				"src": "9724:6:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9732:1:12",
																				"nodeType": "YulLiteral",
																				"src": "9732:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9720:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "9720:3:12"
																		},
																		"nativeSrc": "9720:14:12",
																		"nodeType": "YulFunctionCall",
																		"src": "9720:14:12"
																	},
																	{
																		"hexValue": "45786365656473206d617820776974686472617720616d6f756e74",
																		"kind": "string",
																		"nativeSrc": "9736:29:12",
																		"nodeType": "YulLiteral",
																		"src": "9736:29:12",
																		"type": "",
																		"value": "Exceeds max withdraw amount"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9713:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "9713:6:12"
																},
																"nativeSrc": "9713:53:12",
																"nodeType": "YulFunctionCall",
																"src": "9713:53:12"
															},
															"nativeSrc": "9713:53:12",
															"nodeType": "YulExpressionStatement",
															"src": "9713:53:12"
														}
													]
												},
												"name": "store_literal_in_memory_ef106c0bbb744e74987954b239ff90422a58d8a59de2058902bb4271029d7abf",
												"nativeSrc": "9596:177:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "9694:6:12",
														"nodeType": "YulTypedName",
														"src": "9694:6:12",
														"type": ""
													}
												],
												"src": "9596:177:12"
											},
											{
												"body": {
													"nativeSrc": "9925:220:12",
													"nodeType": "YulBlock",
													"src": "9925:220:12",
													"statements": [
														{
															"nativeSrc": "9935:74:12",
															"nodeType": "YulAssignment",
															"src": "9935:74:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "10001:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "10001:3:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10006:2:12",
																		"nodeType": "YulLiteral",
																		"src": "10006:2:12",
																		"type": "",
																		"value": "27"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "9942:58:12",
																	"nodeType": "YulIdentifier",
																	"src": "9942:58:12"
																},
																"nativeSrc": "9942:67:12",
																"nodeType": "YulFunctionCall",
																"src": "9942:67:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "9935:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "9935:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "10107:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "10107:3:12"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_ef106c0bbb744e74987954b239ff90422a58d8a59de2058902bb4271029d7abf",
																	"nativeSrc": "10018:88:12",
																	"nodeType": "YulIdentifier",
																	"src": "10018:88:12"
																},
																"nativeSrc": "10018:93:12",
																"nodeType": "YulFunctionCall",
																"src": "10018:93:12"
															},
															"nativeSrc": "10018:93:12",
															"nodeType": "YulExpressionStatement",
															"src": "10018:93:12"
														},
														{
															"nativeSrc": "10120:19:12",
															"nodeType": "YulAssignment",
															"src": "10120:19:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "10131:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "10131:3:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10136:2:12",
																		"nodeType": "YulLiteral",
																		"src": "10136:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "10127:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "10127:3:12"
																},
																"nativeSrc": "10127:12:12",
																"nodeType": "YulFunctionCall",
																"src": "10127:12:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "10120:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "10120:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_ef106c0bbb744e74987954b239ff90422a58d8a59de2058902bb4271029d7abf_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "9779:366:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "9913:3:12",
														"nodeType": "YulTypedName",
														"src": "9913:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "9921:3:12",
														"nodeType": "YulTypedName",
														"src": "9921:3:12",
														"type": ""
													}
												],
												"src": "9779:366:12"
											},
											{
												"body": {
													"nativeSrc": "10322:248:12",
													"nodeType": "YulBlock",
													"src": "10322:248:12",
													"statements": [
														{
															"nativeSrc": "10332:26:12",
															"nodeType": "YulAssignment",
															"src": "10332:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "10344:9:12",
																		"nodeType": "YulIdentifier",
																		"src": "10344:9:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10355:2:12",
																		"nodeType": "YulLiteral",
																		"src": "10355:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "10340:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "10340:3:12"
																},
																"nativeSrc": "10340:18:12",
																"nodeType": "YulFunctionCall",
																"src": "10340:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "10332:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "10332:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "10379:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "10379:9:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10390:1:12",
																				"nodeType": "YulLiteral",
																				"src": "10390:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10375:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "10375:3:12"
																		},
																		"nativeSrc": "10375:17:12",
																		"nodeType": "YulFunctionCall",
																		"src": "10375:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "10398:4:12",
																				"nodeType": "YulIdentifier",
																				"src": "10398:4:12"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "10404:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "10404:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "10394:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "10394:3:12"
																		},
																		"nativeSrc": "10394:20:12",
																		"nodeType": "YulFunctionCall",
																		"src": "10394:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10368:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "10368:6:12"
																},
																"nativeSrc": "10368:47:12",
																"nodeType": "YulFunctionCall",
																"src": "10368:47:12"
															},
															"nativeSrc": "10368:47:12",
															"nodeType": "YulExpressionStatement",
															"src": "10368:47:12"
														},
														{
															"nativeSrc": "10424:139:12",
															"nodeType": "YulAssignment",
															"src": "10424:139:12",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "10558:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "10558:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_ef106c0bbb744e74987954b239ff90422a58d8a59de2058902bb4271029d7abf_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "10432:124:12",
																	"nodeType": "YulIdentifier",
																	"src": "10432:124:12"
																},
																"nativeSrc": "10432:131:12",
																"nodeType": "YulFunctionCall",
																"src": "10432:131:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "10424:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "10424:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ef106c0bbb744e74987954b239ff90422a58d8a59de2058902bb4271029d7abf__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "10151:419:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "10302:9:12",
														"nodeType": "YulTypedName",
														"src": "10302:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "10317:4:12",
														"nodeType": "YulTypedName",
														"src": "10317:4:12",
														"type": ""
													}
												],
												"src": "10151:419:12"
											},
											{
												"body": {
													"nativeSrc": "10682:114:12",
													"nodeType": "YulBlock",
													"src": "10682:114:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "10704:6:12",
																				"nodeType": "YulIdentifier",
																				"src": "10704:6:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10712:1:12",
																				"nodeType": "YulLiteral",
																				"src": "10712:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10700:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "10700:3:12"
																		},
																		"nativeSrc": "10700:14:12",
																		"nodeType": "YulFunctionCall",
																		"src": "10700:14:12"
																	},
																	{
																		"hexValue": "43616e6e6f74207769746864726177206c6f636b656420636f6c6c6174657261",
																		"kind": "string",
																		"nativeSrc": "10716:34:12",
																		"nodeType": "YulLiteral",
																		"src": "10716:34:12",
																		"type": "",
																		"value": "Cannot withdraw locked collatera"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10693:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "10693:6:12"
																},
																"nativeSrc": "10693:58:12",
																"nodeType": "YulFunctionCall",
																"src": "10693:58:12"
															},
															"nativeSrc": "10693:58:12",
															"nodeType": "YulExpressionStatement",
															"src": "10693:58:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "10772:6:12",
																				"nodeType": "YulIdentifier",
																				"src": "10772:6:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10780:2:12",
																				"nodeType": "YulLiteral",
																				"src": "10780:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10768:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "10768:3:12"
																		},
																		"nativeSrc": "10768:15:12",
																		"nodeType": "YulFunctionCall",
																		"src": "10768:15:12"
																	},
																	{
																		"hexValue": "6c",
																		"kind": "string",
																		"nativeSrc": "10785:3:12",
																		"nodeType": "YulLiteral",
																		"src": "10785:3:12",
																		"type": "",
																		"value": "l"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10761:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "10761:6:12"
																},
																"nativeSrc": "10761:28:12",
																"nodeType": "YulFunctionCall",
																"src": "10761:28:12"
															},
															"nativeSrc": "10761:28:12",
															"nodeType": "YulExpressionStatement",
															"src": "10761:28:12"
														}
													]
												},
												"name": "store_literal_in_memory_806ba8ee32c103c2a737750386240fe468a7ec44d5136f2c1c91c5d6ce999f73",
												"nativeSrc": "10576:220:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "10674:6:12",
														"nodeType": "YulTypedName",
														"src": "10674:6:12",
														"type": ""
													}
												],
												"src": "10576:220:12"
											},
											{
												"body": {
													"nativeSrc": "10948:220:12",
													"nodeType": "YulBlock",
													"src": "10948:220:12",
													"statements": [
														{
															"nativeSrc": "10958:74:12",
															"nodeType": "YulAssignment",
															"src": "10958:74:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "11024:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "11024:3:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11029:2:12",
																		"nodeType": "YulLiteral",
																		"src": "11029:2:12",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "10965:58:12",
																	"nodeType": "YulIdentifier",
																	"src": "10965:58:12"
																},
																"nativeSrc": "10965:67:12",
																"nodeType": "YulFunctionCall",
																"src": "10965:67:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "10958:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "10958:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "11130:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "11130:3:12"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_806ba8ee32c103c2a737750386240fe468a7ec44d5136f2c1c91c5d6ce999f73",
																	"nativeSrc": "11041:88:12",
																	"nodeType": "YulIdentifier",
																	"src": "11041:88:12"
																},
																"nativeSrc": "11041:93:12",
																"nodeType": "YulFunctionCall",
																"src": "11041:93:12"
															},
															"nativeSrc": "11041:93:12",
															"nodeType": "YulExpressionStatement",
															"src": "11041:93:12"
														},
														{
															"nativeSrc": "11143:19:12",
															"nodeType": "YulAssignment",
															"src": "11143:19:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "11154:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "11154:3:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11159:2:12",
																		"nodeType": "YulLiteral",
																		"src": "11159:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "11150:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "11150:3:12"
																},
																"nativeSrc": "11150:12:12",
																"nodeType": "YulFunctionCall",
																"src": "11150:12:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "11143:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "11143:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_806ba8ee32c103c2a737750386240fe468a7ec44d5136f2c1c91c5d6ce999f73_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "10802:366:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "10936:3:12",
														"nodeType": "YulTypedName",
														"src": "10936:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "10944:3:12",
														"nodeType": "YulTypedName",
														"src": "10944:3:12",
														"type": ""
													}
												],
												"src": "10802:366:12"
											},
											{
												"body": {
													"nativeSrc": "11345:248:12",
													"nodeType": "YulBlock",
													"src": "11345:248:12",
													"statements": [
														{
															"nativeSrc": "11355:26:12",
															"nodeType": "YulAssignment",
															"src": "11355:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "11367:9:12",
																		"nodeType": "YulIdentifier",
																		"src": "11367:9:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11378:2:12",
																		"nodeType": "YulLiteral",
																		"src": "11378:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "11363:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "11363:3:12"
																},
																"nativeSrc": "11363:18:12",
																"nodeType": "YulFunctionCall",
																"src": "11363:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "11355:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "11355:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "11402:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "11402:9:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "11413:1:12",
																				"nodeType": "YulLiteral",
																				"src": "11413:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "11398:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "11398:3:12"
																		},
																		"nativeSrc": "11398:17:12",
																		"nodeType": "YulFunctionCall",
																		"src": "11398:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "11421:4:12",
																				"nodeType": "YulIdentifier",
																				"src": "11421:4:12"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "11427:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "11427:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "11417:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "11417:3:12"
																		},
																		"nativeSrc": "11417:20:12",
																		"nodeType": "YulFunctionCall",
																		"src": "11417:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "11391:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "11391:6:12"
																},
																"nativeSrc": "11391:47:12",
																"nodeType": "YulFunctionCall",
																"src": "11391:47:12"
															},
															"nativeSrc": "11391:47:12",
															"nodeType": "YulExpressionStatement",
															"src": "11391:47:12"
														},
														{
															"nativeSrc": "11447:139:12",
															"nodeType": "YulAssignment",
															"src": "11447:139:12",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "11581:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "11581:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_806ba8ee32c103c2a737750386240fe468a7ec44d5136f2c1c91c5d6ce999f73_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "11455:124:12",
																	"nodeType": "YulIdentifier",
																	"src": "11455:124:12"
																},
																"nativeSrc": "11455:131:12",
																"nodeType": "YulFunctionCall",
																"src": "11455:131:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "11447:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "11447:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_806ba8ee32c103c2a737750386240fe468a7ec44d5136f2c1c91c5d6ce999f73__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "11174:419:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "11325:9:12",
														"nodeType": "YulTypedName",
														"src": "11325:9:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "11340:4:12",
														"nodeType": "YulTypedName",
														"src": "11340:4:12",
														"type": ""
													}
												],
												"src": "11174:419:12"
											},
											{
												"body": {
													"nativeSrc": "11650:51:12",
													"nodeType": "YulBlock",
													"src": "11650:51:12",
													"statements": [
														{
															"nativeSrc": "11660:34:12",
															"nodeType": "YulAssignment",
															"src": "11660:34:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11685:1:12",
																		"nodeType": "YulLiteral",
																		"src": "11685:1:12",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "11688:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "11688:5:12"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "11681:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "11681:3:12"
																},
																"nativeSrc": "11681:13:12",
																"nodeType": "YulFunctionCall",
																"src": "11681:13:12"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "11660:8:12",
																	"nodeType": "YulIdentifier",
																	"src": "11660:8:12"
																}
															]
														}
													]
												},
												"name": "shift_right_1_unsigned",
												"nativeSrc": "11599:102:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "11631:5:12",
														"nodeType": "YulTypedName",
														"src": "11631:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "11641:8:12",
														"nodeType": "YulTypedName",
														"src": "11641:8:12",
														"type": ""
													}
												],
												"src": "11599:102:12"
											},
											{
												"body": {
													"nativeSrc": "11780:775:12",
													"nodeType": "YulBlock",
													"src": "11780:775:12",
													"statements": [
														{
															"nativeSrc": "11790:15:12",
															"nodeType": "YulAssignment",
															"src": "11790:15:12",
															"value": {
																"name": "_power",
																"nativeSrc": "11799:6:12",
																"nodeType": "YulIdentifier",
																"src": "11799:6:12"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "11790:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "11790:5:12"
																}
															]
														},
														{
															"nativeSrc": "11814:14:12",
															"nodeType": "YulAssignment",
															"src": "11814:14:12",
															"value": {
																"name": "_base",
																"nativeSrc": "11823:5:12",
																"nodeType": "YulIdentifier",
																"src": "11823:5:12"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nativeSrc": "11814:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "11814:4:12"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "11872:677:12",
																"nodeType": "YulBlock",
																"src": "11872:677:12",
																"statements": [
																	{
																		"body": {
																			"nativeSrc": "11960:22:12",
																			"nodeType": "YulBlock",
																			"src": "11960:22:12",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nativeSrc": "11962:16:12",
																							"nodeType": "YulIdentifier",
																							"src": "11962:16:12"
																						},
																						"nativeSrc": "11962:18:12",
																						"nodeType": "YulFunctionCall",
																						"src": "11962:18:12"
																					},
																					"nativeSrc": "11962:18:12",
																					"nodeType": "YulExpressionStatement",
																					"src": "11962:18:12"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "11938:4:12",
																					"nodeType": "YulIdentifier",
																					"src": "11938:4:12"
																				},
																				{
																					"arguments": [
																						{
																							"name": "max",
																							"nativeSrc": "11948:3:12",
																							"nodeType": "YulIdentifier",
																							"src": "11948:3:12"
																						},
																						{
																							"name": "base",
																							"nativeSrc": "11953:4:12",
																							"nodeType": "YulIdentifier",
																							"src": "11953:4:12"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nativeSrc": "11944:3:12",
																						"nodeType": "YulIdentifier",
																						"src": "11944:3:12"
																					},
																					"nativeSrc": "11944:14:12",
																					"nodeType": "YulFunctionCall",
																					"src": "11944:14:12"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nativeSrc": "11935:2:12",
																				"nodeType": "YulIdentifier",
																				"src": "11935:2:12"
																			},
																			"nativeSrc": "11935:24:12",
																			"nodeType": "YulFunctionCall",
																			"src": "11935:24:12"
																		},
																		"nativeSrc": "11932:50:12",
																		"nodeType": "YulIf",
																		"src": "11932:50:12"
																	},
																	{
																		"body": {
																			"nativeSrc": "12027:419:12",
																			"nodeType": "YulBlock",
																			"src": "12027:419:12",
																			"statements": [
																				{
																					"nativeSrc": "12407:25:12",
																					"nodeType": "YulAssignment",
																					"src": "12407:25:12",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nativeSrc": "12420:5:12",
																								"nodeType": "YulIdentifier",
																								"src": "12420:5:12"
																							},
																							{
																								"name": "base",
																								"nativeSrc": "12427:4:12",
																								"nodeType": "YulIdentifier",
																								"src": "12427:4:12"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nativeSrc": "12416:3:12",
																							"nodeType": "YulIdentifier",
																							"src": "12416:3:12"
																						},
																						"nativeSrc": "12416:16:12",
																						"nodeType": "YulFunctionCall",
																						"src": "12416:16:12"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nativeSrc": "12407:5:12",
																							"nodeType": "YulIdentifier",
																							"src": "12407:5:12"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nativeSrc": "12002:8:12",
																					"nodeType": "YulIdentifier",
																					"src": "12002:8:12"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "12012:1:12",
																					"nodeType": "YulLiteral",
																					"src": "12012:1:12",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "11998:3:12",
																				"nodeType": "YulIdentifier",
																				"src": "11998:3:12"
																			},
																			"nativeSrc": "11998:16:12",
																			"nodeType": "YulFunctionCall",
																			"src": "11998:16:12"
																		},
																		"nativeSrc": "11995:451:12",
																		"nodeType": "YulIf",
																		"src": "11995:451:12"
																	},
																	{
																		"nativeSrc": "12459:23:12",
																		"nodeType": "YulAssignment",
																		"src": "12459:23:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "12471:4:12",
																					"nodeType": "YulIdentifier",
																					"src": "12471:4:12"
																				},
																				{
																					"name": "base",
																					"nativeSrc": "12477:4:12",
																					"nodeType": "YulIdentifier",
																					"src": "12477:4:12"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nativeSrc": "12467:3:12",
																				"nodeType": "YulIdentifier",
																				"src": "12467:3:12"
																			},
																			"nativeSrc": "12467:15:12",
																			"nodeType": "YulFunctionCall",
																			"src": "12467:15:12"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nativeSrc": "12459:4:12",
																				"nodeType": "YulIdentifier",
																				"src": "12459:4:12"
																			}
																		]
																	},
																	{
																		"nativeSrc": "12495:44:12",
																		"nodeType": "YulAssignment",
																		"src": "12495:44:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nativeSrc": "12530:8:12",
																					"nodeType": "YulIdentifier",
																					"src": "12530:8:12"
																				}
																			],
																			"functionName": {
																				"name": "shift_right_1_unsigned",
																				"nativeSrc": "12507:22:12",
																				"nodeType": "YulIdentifier",
																				"src": "12507:22:12"
																			},
																			"nativeSrc": "12507:32:12",
																			"nodeType": "YulFunctionCall",
																			"src": "12507:32:12"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nativeSrc": "12495:8:12",
																				"nodeType": "YulIdentifier",
																				"src": "12495:8:12"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "11848:8:12",
																		"nodeType": "YulIdentifier",
																		"src": "11848:8:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11858:1:12",
																		"nodeType": "YulLiteral",
																		"src": "11858:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "11845:2:12",
																	"nodeType": "YulIdentifier",
																	"src": "11845:2:12"
																},
																"nativeSrc": "11845:15:12",
																"nodeType": "YulFunctionCall",
																"src": "11845:15:12"
															},
															"nativeSrc": "11837:712:12",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "11861:2:12",
																"nodeType": "YulBlock",
																"src": "11861:2:12",
																"statements": []
															},
															"pre": {
																"nativeSrc": "11841:3:12",
																"nodeType": "YulBlock",
																"src": "11841:3:12",
																"statements": []
															},
															"src": "11837:712:12"
														}
													]
												},
												"name": "checked_exp_helper",
												"nativeSrc": "11707:848:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_power",
														"nativeSrc": "11735:6:12",
														"nodeType": "YulTypedName",
														"src": "11735:6:12",
														"type": ""
													},
													{
														"name": "_base",
														"nativeSrc": "11743:5:12",
														"nodeType": "YulTypedName",
														"src": "11743:5:12",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "11750:8:12",
														"nodeType": "YulTypedName",
														"src": "11750:8:12",
														"type": ""
													},
													{
														"name": "max",
														"nativeSrc": "11760:3:12",
														"nodeType": "YulTypedName",
														"src": "11760:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "11768:5:12",
														"nodeType": "YulTypedName",
														"src": "11768:5:12",
														"type": ""
													},
													{
														"name": "base",
														"nativeSrc": "11775:4:12",
														"nodeType": "YulTypedName",
														"src": "11775:4:12",
														"type": ""
													}
												],
												"src": "11707:848:12"
											},
											{
												"body": {
													"nativeSrc": "12621:1013:12",
													"nodeType": "YulBlock",
													"src": "12621:1013:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "12816:20:12",
																"nodeType": "YulBlock",
																"src": "12816:20:12",
																"statements": [
																	{
																		"nativeSrc": "12818:10:12",
																		"nodeType": "YulAssignment",
																		"src": "12818:10:12",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "12827:1:12",
																			"nodeType": "YulLiteral",
																			"src": "12827:1:12",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "12818:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "12818:5:12"
																			}
																		]
																	},
																	{
																		"nativeSrc": "12829:5:12",
																		"nodeType": "YulLeave",
																		"src": "12829:5:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "12806:8:12",
																		"nodeType": "YulIdentifier",
																		"src": "12806:8:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "12799:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "12799:6:12"
																},
																"nativeSrc": "12799:16:12",
																"nodeType": "YulFunctionCall",
																"src": "12799:16:12"
															},
															"nativeSrc": "12796:40:12",
															"nodeType": "YulIf",
															"src": "12796:40:12"
														},
														{
															"body": {
																"nativeSrc": "12861:20:12",
																"nodeType": "YulBlock",
																"src": "12861:20:12",
																"statements": [
																	{
																		"nativeSrc": "12863:10:12",
																		"nodeType": "YulAssignment",
																		"src": "12863:10:12",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "12872:1:12",
																			"nodeType": "YulLiteral",
																			"src": "12872:1:12",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "12863:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "12863:5:12"
																			}
																		]
																	},
																	{
																		"nativeSrc": "12874:5:12",
																		"nodeType": "YulLeave",
																		"src": "12874:5:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "12855:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "12855:4:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "12848:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "12848:6:12"
																},
																"nativeSrc": "12848:12:12",
																"nodeType": "YulFunctionCall",
																"src": "12848:12:12"
															},
															"nativeSrc": "12845:36:12",
															"nodeType": "YulIf",
															"src": "12845:36:12"
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "12991:20:12",
																		"nodeType": "YulBlock",
																		"src": "12991:20:12",
																		"statements": [
																			{
																				"nativeSrc": "12993:10:12",
																				"nodeType": "YulAssignment",
																				"src": "12993:10:12",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "13002:1:12",
																					"nodeType": "YulLiteral",
																					"src": "13002:1:12",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "12993:5:12",
																						"nodeType": "YulIdentifier",
																						"src": "12993:5:12"
																					}
																				]
																			},
																			{
																				"nativeSrc": "13004:5:12",
																				"nodeType": "YulLeave",
																				"src": "13004:5:12"
																			}
																		]
																	},
																	"nativeSrc": "12984:27:12",
																	"nodeType": "YulCase",
																	"src": "12984:27:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "12989:1:12",
																		"nodeType": "YulLiteral",
																		"src": "12989:1:12",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "13035:176:12",
																		"nodeType": "YulBlock",
																		"src": "13035:176:12",
																		"statements": [
																			{
																				"body": {
																					"nativeSrc": "13070:22:12",
																					"nodeType": "YulBlock",
																					"src": "13070:22:12",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nativeSrc": "13072:16:12",
																									"nodeType": "YulIdentifier",
																									"src": "13072:16:12"
																								},
																								"nativeSrc": "13072:18:12",
																								"nodeType": "YulFunctionCall",
																								"src": "13072:18:12"
																							},
																							"nativeSrc": "13072:18:12",
																							"nodeType": "YulExpressionStatement",
																							"src": "13072:18:12"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "13055:8:12",
																							"nodeType": "YulIdentifier",
																							"src": "13055:8:12"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "13065:3:12",
																							"nodeType": "YulLiteral",
																							"src": "13065:3:12",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nativeSrc": "13052:2:12",
																						"nodeType": "YulIdentifier",
																						"src": "13052:2:12"
																					},
																					"nativeSrc": "13052:17:12",
																					"nodeType": "YulFunctionCall",
																					"src": "13052:17:12"
																				},
																				"nativeSrc": "13049:43:12",
																				"nodeType": "YulIf",
																				"src": "13049:43:12"
																			},
																			{
																				"nativeSrc": "13105:25:12",
																				"nodeType": "YulAssignment",
																				"src": "13105:25:12",
																				"value": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "13118:1:12",
																							"nodeType": "YulLiteral",
																							"src": "13118:1:12",
																							"type": "",
																							"value": "2"
																						},
																						{
																							"name": "exponent",
																							"nativeSrc": "13121:8:12",
																							"nodeType": "YulIdentifier",
																							"src": "13121:8:12"
																						}
																					],
																					"functionName": {
																						"name": "exp",
																						"nativeSrc": "13114:3:12",
																						"nodeType": "YulIdentifier",
																						"src": "13114:3:12"
																					},
																					"nativeSrc": "13114:16:12",
																					"nodeType": "YulFunctionCall",
																					"src": "13114:16:12"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "13105:5:12",
																						"nodeType": "YulIdentifier",
																						"src": "13105:5:12"
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "13161:22:12",
																					"nodeType": "YulBlock",
																					"src": "13161:22:12",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nativeSrc": "13163:16:12",
																									"nodeType": "YulIdentifier",
																									"src": "13163:16:12"
																								},
																								"nativeSrc": "13163:18:12",
																								"nodeType": "YulFunctionCall",
																								"src": "13163:18:12"
																							},
																							"nativeSrc": "13163:18:12",
																							"nodeType": "YulExpressionStatement",
																							"src": "13163:18:12"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "power",
																							"nativeSrc": "13149:5:12",
																							"nodeType": "YulIdentifier",
																							"src": "13149:5:12"
																						},
																						{
																							"name": "max",
																							"nativeSrc": "13156:3:12",
																							"nodeType": "YulIdentifier",
																							"src": "13156:3:12"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nativeSrc": "13146:2:12",
																						"nodeType": "YulIdentifier",
																						"src": "13146:2:12"
																					},
																					"nativeSrc": "13146:14:12",
																					"nodeType": "YulFunctionCall",
																					"src": "13146:14:12"
																				},
																				"nativeSrc": "13143:40:12",
																				"nodeType": "YulIf",
																				"src": "13143:40:12"
																			},
																			{
																				"nativeSrc": "13196:5:12",
																				"nodeType": "YulLeave",
																				"src": "13196:5:12"
																			}
																		]
																	},
																	"nativeSrc": "13020:191:12",
																	"nodeType": "YulCase",
																	"src": "13020:191:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "13025:1:12",
																		"nodeType": "YulLiteral",
																		"src": "13025:1:12",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nativeSrc": "12941:4:12",
																"nodeType": "YulIdentifier",
																"src": "12941:4:12"
															},
															"nativeSrc": "12934:277:12",
															"nodeType": "YulSwitch",
															"src": "12934:277:12"
														},
														{
															"body": {
																"nativeSrc": "13343:123:12",
																"nodeType": "YulBlock",
																"src": "13343:123:12",
																"statements": [
																	{
																		"nativeSrc": "13357:28:12",
																		"nodeType": "YulAssignment",
																		"src": "13357:28:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "13370:4:12",
																					"nodeType": "YulIdentifier",
																					"src": "13370:4:12"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "13376:8:12",
																					"nodeType": "YulIdentifier",
																					"src": "13376:8:12"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nativeSrc": "13366:3:12",
																				"nodeType": "YulIdentifier",
																				"src": "13366:3:12"
																			},
																			"nativeSrc": "13366:19:12",
																			"nodeType": "YulFunctionCall",
																			"src": "13366:19:12"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "13357:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "13357:5:12"
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "13416:22:12",
																			"nodeType": "YulBlock",
																			"src": "13416:22:12",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nativeSrc": "13418:16:12",
																							"nodeType": "YulIdentifier",
																							"src": "13418:16:12"
																						},
																						"nativeSrc": "13418:18:12",
																						"nodeType": "YulFunctionCall",
																						"src": "13418:18:12"
																					},
																					"nativeSrc": "13418:18:12",
																					"nodeType": "YulExpressionStatement",
																					"src": "13418:18:12"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "power",
																					"nativeSrc": "13404:5:12",
																					"nodeType": "YulIdentifier",
																					"src": "13404:5:12"
																				},
																				{
																					"name": "max",
																					"nativeSrc": "13411:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "13411:3:12"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nativeSrc": "13401:2:12",
																				"nodeType": "YulIdentifier",
																				"src": "13401:2:12"
																			},
																			"nativeSrc": "13401:14:12",
																			"nodeType": "YulFunctionCall",
																			"src": "13401:14:12"
																		},
																		"nativeSrc": "13398:40:12",
																		"nodeType": "YulIf",
																		"src": "13398:40:12"
																	},
																	{
																		"nativeSrc": "13451:5:12",
																		"nodeType": "YulLeave",
																		"src": "13451:5:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "13246:4:12",
																						"nodeType": "YulIdentifier",
																						"src": "13246:4:12"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "13252:2:12",
																						"nodeType": "YulLiteral",
																						"src": "13252:2:12",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "13243:2:12",
																					"nodeType": "YulIdentifier",
																					"src": "13243:2:12"
																				},
																				"nativeSrc": "13243:12:12",
																				"nodeType": "YulFunctionCall",
																				"src": "13243:12:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "13260:8:12",
																						"nodeType": "YulIdentifier",
																						"src": "13260:8:12"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "13270:2:12",
																						"nodeType": "YulLiteral",
																						"src": "13270:2:12",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "13257:2:12",
																					"nodeType": "YulIdentifier",
																					"src": "13257:2:12"
																				},
																				"nativeSrc": "13257:16:12",
																				"nodeType": "YulFunctionCall",
																				"src": "13257:16:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "13239:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "13239:3:12"
																		},
																		"nativeSrc": "13239:35:12",
																		"nodeType": "YulFunctionCall",
																		"src": "13239:35:12"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "13295:4:12",
																						"nodeType": "YulIdentifier",
																						"src": "13295:4:12"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "13301:3:12",
																						"nodeType": "YulLiteral",
																						"src": "13301:3:12",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "13292:2:12",
																					"nodeType": "YulIdentifier",
																					"src": "13292:2:12"
																				},
																				"nativeSrc": "13292:13:12",
																				"nodeType": "YulFunctionCall",
																				"src": "13292:13:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "13310:8:12",
																						"nodeType": "YulIdentifier",
																						"src": "13310:8:12"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "13320:2:12",
																						"nodeType": "YulLiteral",
																						"src": "13320:2:12",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "13307:2:12",
																					"nodeType": "YulIdentifier",
																					"src": "13307:2:12"
																				},
																				"nativeSrc": "13307:16:12",
																				"nodeType": "YulFunctionCall",
																				"src": "13307:16:12"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "13288:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "13288:3:12"
																		},
																		"nativeSrc": "13288:36:12",
																		"nodeType": "YulFunctionCall",
																		"src": "13288:36:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "13223:2:12",
																	"nodeType": "YulIdentifier",
																	"src": "13223:2:12"
																},
																"nativeSrc": "13223:111:12",
																"nodeType": "YulFunctionCall",
																"src": "13223:111:12"
															},
															"nativeSrc": "13220:246:12",
															"nodeType": "YulIf",
															"src": "13220:246:12"
														},
														{
															"nativeSrc": "13476:57:12",
															"nodeType": "YulAssignment",
															"src": "13476:57:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "13510:1:12",
																		"nodeType": "YulLiteral",
																		"src": "13510:1:12",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "base",
																		"nativeSrc": "13513:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "13513:4:12"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "13519:8:12",
																		"nodeType": "YulIdentifier",
																		"src": "13519:8:12"
																	},
																	{
																		"name": "max",
																		"nativeSrc": "13529:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "13529:3:12"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nativeSrc": "13491:18:12",
																	"nodeType": "YulIdentifier",
																	"src": "13491:18:12"
																},
																"nativeSrc": "13491:42:12",
																"nodeType": "YulFunctionCall",
																"src": "13491:42:12"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "13476:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "13476:5:12"
																},
																{
																	"name": "base",
																	"nativeSrc": "13483:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "13483:4:12"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "13572:22:12",
																"nodeType": "YulBlock",
																"src": "13572:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "13574:16:12",
																				"nodeType": "YulIdentifier",
																				"src": "13574:16:12"
																			},
																			"nativeSrc": "13574:18:12",
																			"nodeType": "YulFunctionCall",
																			"src": "13574:18:12"
																		},
																		"nativeSrc": "13574:18:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "13574:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power",
																		"nativeSrc": "13549:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "13549:5:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "max",
																				"nativeSrc": "13560:3:12",
																				"nodeType": "YulIdentifier",
																				"src": "13560:3:12"
																			},
																			{
																				"name": "base",
																				"nativeSrc": "13565:4:12",
																				"nodeType": "YulIdentifier",
																				"src": "13565:4:12"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "13556:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "13556:3:12"
																		},
																		"nativeSrc": "13556:14:12",
																		"nodeType": "YulFunctionCall",
																		"src": "13556:14:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "13546:2:12",
																	"nodeType": "YulIdentifier",
																	"src": "13546:2:12"
																},
																"nativeSrc": "13546:25:12",
																"nodeType": "YulFunctionCall",
																"src": "13546:25:12"
															},
															"nativeSrc": "13543:51:12",
															"nodeType": "YulIf",
															"src": "13543:51:12"
														},
														{
															"nativeSrc": "13603:25:12",
															"nodeType": "YulAssignment",
															"src": "13603:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "power",
																		"nativeSrc": "13616:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "13616:5:12"
																	},
																	{
																		"name": "base",
																		"nativeSrc": "13623:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "13623:4:12"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "13612:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "13612:3:12"
																},
																"nativeSrc": "13612:16:12",
																"nodeType": "YulFunctionCall",
																"src": "13612:16:12"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "13603:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "13603:5:12"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nativeSrc": "12561:1073:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "12591:4:12",
														"nodeType": "YulTypedName",
														"src": "12591:4:12",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "12597:8:12",
														"nodeType": "YulTypedName",
														"src": "12597:8:12",
														"type": ""
													},
													{
														"name": "max",
														"nativeSrc": "12607:3:12",
														"nodeType": "YulTypedName",
														"src": "12607:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "12615:5:12",
														"nodeType": "YulTypedName",
														"src": "12615:5:12",
														"type": ""
													}
												],
												"src": "12561:1073:12"
											},
											{
												"body": {
													"nativeSrc": "13704:217:12",
													"nodeType": "YulBlock",
													"src": "13704:217:12",
													"statements": [
														{
															"nativeSrc": "13714:31:12",
															"nodeType": "YulAssignment",
															"src": "13714:31:12",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "13740:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "13740:4:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "13722:17:12",
																	"nodeType": "YulIdentifier",
																	"src": "13722:17:12"
																},
																"nativeSrc": "13722:23:12",
																"nodeType": "YulFunctionCall",
																"src": "13722:23:12"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nativeSrc": "13714:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "13714:4:12"
																}
															]
														},
														{
															"nativeSrc": "13754:37:12",
															"nodeType": "YulAssignment",
															"src": "13754:37:12",
															"value": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "13782:8:12",
																		"nodeType": "YulIdentifier",
																		"src": "13782:8:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nativeSrc": "13766:15:12",
																	"nodeType": "YulIdentifier",
																	"src": "13766:15:12"
																},
																"nativeSrc": "13766:25:12",
																"nodeType": "YulFunctionCall",
																"src": "13766:25:12"
															},
															"variableNames": [
																{
																	"name": "exponent",
																	"nativeSrc": "13754:8:12",
																	"nodeType": "YulIdentifier",
																	"src": "13754:8:12"
																}
															]
														},
														{
															"nativeSrc": "13801:113:12",
															"nodeType": "YulAssignment",
															"src": "13801:113:12",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "13831:4:12",
																		"nodeType": "YulIdentifier",
																		"src": "13831:4:12"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "13837:8:12",
																		"nodeType": "YulIdentifier",
																		"src": "13837:8:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "13847:66:12",
																		"nodeType": "YulLiteral",
																		"src": "13847:66:12",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nativeSrc": "13810:20:12",
																	"nodeType": "YulIdentifier",
																	"src": "13810:20:12"
																},
																"nativeSrc": "13810:104:12",
																"nodeType": "YulFunctionCall",
																"src": "13810:104:12"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "13801:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "13801:5:12"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint8",
												"nativeSrc": "13640:281:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "13679:4:12",
														"nodeType": "YulTypedName",
														"src": "13679:4:12",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "13685:8:12",
														"nodeType": "YulTypedName",
														"src": "13685:8:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "13698:5:12",
														"nodeType": "YulTypedName",
														"src": "13698:5:12",
														"type": ""
													}
												],
												"src": "13640:281:12"
											},
											{
												"body": {
													"nativeSrc": "14053:206:12",
													"nodeType": "YulBlock",
													"src": "14053:206:12",
													"statements": [
														{
															"nativeSrc": "14063:26:12",
															"nodeType": "YulAssignment",
															"src": "14063:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "14075:9:12",
																		"nodeType": "YulIdentifier",
																		"src": "14075:9:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "14086:2:12",
																		"nodeType": "YulLiteral",
																		"src": "14086:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "14071:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "14071:3:12"
																},
																"nativeSrc": "14071:18:12",
																"nodeType": "YulFunctionCall",
																"src": "14071:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "14063:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "14063:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "14143:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "14143:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14156:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "14156:9:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14167:1:12",
																				"nodeType": "YulLiteral",
																				"src": "14167:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14152:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "14152:3:12"
																		},
																		"nativeSrc": "14152:17:12",
																		"nodeType": "YulFunctionCall",
																		"src": "14152:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "14099:43:12",
																	"nodeType": "YulIdentifier",
																	"src": "14099:43:12"
																},
																"nativeSrc": "14099:71:12",
																"nodeType": "YulFunctionCall",
																"src": "14099:71:12"
															},
															"nativeSrc": "14099:71:12",
															"nodeType": "YulExpressionStatement",
															"src": "14099:71:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "14224:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "14224:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14237:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "14237:9:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14248:2:12",
																				"nodeType": "YulLiteral",
																				"src": "14248:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14233:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "14233:3:12"
																		},
																		"nativeSrc": "14233:18:12",
																		"nodeType": "YulFunctionCall",
																		"src": "14233:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "14180:43:12",
																	"nodeType": "YulIdentifier",
																	"src": "14180:43:12"
																},
																"nativeSrc": "14180:72:12",
																"nodeType": "YulFunctionCall",
																"src": "14180:72:12"
															},
															"nativeSrc": "14180:72:12",
															"nodeType": "YulExpressionStatement",
															"src": "14180:72:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "13927:332:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "14017:9:12",
														"nodeType": "YulTypedName",
														"src": "14017:9:12",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "14029:6:12",
														"nodeType": "YulTypedName",
														"src": "14029:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "14037:6:12",
														"nodeType": "YulTypedName",
														"src": "14037:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "14048:4:12",
														"nodeType": "YulTypedName",
														"src": "14048:4:12",
														"type": ""
													}
												],
												"src": "13927:332:12"
											},
											{
												"body": {
													"nativeSrc": "14293:152:12",
													"nodeType": "YulBlock",
													"src": "14293:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "14310:1:12",
																		"nodeType": "YulLiteral",
																		"src": "14310:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "14313:77:12",
																		"nodeType": "YulLiteral",
																		"src": "14313:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "14303:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "14303:6:12"
																},
																"nativeSrc": "14303:88:12",
																"nodeType": "YulFunctionCall",
																"src": "14303:88:12"
															},
															"nativeSrc": "14303:88:12",
															"nodeType": "YulExpressionStatement",
															"src": "14303:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "14407:1:12",
																		"nodeType": "YulLiteral",
																		"src": "14407:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "14410:4:12",
																		"nodeType": "YulLiteral",
																		"src": "14410:4:12",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "14400:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "14400:6:12"
																},
																"nativeSrc": "14400:15:12",
																"nodeType": "YulFunctionCall",
																"src": "14400:15:12"
															},
															"nativeSrc": "14400:15:12",
															"nodeType": "YulExpressionStatement",
															"src": "14400:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "14431:1:12",
																		"nodeType": "YulLiteral",
																		"src": "14431:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "14434:4:12",
																		"nodeType": "YulLiteral",
																		"src": "14434:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "14424:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "14424:6:12"
																},
																"nativeSrc": "14424:15:12",
																"nodeType": "YulFunctionCall",
																"src": "14424:15:12"
															},
															"nativeSrc": "14424:15:12",
															"nodeType": "YulExpressionStatement",
															"src": "14424:15:12"
														}
													]
												},
												"name": "panic_error_0x12",
												"nativeSrc": "14265:180:12",
												"nodeType": "YulFunctionDefinition",
												"src": "14265:180:12"
											},
											{
												"body": {
													"nativeSrc": "14605:288:12",
													"nodeType": "YulBlock",
													"src": "14605:288:12",
													"statements": [
														{
															"nativeSrc": "14615:26:12",
															"nodeType": "YulAssignment",
															"src": "14615:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "14627:9:12",
																		"nodeType": "YulIdentifier",
																		"src": "14627:9:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "14638:2:12",
																		"nodeType": "YulLiteral",
																		"src": "14638:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "14623:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "14623:3:12"
																},
																"nativeSrc": "14623:18:12",
																"nodeType": "YulFunctionCall",
																"src": "14623:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "14615:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "14615:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "14695:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "14695:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14708:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "14708:9:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14719:1:12",
																				"nodeType": "YulLiteral",
																				"src": "14719:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14704:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "14704:3:12"
																		},
																		"nativeSrc": "14704:17:12",
																		"nodeType": "YulFunctionCall",
																		"src": "14704:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "14651:43:12",
																	"nodeType": "YulIdentifier",
																	"src": "14651:43:12"
																},
																"nativeSrc": "14651:71:12",
																"nodeType": "YulFunctionCall",
																"src": "14651:71:12"
															},
															"nativeSrc": "14651:71:12",
															"nodeType": "YulExpressionStatement",
															"src": "14651:71:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "14776:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "14776:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14789:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "14789:9:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14800:2:12",
																				"nodeType": "YulLiteral",
																				"src": "14800:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14785:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "14785:3:12"
																		},
																		"nativeSrc": "14785:18:12",
																		"nodeType": "YulFunctionCall",
																		"src": "14785:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "14732:43:12",
																	"nodeType": "YulIdentifier",
																	"src": "14732:43:12"
																},
																"nativeSrc": "14732:72:12",
																"nodeType": "YulFunctionCall",
																"src": "14732:72:12"
															},
															"nativeSrc": "14732:72:12",
															"nodeType": "YulExpressionStatement",
															"src": "14732:72:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "14858:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "14858:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14871:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "14871:9:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14882:2:12",
																				"nodeType": "YulLiteral",
																				"src": "14882:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14867:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "14867:3:12"
																		},
																		"nativeSrc": "14867:18:12",
																		"nodeType": "YulFunctionCall",
																		"src": "14867:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "14814:43:12",
																	"nodeType": "YulIdentifier",
																	"src": "14814:43:12"
																},
																"nativeSrc": "14814:72:12",
																"nodeType": "YulFunctionCall",
																"src": "14814:72:12"
															},
															"nativeSrc": "14814:72:12",
															"nodeType": "YulExpressionStatement",
															"src": "14814:72:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nativeSrc": "14451:442:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "14561:9:12",
														"nodeType": "YulTypedName",
														"src": "14561:9:12",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "14573:6:12",
														"nodeType": "YulTypedName",
														"src": "14573:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "14581:6:12",
														"nodeType": "YulTypedName",
														"src": "14581:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "14589:6:12",
														"nodeType": "YulTypedName",
														"src": "14589:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "14600:4:12",
														"nodeType": "YulTypedName",
														"src": "14600:4:12",
														"type": ""
													}
												],
												"src": "14451:442:12"
											},
											{
												"body": {
													"nativeSrc": "15025:206:12",
													"nodeType": "YulBlock",
													"src": "15025:206:12",
													"statements": [
														{
															"nativeSrc": "15035:26:12",
															"nodeType": "YulAssignment",
															"src": "15035:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "15047:9:12",
																		"nodeType": "YulIdentifier",
																		"src": "15047:9:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15058:2:12",
																		"nodeType": "YulLiteral",
																		"src": "15058:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "15043:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "15043:3:12"
																},
																"nativeSrc": "15043:18:12",
																"nodeType": "YulFunctionCall",
																"src": "15043:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "15035:4:12",
																	"nodeType": "YulIdentifier",
																	"src": "15035:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "15115:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "15115:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "15128:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "15128:9:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "15139:1:12",
																				"nodeType": "YulLiteral",
																				"src": "15139:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "15124:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "15124:3:12"
																		},
																		"nativeSrc": "15124:17:12",
																		"nodeType": "YulFunctionCall",
																		"src": "15124:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "15071:43:12",
																	"nodeType": "YulIdentifier",
																	"src": "15071:43:12"
																},
																"nativeSrc": "15071:71:12",
																"nodeType": "YulFunctionCall",
																"src": "15071:71:12"
															},
															"nativeSrc": "15071:71:12",
															"nodeType": "YulExpressionStatement",
															"src": "15071:71:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "15196:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "15196:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "15209:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "15209:9:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "15220:2:12",
																				"nodeType": "YulLiteral",
																				"src": "15220:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "15205:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "15205:3:12"
																		},
																		"nativeSrc": "15205:18:12",
																		"nodeType": "YulFunctionCall",
																		"src": "15205:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "15152:43:12",
																	"nodeType": "YulIdentifier",
																	"src": "15152:43:12"
																},
																"nativeSrc": "15152:72:12",
																"nodeType": "YulFunctionCall",
																"src": "15152:72:12"
															},
															"nativeSrc": "15152:72:12",
															"nodeType": "YulExpressionStatement",
															"src": "15152:72:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nativeSrc": "14899:332:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "14989:9:12",
														"nodeType": "YulTypedName",
														"src": "14989:9:12",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "15001:6:12",
														"nodeType": "YulTypedName",
														"src": "15001:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "15009:6:12",
														"nodeType": "YulTypedName",
														"src": "15009:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "15020:4:12",
														"nodeType": "YulTypedName",
														"src": "15020:4:12",
														"type": ""
													}
												],
												"src": "14899:332:12"
											},
											{
												"body": {
													"nativeSrc": "15265:152:12",
													"nodeType": "YulBlock",
													"src": "15265:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "15282:1:12",
																		"nodeType": "YulLiteral",
																		"src": "15282:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15285:77:12",
																		"nodeType": "YulLiteral",
																		"src": "15285:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "15275:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "15275:6:12"
																},
																"nativeSrc": "15275:88:12",
																"nodeType": "YulFunctionCall",
																"src": "15275:88:12"
															},
															"nativeSrc": "15275:88:12",
															"nodeType": "YulExpressionStatement",
															"src": "15275:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "15379:1:12",
																		"nodeType": "YulLiteral",
																		"src": "15379:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15382:4:12",
																		"nodeType": "YulLiteral",
																		"src": "15382:4:12",
																		"type": "",
																		"value": "0x21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "15372:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "15372:6:12"
																},
																"nativeSrc": "15372:15:12",
																"nodeType": "YulFunctionCall",
																"src": "15372:15:12"
															},
															"nativeSrc": "15372:15:12",
															"nodeType": "YulExpressionStatement",
															"src": "15372:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "15403:1:12",
																		"nodeType": "YulLiteral",
																		"src": "15403:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15406:4:12",
																		"nodeType": "YulLiteral",
																		"src": "15406:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "15396:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "15396:6:12"
																},
																"nativeSrc": "15396:15:12",
																"nodeType": "YulFunctionCall",
																"src": "15396:15:12"
															},
															"nativeSrc": "15396:15:12",
															"nodeType": "YulExpressionStatement",
															"src": "15396:15:12"
														}
													]
												},
												"name": "panic_error_0x21",
												"nativeSrc": "15237:180:12",
												"nodeType": "YulFunctionDefinition",
												"src": "15237:180:12"
											},
											{
												"body": {
													"nativeSrc": "15455:138:12",
													"nodeType": "YulBlock",
													"src": "15455:138:12",
													"statements": [
														{
															"nativeSrc": "15465:23:12",
															"nodeType": "YulAssignment",
															"src": "15465:23:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "15486:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "15486:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nativeSrc": "15470:15:12",
																	"nodeType": "YulIdentifier",
																	"src": "15470:15:12"
																},
																"nativeSrc": "15470:18:12",
																"nodeType": "YulFunctionCall",
																"src": "15470:18:12"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "15465:1:12",
																	"nodeType": "YulIdentifier",
																	"src": "15465:1:12"
																}
															]
														},
														{
															"nativeSrc": "15497:23:12",
															"nodeType": "YulAssignment",
															"src": "15497:23:12",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "15518:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "15518:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nativeSrc": "15502:15:12",
																	"nodeType": "YulIdentifier",
																	"src": "15502:15:12"
																},
																"nativeSrc": "15502:18:12",
																"nodeType": "YulFunctionCall",
																"src": "15502:18:12"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "15497:1:12",
																	"nodeType": "YulIdentifier",
																	"src": "15497:1:12"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "15542:22:12",
																"nodeType": "YulBlock",
																"src": "15542:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nativeSrc": "15544:16:12",
																				"nodeType": "YulIdentifier",
																				"src": "15544:16:12"
																			},
																			"nativeSrc": "15544:18:12",
																			"nodeType": "YulFunctionCall",
																			"src": "15544:18:12"
																		},
																		"nativeSrc": "15544:18:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "15544:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "15539:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "15539:1:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "15532:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "15532:6:12"
																},
																"nativeSrc": "15532:9:12",
																"nodeType": "YulFunctionCall",
																"src": "15532:9:12"
															},
															"nativeSrc": "15529:35:12",
															"nodeType": "YulIf",
															"src": "15529:35:12"
														},
														{
															"nativeSrc": "15573:14:12",
															"nodeType": "YulAssignment",
															"src": "15573:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "15582:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "15582:1:12"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "15585:1:12",
																		"nodeType": "YulIdentifier",
																		"src": "15585:1:12"
																	}
																],
																"functionName": {
																	"name": "mod",
																	"nativeSrc": "15578:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "15578:3:12"
																},
																"nativeSrc": "15578:9:12",
																"nodeType": "YulFunctionCall",
																"src": "15578:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nativeSrc": "15573:1:12",
																	"nodeType": "YulIdentifier",
																	"src": "15573:1:12"
																}
															]
														}
													]
												},
												"name": "mod_t_uint8",
												"nativeSrc": "15423:170:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "15444:1:12",
														"nodeType": "YulTypedName",
														"src": "15444:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "15447:1:12",
														"nodeType": "YulTypedName",
														"src": "15447:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nativeSrc": "15453:1:12",
														"nodeType": "YulTypedName",
														"src": "15453:1:12",
														"type": ""
													}
												],
												"src": "15423:170:12"
											},
											{
												"body": {
													"nativeSrc": "15639:76:12",
													"nodeType": "YulBlock",
													"src": "15639:76:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "15693:16:12",
																"nodeType": "YulBlock",
																"src": "15693:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "15702:1:12",
																					"nodeType": "YulLiteral",
																					"src": "15702:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "15705:1:12",
																					"nodeType": "YulLiteral",
																					"src": "15705:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "15695:6:12",
																				"nodeType": "YulIdentifier",
																				"src": "15695:6:12"
																			},
																			"nativeSrc": "15695:12:12",
																			"nodeType": "YulFunctionCall",
																			"src": "15695:12:12"
																		},
																		"nativeSrc": "15695:12:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "15695:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "15662:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "15662:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "15684:5:12",
																						"nodeType": "YulIdentifier",
																						"src": "15684:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nativeSrc": "15669:14:12",
																					"nodeType": "YulIdentifier",
																					"src": "15669:14:12"
																				},
																				"nativeSrc": "15669:21:12",
																				"nodeType": "YulFunctionCall",
																				"src": "15669:21:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "15659:2:12",
																			"nodeType": "YulIdentifier",
																			"src": "15659:2:12"
																		},
																		"nativeSrc": "15659:32:12",
																		"nodeType": "YulFunctionCall",
																		"src": "15659:32:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "15652:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "15652:6:12"
																},
																"nativeSrc": "15652:40:12",
																"nodeType": "YulFunctionCall",
																"src": "15652:40:12"
															},
															"nativeSrc": "15649:60:12",
															"nodeType": "YulIf",
															"src": "15649:60:12"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nativeSrc": "15599:116:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "15632:5:12",
														"nodeType": "YulTypedName",
														"src": "15632:5:12",
														"type": ""
													}
												],
												"src": "15599:116:12"
											},
											{
												"body": {
													"nativeSrc": "15781:77:12",
													"nodeType": "YulBlock",
													"src": "15781:77:12",
													"statements": [
														{
															"nativeSrc": "15791:22:12",
															"nodeType": "YulAssignment",
															"src": "15791:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "15806:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "15806:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "15800:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "15800:5:12"
																},
																"nativeSrc": "15800:13:12",
																"nodeType": "YulFunctionCall",
																"src": "15800:13:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "15791:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "15791:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "15846:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "15846:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nativeSrc": "15822:23:12",
																	"nodeType": "YulIdentifier",
																	"src": "15822:23:12"
																},
																"nativeSrc": "15822:30:12",
																"nodeType": "YulFunctionCall",
																"src": "15822:30:12"
															},
															"nativeSrc": "15822:30:12",
															"nodeType": "YulExpressionStatement",
															"src": "15822:30:12"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nativeSrc": "15721:137:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "15759:6:12",
														"nodeType": "YulTypedName",
														"src": "15759:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "15767:3:12",
														"nodeType": "YulTypedName",
														"src": "15767:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "15775:5:12",
														"nodeType": "YulTypedName",
														"src": "15775:5:12",
														"type": ""
													}
												],
												"src": "15721:137:12"
											},
											{
												"body": {
													"nativeSrc": "15938:271:12",
													"nodeType": "YulBlock",
													"src": "15938:271:12",
													"statements": [
														{
															"body": {
																"nativeSrc": "15984:83:12",
																"nodeType": "YulBlock",
																"src": "15984:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "15986:77:12",
																				"nodeType": "YulIdentifier",
																				"src": "15986:77:12"
																			},
																			"nativeSrc": "15986:79:12",
																			"nodeType": "YulFunctionCall",
																			"src": "15986:79:12"
																		},
																		"nativeSrc": "15986:79:12",
																		"nodeType": "YulExpressionStatement",
																		"src": "15986:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "15959:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "15959:7:12"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "15968:9:12",
																				"nodeType": "YulIdentifier",
																				"src": "15968:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "15955:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "15955:3:12"
																		},
																		"nativeSrc": "15955:23:12",
																		"nodeType": "YulFunctionCall",
																		"src": "15955:23:12"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15980:2:12",
																		"nodeType": "YulLiteral",
																		"src": "15980:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "15951:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "15951:3:12"
																},
																"nativeSrc": "15951:32:12",
																"nodeType": "YulFunctionCall",
																"src": "15951:32:12"
															},
															"nativeSrc": "15948:119:12",
															"nodeType": "YulIf",
															"src": "15948:119:12"
														},
														{
															"nativeSrc": "16077:125:12",
															"nodeType": "YulBlock",
															"src": "16077:125:12",
															"statements": [
																{
																	"nativeSrc": "16092:15:12",
																	"nodeType": "YulVariableDeclaration",
																	"src": "16092:15:12",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "16106:1:12",
																		"nodeType": "YulLiteral",
																		"src": "16106:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "16096:6:12",
																			"nodeType": "YulTypedName",
																			"src": "16096:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "16121:71:12",
																	"nodeType": "YulAssignment",
																	"src": "16121:71:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "16164:9:12",
																						"nodeType": "YulIdentifier",
																						"src": "16164:9:12"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "16175:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "16175:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "16160:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "16160:3:12"
																				},
																				"nativeSrc": "16160:22:12",
																				"nodeType": "YulFunctionCall",
																				"src": "16160:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "16184:7:12",
																				"nodeType": "YulIdentifier",
																				"src": "16184:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nativeSrc": "16131:28:12",
																			"nodeType": "YulIdentifier",
																			"src": "16131:28:12"
																		},
																		"nativeSrc": "16131:61:12",
																		"nodeType": "YulFunctionCall",
																		"src": "16131:61:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "16121:6:12",
																			"nodeType": "YulIdentifier",
																			"src": "16121:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nativeSrc": "15864:345:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "15908:9:12",
														"nodeType": "YulTypedName",
														"src": "15908:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "15919:7:12",
														"nodeType": "YulTypedName",
														"src": "15919:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "15931:6:12",
														"nodeType": "YulTypedName",
														"src": "15931:6:12",
														"type": ""
													}
												],
												"src": "15864:345:12"
											},
											{
												"body": {
													"nativeSrc": "16273:40:12",
													"nodeType": "YulBlock",
													"src": "16273:40:12",
													"statements": [
														{
															"nativeSrc": "16284:22:12",
															"nodeType": "YulAssignment",
															"src": "16284:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "16300:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "16300:5:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "16294:5:12",
																	"nodeType": "YulIdentifier",
																	"src": "16294:5:12"
																},
																"nativeSrc": "16294:12:12",
																"nodeType": "YulFunctionCall",
																"src": "16294:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "16284:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "16284:6:12"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nativeSrc": "16215:98:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "16256:5:12",
														"nodeType": "YulTypedName",
														"src": "16256:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "16266:6:12",
														"nodeType": "YulTypedName",
														"src": "16266:6:12",
														"type": ""
													}
												],
												"src": "16215:98:12"
											},
											{
												"body": {
													"nativeSrc": "16432:34:12",
													"nodeType": "YulBlock",
													"src": "16432:34:12",
													"statements": [
														{
															"nativeSrc": "16442:18:12",
															"nodeType": "YulAssignment",
															"src": "16442:18:12",
															"value": {
																"name": "pos",
																"nativeSrc": "16457:3:12",
																"nodeType": "YulIdentifier",
																"src": "16457:3:12"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "16442:11:12",
																	"nodeType": "YulIdentifier",
																	"src": "16442:11:12"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nativeSrc": "16319:147:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "16404:3:12",
														"nodeType": "YulTypedName",
														"src": "16404:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "16409:6:12",
														"nodeType": "YulTypedName",
														"src": "16409:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "16420:11:12",
														"nodeType": "YulTypedName",
														"src": "16420:11:12",
														"type": ""
													}
												],
												"src": "16319:147:12"
											},
											{
												"body": {
													"nativeSrc": "16580:278:12",
													"nodeType": "YulBlock",
													"src": "16580:278:12",
													"statements": [
														{
															"nativeSrc": "16590:52:12",
															"nodeType": "YulVariableDeclaration",
															"src": "16590:52:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "16636:5:12",
																		"nodeType": "YulIdentifier",
																		"src": "16636:5:12"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nativeSrc": "16604:31:12",
																	"nodeType": "YulIdentifier",
																	"src": "16604:31:12"
																},
																"nativeSrc": "16604:38:12",
																"nodeType": "YulFunctionCall",
																"src": "16604:38:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "16594:6:12",
																	"nodeType": "YulTypedName",
																	"src": "16594:6:12",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "16651:95:12",
															"nodeType": "YulAssignment",
															"src": "16651:95:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "16734:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "16734:3:12"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "16739:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "16739:6:12"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nativeSrc": "16658:75:12",
																	"nodeType": "YulIdentifier",
																	"src": "16658:75:12"
																},
																"nativeSrc": "16658:88:12",
																"nodeType": "YulFunctionCall",
																"src": "16658:88:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "16651:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "16651:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "16794:5:12",
																				"nodeType": "YulIdentifier",
																				"src": "16794:5:12"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "16801:4:12",
																				"nodeType": "YulLiteral",
																				"src": "16801:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "16790:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "16790:3:12"
																		},
																		"nativeSrc": "16790:16:12",
																		"nodeType": "YulFunctionCall",
																		"src": "16790:16:12"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "16808:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "16808:3:12"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "16813:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "16813:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "16755:34:12",
																	"nodeType": "YulIdentifier",
																	"src": "16755:34:12"
																},
																"nativeSrc": "16755:65:12",
																"nodeType": "YulFunctionCall",
																"src": "16755:65:12"
															},
															"nativeSrc": "16755:65:12",
															"nodeType": "YulExpressionStatement",
															"src": "16755:65:12"
														},
														{
															"nativeSrc": "16829:23:12",
															"nodeType": "YulAssignment",
															"src": "16829:23:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "16840:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "16840:3:12"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "16845:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "16845:6:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "16836:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "16836:3:12"
																},
																"nativeSrc": "16836:16:12",
																"nodeType": "YulFunctionCall",
																"src": "16836:16:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "16829:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "16829:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nativeSrc": "16472:386:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "16561:5:12",
														"nodeType": "YulTypedName",
														"src": "16561:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "16568:3:12",
														"nodeType": "YulTypedName",
														"src": "16568:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "16576:3:12",
														"nodeType": "YulTypedName",
														"src": "16576:3:12",
														"type": ""
													}
												],
												"src": "16472:386:12"
											},
											{
												"body": {
													"nativeSrc": "16998:137:12",
													"nodeType": "YulBlock",
													"src": "16998:137:12",
													"statements": [
														{
															"nativeSrc": "17009:100:12",
															"nodeType": "YulAssignment",
															"src": "17009:100:12",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "17096:6:12",
																		"nodeType": "YulIdentifier",
																		"src": "17096:6:12"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "17105:3:12",
																		"nodeType": "YulIdentifier",
																		"src": "17105:3:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nativeSrc": "17016:79:12",
																	"nodeType": "YulIdentifier",
																	"src": "17016:79:12"
																},
																"nativeSrc": "17016:93:12",
																"nodeType": "YulFunctionCall",
																"src": "17016:93:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "17009:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "17009:3:12"
																}
															]
														},
														{
															"nativeSrc": "17119:10:12",
															"nodeType": "YulAssignment",
															"src": "17119:10:12",
															"value": {
																"name": "pos",
																"nativeSrc": "17126:3:12",
																"nodeType": "YulIdentifier",
																"src": "17126:3:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "17119:3:12",
																	"nodeType": "YulIdentifier",
																	"src": "17119:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nativeSrc": "16864:271:12",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "16977:3:12",
														"nodeType": "YulTypedName",
														"src": "16977:3:12",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "16983:6:12",
														"nodeType": "YulTypedName",
														"src": "16983:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "16994:3:12",
														"nodeType": "YulTypedName",
														"src": "16994:3:12",
														"type": ""
													}
												],
												"src": "16864:271:12"
											}
										]
									},
									"contents": "{\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        mcopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_addresst_address(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint8(x, y) -> sum {\n        x := cleanup_t_uint8(x)\n        y := cleanup_t_uint8(y)\n        sum := add(x, y)\n\n        if gt(sum, 0xff) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_ef106c0bbb744e74987954b239ff90422a58d8a59de2058902bb4271029d7abf(memPtr) {\n\n        mstore(add(memPtr, 0), \"Exceeds max withdraw amount\")\n\n    }\n\n    function abi_encode_t_stringliteral_ef106c0bbb744e74987954b239ff90422a58d8a59de2058902bb4271029d7abf_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 27)\n        store_literal_in_memory_ef106c0bbb744e74987954b239ff90422a58d8a59de2058902bb4271029d7abf(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ef106c0bbb744e74987954b239ff90422a58d8a59de2058902bb4271029d7abf__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ef106c0bbb744e74987954b239ff90422a58d8a59de2058902bb4271029d7abf_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_806ba8ee32c103c2a737750386240fe468a7ec44d5136f2c1c91c5d6ce999f73(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot withdraw locked collatera\")\n\n        mstore(add(memPtr, 32), \"l\")\n\n    }\n\n    function abi_encode_t_stringliteral_806ba8ee32c103c2a737750386240fe468a7ec44d5136f2c1c91c5d6ce999f73_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_806ba8ee32c103c2a737750386240fe468a7ec44d5136f2c1c91c5d6ce999f73(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_806ba8ee32c103c2a737750386240fe468a7ec44d5136f2c1c91c5d6ce999f73__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_806ba8ee32c103c2a737750386240fe468a7ec44d5136f2c1c91c5d6ce999f73_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function shift_right_1_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(1, value)\n\n    }\n\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base {\n        power := _power\n        base  := _base\n        for { } gt(exponent, 1) {}\n        {\n            // overflow check for base * base\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1)\n            {\n                // No checks for power := mul(power, base) needed, because the check\n                // for base * base above is sufficient, since:\n                // |power| <= base (proof by induction) and thus:\n                // |power * base| <= base * base <= max <= |min| (for signed)\n                // (this is equally true for signed and unsigned exp)\n                power := mul(power, base)\n            }\n            base := mul(base, base)\n            exponent := shift_right_1_unsigned(exponent)\n        }\n    }\n\n    function checked_exp_unsigned(base, exponent, max) -> power {\n        // This function currently cannot be inlined because of the\n        // \"leave\" statements. We have to improve the optimizer.\n\n        // Note that 0**0 == 1\n        if iszero(exponent) { power := 1 leave }\n        if iszero(base) { power := 0 leave }\n\n        // Specializations for small bases\n        switch base\n        // 0 is handled above\n        case 1 { power := 1 leave }\n        case 2\n        {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(\n            and(lt(base, 11), lt(exponent, 78)),\n            and(lt(base, 307), lt(exponent, 32))\n        )\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n\n        power, base := checked_exp_helper(1, base, exponent, max)\n\n        if gt(power, div(max, base)) { panic_error_0x11() }\n        power := mul(power, base)\n    }\n\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power {\n        base := cleanup_t_uint256(base)\n        exponent := cleanup_t_uint8(exponent)\n\n        power := checked_exp_unsigned(base, exponent, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function mod_t_uint8(x, y) -> r {\n        x := cleanup_t_uint8(x)\n        y := cleanup_t_uint8(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n}\n",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"922": [
									{
										"length": 32,
										"start": 1600
									},
									{
										"length": 32,
										"start": 2184
									},
									{
										"length": 32,
										"start": 4433
									},
									{
										"length": 32,
										"start": 4799
									}
								],
								"924": [
									{
										"length": 32,
										"start": 2135
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b50600436106101a7575f3560e01c806392bdf9ba116100f7578063ba08765211610095578063ce96cb771161006f578063ce96cb771461057d578063d905777e146105ad578063dd62ed3e146105dd578063ef8b30f71461060d576101a7565b8063ba087652146104ed578063c63d75b61461051d578063c6e6f5921461054d576101a7565b80639d76ea58116100d15780639d76ea581461043f578063a9059cbb1461045d578063b3d7f6b91461048d578063b460af94146104bd576101a7565b806392bdf9ba146103c157806394bf804d146103f157806395d89b4114610421576101a7565b806323b872dd11610164578063402d267d1161013e578063402d267d146103015780634cdad506146103315780636e553f651461036157806370a0823114610391576101a7565b806323b872dd14610295578063313ce567146102c557806338d52e0f146102e3576101a7565b806301e1d114146101ab57806306fdde03146101c957806307a2d13a146101e7578063095ea7b3146102175780630a28a4771461024757806318160ddd14610277575b5f80fd5b6101b361063d565b6040516101c09190611da0565b60405180910390f35b6101d16106db565b6040516101de9190611e29565b60405180910390f35b61020160048036038101906101fc9190611e77565b61076b565b60405161020e9190611da0565b60405180910390f35b610231600480360381019061022c9190611efc565b61077d565b60405161023e9190611f54565b60405180910390f35b610261600480360381019061025c9190611e77565b61079f565b60405161026e9190611da0565b60405180910390f35b61027f610815565b60405161028c9190611da0565b60405180910390f35b6102af60048036038101906102aa9190611f6d565b61081e565b6040516102bc9190611f54565b60405180910390f35b6102cd61084c565b6040516102da9190611fd8565b60405180910390f35b6102eb610885565b6040516102f89190612000565b60405180910390f35b61031b60048036038101906103169190612019565b6108ac565b6040516103289190611da0565b60405180910390f35b61034b60048036038101906103469190611e77565b6108d5565b6040516103589190611da0565b60405180910390f35b61037b60048036038101906103769190612044565b6108e7565b6040516103889190611da0565b60405180910390f35b6103ab60048036038101906103a69190612019565b6109a0565b6040516103b89190611da0565b60405180910390f35b6103db60048036038101906103d69190612019565b6109e5565b6040516103e89190611da0565b60405180910390f35b61040b60048036038101906104069190612044565b6109fa565b6040516104189190611da0565b60405180910390f35b610429610a7a565b6040516104369190611e29565b60405180910390f35b610447610b0a565b6040516104549190612000565b60405180910390f35b61047760048036038101906104729190611efc565b610b2f565b6040516104849190611f54565b60405180910390f35b6104a760048036038101906104a29190611e77565b610b51565b6040516104b49190611da0565b60405180910390f35b6104d760048036038101906104d29190612082565b610b64565b6040516104e49190611da0565b60405180910390f35b61050760048036038101906105029190612082565b610cea565b6040516105149190611da0565b60405180910390f35b61053760048036038101906105329190612019565b610d6c565b6040516105449190611da0565b60405180910390f35b61056760048036038101906105629190611e77565b610d95565b6040516105749190611da0565b60405180910390f35b61059760048036038101906105929190612019565b610da7565b6040516105a49190611da0565b60405180910390f35b6105c760048036038101906105c29190612019565b610e1d565b6040516105d49190611da0565b60405180910390f35b6105f760048036038101906105f291906120d2565b610e2e565b6040516106049190611da0565b60405180910390f35b61062760048036038101906106229190611e77565b610eb0565b6040516106349190611da0565b60405180910390f35b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106979190612000565b602060405180830381865afa1580156106b2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106d69190612124565b905090565b6060600380546106ea9061217c565b80601f01602080910402602001604051908101604052809291908181526020018280546107169061217c565b80156107615780601f1061073857610100808354040283529160200191610761565b820191905f5260205f20905b81548152906001019060200180831161074457829003601f168201915b5050505050905090565b5f610776825f610ec2565b9050919050565b5f80610787610f1a565b9050610794818585610f21565b600191505092915050565b5f806107aa83610f33565b90505f60055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490508082111561080a57808261080191906121d9565b92505050610810565b5f925050505b919050565b5f600254905090565b5f80610828610f1a565b9050610835858285610f46565b610840858585610fd8565b60019150509392505050565b5f6108556110c8565b7f0000000000000000000000000000000000000000000000000000000000000000610880919061220c565b905090565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050919050565b5f6108e0825f610ec2565b9050919050565b5f806108f384846110cc565b90508360055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546109419190612240565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167f2251f6a4ed7fe619e9e8ce557d05a63dd484284f9c95c9ab334f6a7707cd08008560405161098e9190611da0565b60405180910390a28091505092915050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6005602052805f5260405f205f915090505481565b5f80610a0583610d6c565b905080841115610a50578284826040517f284ff667000000000000000000000000000000000000000000000000000000008152600401610a4793929190612273565b60405180910390fd5b5f610a5a85610b51565b9050610a6f610a67610f1a565b85838861114c565b809250505092915050565b606060048054610a899061217c565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab59061217c565b8015610b005780601f10610ad757610100808354040283529160200191610b00565b820191905f5260205f20905b815481529060010190602001808311610ae357829003601f168201915b5050505050905090565b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f80610b39610f1a565b9050610b46818585610fd8565b600191505092915050565b5f610b5d826001610ec2565b9050919050565b5f610b6e82610da7565b841115610bb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba7906122f2565b60405180910390fd5b60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054841115610c30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2790612380565b60405180910390fd5b5f610c3c8585856111ef565b90508460055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610c8a91906121d9565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167fb4eaf47ecd4bc76248f192433e8067c96cb3e17aced42fbc47a512742fb7421686604051610cd79190611da0565b60405180910390a2809150509392505050565b5f80610cf583610e1d565b905080851115610d40578285826040517fb94abeec000000000000000000000000000000000000000000000000000000008152600401610d3793929190612273565b60405180910390fd5b5f610d4a866108d5565b9050610d60610d57610f1a565b8686848a611271565b80925050509392505050565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050919050565b5f610da0825f61136a565b9050919050565b5f80610db2836113c2565b90505f60055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905080821115610e12578082610e0991906121d9565b92505050610e18565b5f925050505b919050565b5f610e27826109a0565b9050919050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f610ebb825f61136a565b9050919050565b5f610f126001610ed061063d565b610eda9190612240565b610ee26110c8565b600a610eee91906124cd565b610ef6610815565b610f009190612240565b84866113dc909392919063ffffffff16565b905092915050565b5f33905090565b610f2e8383836001611431565b505050565b5f610f3f82600161136a565b9050919050565b5f610f518484610e2e565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610fd25781811015610fc3578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610fba93929190612273565b60405180910390fd5b610fd184848484035f611431565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611048575f6040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161103f9190612000565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110b8575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016110af9190612000565b60405180910390fd5b6110c3838383611600565b505050565b5f90565b5f806110d7836108ac565b905080841115611122578284826040517f79012fb200000000000000000000000000000000000000000000000000000000815260040161111993929190612273565b60405180910390fd5b5f61112c85610eb0565b9050611141611139610f1a565b85878461114c565b809250505092915050565b6111787f0000000000000000000000000000000000000000000000000000000000000000853085611819565b611182838261189b565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d784846040516111e1929190612517565b60405180910390a350505050565b5f806111fa83610da7565b905080851115611245578285826040517ffe9cceec00000000000000000000000000000000000000000000000000000000815260040161123c93929190612273565b60405180910390fd5b5f61124f8661079f565b905061126561125c610f1a565b86868985611271565b80925050509392505050565b8273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146112b0576112af838683610f46565b5b6112ba838261191a565b6112e57f00000000000000000000000000000000000000000000000000000000000000008584611999565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db858560405161135b929190612517565b60405180910390a45050505050565b5f6113ba6113766110c8565b600a61138291906124cd565b61138a610815565b6113949190612240565b600161139e61063d565b6113a89190612240565b84866113dc909392919063ffffffff16565b905092915050565b5f6113d56113cf836109a0565b5f610ec2565b9050919050565b5f806113e9868686611a18565b90506113f483611b17565b801561141057505f848061140b5761140a61253e565b5b868809115b15611425576001816114229190612240565b90505b80915050949350505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036114a1575f6040517fe602df050000000000000000000000000000000000000000000000000000000081526004016114989190612000565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611511575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016115089190612000565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555080156115fa578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516115f19190611da0565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611650578060025f8282546116449190612240565b9250508190555061171e565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156116d9578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016116d093929190612273565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611765578060025f82825403925050819055506117af565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161180c9190611da0565b60405180910390a3505050565b611895848573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161184e9392919061256b565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b44565b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361190b575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016119029190612000565b60405180910390fd5b6119165f8383611600565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361198a575f6040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016119819190612000565b60405180910390fd5b611995825f83611600565b5050565b611a13838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016119cc9291906125a0565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b44565b505050565b5f8083850290505f8019858709828110838203039150505f8103611a5057838281611a4657611a4561253e565b5b0492505050611b10565b808411611a89576040517f227bc15300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8486880990508281118203915080830392505f855f038616905080860495508084049350600181825f0304019050808302841793505f600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b5f60016002836003811115611b2f57611b2e6125c7565b5b611b3991906125f4565b60ff16149050919050565b5f611b6e828473ffffffffffffffffffffffffffffffffffffffff16611bd990919063ffffffff16565b90505f815114158015611b92575080806020019051810190611b90919061264e565b155b15611bd457826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401611bcb9190612000565b60405180910390fd5b505050565b6060611be683835f611bee565b905092915050565b606081471015611c3557306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401611c2c9190612000565b60405180910390fd5b5f808573ffffffffffffffffffffffffffffffffffffffff168486604051611c5d91906126bd565b5f6040518083038185875af1925050503d805f8114611c97576040519150601f19603f3d011682016040523d82523d5f602084013e611c9c565b606091505b5091509150611cac868383611cb7565b925050509392505050565b606082611ccc57611cc782611d44565b611d3c565b5f8251148015611cf257505f8473ffffffffffffffffffffffffffffffffffffffff163b145b15611d3457836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401611d2b9190612000565b60405180910390fd5b819050611d3d565b5b9392505050565b5f81511115611d565780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f819050919050565b611d9a81611d88565b82525050565b5f602082019050611db35f830184611d91565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611dfb82611db9565b611e058185611dc3565b9350611e15818560208601611dd3565b611e1e81611de1565b840191505092915050565b5f6020820190508181035f830152611e418184611df1565b905092915050565b5f80fd5b611e5681611d88565b8114611e60575f80fd5b50565b5f81359050611e7181611e4d565b92915050565b5f60208284031215611e8c57611e8b611e49565b5b5f611e9984828501611e63565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611ecb82611ea2565b9050919050565b611edb81611ec1565b8114611ee5575f80fd5b50565b5f81359050611ef681611ed2565b92915050565b5f8060408385031215611f1257611f11611e49565b5b5f611f1f85828601611ee8565b9250506020611f3085828601611e63565b9150509250929050565b5f8115159050919050565b611f4e81611f3a565b82525050565b5f602082019050611f675f830184611f45565b92915050565b5f805f60608486031215611f8457611f83611e49565b5b5f611f9186828701611ee8565b9350506020611fa286828701611ee8565b9250506040611fb386828701611e63565b9150509250925092565b5f60ff82169050919050565b611fd281611fbd565b82525050565b5f602082019050611feb5f830184611fc9565b92915050565b611ffa81611ec1565b82525050565b5f6020820190506120135f830184611ff1565b92915050565b5f6020828403121561202e5761202d611e49565b5b5f61203b84828501611ee8565b91505092915050565b5f806040838503121561205a57612059611e49565b5b5f61206785828601611e63565b925050602061207885828601611ee8565b9150509250929050565b5f805f6060848603121561209957612098611e49565b5b5f6120a686828701611e63565b93505060206120b786828701611ee8565b92505060406120c886828701611ee8565b9150509250925092565b5f80604083850312156120e8576120e7611e49565b5b5f6120f585828601611ee8565b925050602061210685828601611ee8565b9150509250929050565b5f8151905061211e81611e4d565b92915050565b5f6020828403121561213957612138611e49565b5b5f61214684828501612110565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061219357607f821691505b6020821081036121a6576121a561214f565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6121e382611d88565b91506121ee83611d88565b9250828203905081811115612206576122056121ac565b5b92915050565b5f61221682611fbd565b915061222183611fbd565b9250828201905060ff81111561223a576122396121ac565b5b92915050565b5f61224a82611d88565b915061225583611d88565b925082820190508082111561226d5761226c6121ac565b5b92915050565b5f6060820190506122865f830186611ff1565b6122936020830185611d91565b6122a06040830184611d91565b949350505050565b7f45786365656473206d617820776974686472617720616d6f756e7400000000005f82015250565b5f6122dc601b83611dc3565b91506122e7826122a8565b602082019050919050565b5f6020820190508181035f830152612309816122d0565b9050919050565b7f43616e6e6f74207769746864726177206c6f636b656420636f6c6c61746572615f8201527f6c00000000000000000000000000000000000000000000000000000000000000602082015250565b5f61236a602183611dc3565b915061237582612310565b604082019050919050565b5f6020820190508181035f8301526123978161235e565b9050919050565b5f8160011c9050919050565b5f808291508390505b60018511156123f3578086048111156123cf576123ce6121ac565b5b60018516156123de5780820291505b80810290506123ec8561239e565b94506123b3565b94509492505050565b5f8261240b57600190506124c6565b81612418575f90506124c6565b816001811461242e576002811461243857612467565b60019150506124c6565b60ff84111561244a576124496121ac565b5b8360020a915084821115612461576124606121ac565b5b506124c6565b5060208310610133831016604e8410600b841016171561249c5782820a905083811115612497576124966121ac565b5b6124c6565b6124a984848460016123aa565b925090508184048111156124c0576124bf6121ac565b5b81810290505b9392505050565b5f6124d782611d88565b91506124e283611fbd565b925061250f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846123fc565b905092915050565b5f60408201905061252a5f830185611d91565b6125376020830184611d91565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f60608201905061257e5f830186611ff1565b61258b6020830185611ff1565b6125986040830184611d91565b949350505050565b5f6040820190506125b35f830185611ff1565b6125c06020830184611d91565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f6125fe82611fbd565b915061260983611fbd565b9250826126195761261861253e565b5b828206905092915050565b61262d81611f3a565b8114612637575f80fd5b50565b5f8151905061264881612624565b92915050565b5f6020828403121561266357612662611e49565b5b5f6126708482850161263a565b91505092915050565b5f81519050919050565b5f81905092915050565b5f61269782612679565b6126a18185612683565b93506126b1818560208601611dd3565b80840191505092915050565b5f6126c8828461268d565b91508190509291505056fea2646970667358221220d59a5cd3265cb00800220248f085c73f2003b7373affba19a4b309537e087b0d64736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1A7 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x92BDF9BA GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xBA087652 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xCE96CB77 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xCE96CB77 EQ PUSH2 0x57D JUMPI DUP1 PUSH4 0xD905777E EQ PUSH2 0x5AD JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x5DD JUMPI DUP1 PUSH4 0xEF8B30F7 EQ PUSH2 0x60D JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0xBA087652 EQ PUSH2 0x4ED JUMPI DUP1 PUSH4 0xC63D75B6 EQ PUSH2 0x51D JUMPI DUP1 PUSH4 0xC6E6F592 EQ PUSH2 0x54D JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x9D76EA58 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x9D76EA58 EQ PUSH2 0x43F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x45D JUMPI DUP1 PUSH4 0xB3D7F6B9 EQ PUSH2 0x48D JUMPI DUP1 PUSH4 0xB460AF94 EQ PUSH2 0x4BD JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x92BDF9BA EQ PUSH2 0x3C1 JUMPI DUP1 PUSH4 0x94BF804D EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x421 JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x402D267D GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x402D267D EQ PUSH2 0x301 JUMPI DUP1 PUSH4 0x4CDAD506 EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0x6E553F65 EQ PUSH2 0x361 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x391 JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x38D52E0F EQ PUSH2 0x2E3 JUMPI PUSH2 0x1A7 JUMP JUMPDEST DUP1 PUSH4 0x1E1D114 EQ PUSH2 0x1AB JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x7A2D13A EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x217 JUMPI DUP1 PUSH4 0xA28A477 EQ PUSH2 0x247 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x277 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1B3 PUSH2 0x63D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C0 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D1 PUSH2 0x6DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DE SWAP2 SWAP1 PUSH2 0x1E29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x201 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FC SWAP2 SWAP1 PUSH2 0x1E77 JUMP JUMPDEST PUSH2 0x76B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20E SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x231 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22C SWAP2 SWAP1 PUSH2 0x1EFC JUMP JUMPDEST PUSH2 0x77D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23E SWAP2 SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x261 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25C SWAP2 SWAP1 PUSH2 0x1E77 JUMP JUMPDEST PUSH2 0x79F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26E SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27F PUSH2 0x815 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28C SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AA SWAP2 SWAP1 PUSH2 0x1F6D JUMP JUMPDEST PUSH2 0x81E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BC SWAP2 SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CD PUSH2 0x84C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DA SWAP2 SWAP1 PUSH2 0x1FD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2EB PUSH2 0x885 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F8 SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x316 SWAP2 SWAP1 PUSH2 0x2019 JUMP JUMPDEST PUSH2 0x8AC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x328 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x34B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x346 SWAP2 SWAP1 PUSH2 0x1E77 JUMP JUMPDEST PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x358 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x37B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x376 SWAP2 SWAP1 PUSH2 0x2044 JUMP JUMPDEST PUSH2 0x8E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3AB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A6 SWAP2 SWAP1 PUSH2 0x2019 JUMP JUMPDEST PUSH2 0x9A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B8 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3DB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D6 SWAP2 SWAP1 PUSH2 0x2019 JUMP JUMPDEST PUSH2 0x9E5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3E8 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x40B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x406 SWAP2 SWAP1 PUSH2 0x2044 JUMP JUMPDEST PUSH2 0x9FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x418 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x429 PUSH2 0xA7A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x436 SWAP2 SWAP1 PUSH2 0x1E29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x447 PUSH2 0xB0A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x454 SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x477 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x472 SWAP2 SWAP1 PUSH2 0x1EFC JUMP JUMPDEST PUSH2 0xB2F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x484 SWAP2 SWAP1 PUSH2 0x1F54 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4A7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4A2 SWAP2 SWAP1 PUSH2 0x1E77 JUMP JUMPDEST PUSH2 0xB51 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4B4 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4D7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4D2 SWAP2 SWAP1 PUSH2 0x2082 JUMP JUMPDEST PUSH2 0xB64 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4E4 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x507 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x502 SWAP2 SWAP1 PUSH2 0x2082 JUMP JUMPDEST PUSH2 0xCEA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x514 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x537 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x532 SWAP2 SWAP1 PUSH2 0x2019 JUMP JUMPDEST PUSH2 0xD6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x544 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x567 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x562 SWAP2 SWAP1 PUSH2 0x1E77 JUMP JUMPDEST PUSH2 0xD95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x574 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x597 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x592 SWAP2 SWAP1 PUSH2 0x2019 JUMP JUMPDEST PUSH2 0xDA7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5A4 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5C2 SWAP2 SWAP1 PUSH2 0x2019 JUMP JUMPDEST PUSH2 0xE1D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5D4 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5F7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5F2 SWAP2 SWAP1 PUSH2 0x20D2 JUMP JUMPDEST PUSH2 0xE2E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x604 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x627 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x622 SWAP2 SWAP1 PUSH2 0x1E77 JUMP JUMPDEST PUSH2 0xEB0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x634 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x697 SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6B2 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6D6 SWAP2 SWAP1 PUSH2 0x2124 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x6EA SWAP1 PUSH2 0x217C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x716 SWAP1 PUSH2 0x217C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x761 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x738 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x761 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x744 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x776 DUP3 PUSH0 PUSH2 0xEC2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x787 PUSH2 0xF1A JUMP JUMPDEST SWAP1 POP PUSH2 0x794 DUP2 DUP6 DUP6 PUSH2 0xF21 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x7AA DUP4 PUSH2 0xF33 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x5 PUSH0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x80A JUMPI DUP1 DUP3 PUSH2 0x801 SWAP2 SWAP1 PUSH2 0x21D9 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x810 JUMP JUMPDEST PUSH0 SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x828 PUSH2 0xF1A JUMP JUMPDEST SWAP1 POP PUSH2 0x835 DUP6 DUP3 DUP6 PUSH2 0xF46 JUMP JUMPDEST PUSH2 0x840 DUP6 DUP6 DUP6 PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x855 PUSH2 0x10C8 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x880 SWAP2 SWAP1 PUSH2 0x220C JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x8E0 DUP3 PUSH0 PUSH2 0xEC2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x8F3 DUP5 DUP5 PUSH2 0x10CC JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x5 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x941 SWAP2 SWAP1 PUSH2 0x2240 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x2251F6A4ED7FE619E9E8CE557D05A63DD484284F9C95C9AB334F6A7707CD0800 DUP6 PUSH1 0x40 MLOAD PUSH2 0x98E SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP1 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xA05 DUP4 PUSH2 0xD6C JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0xA50 JUMPI DUP3 DUP5 DUP3 PUSH1 0x40 MLOAD PUSH32 0x284FF66700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA47 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2273 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xA5A DUP6 PUSH2 0xB51 JUMP JUMPDEST SWAP1 POP PUSH2 0xA6F PUSH2 0xA67 PUSH2 0xF1A JUMP JUMPDEST DUP6 DUP4 DUP9 PUSH2 0x114C JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0xA89 SWAP1 PUSH2 0x217C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xAB5 SWAP1 PUSH2 0x217C JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB00 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAD7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB00 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAE3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x6 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xB39 PUSH2 0xF1A JUMP JUMPDEST SWAP1 POP PUSH2 0xB46 DUP2 DUP6 DUP6 PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xB5D DUP3 PUSH1 0x1 PUSH2 0xEC2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xB6E DUP3 PUSH2 0xDA7 JUMP JUMPDEST DUP5 GT ISZERO PUSH2 0xBB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA7 SWAP1 PUSH2 0x22F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD DUP5 GT ISZERO PUSH2 0xC30 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC27 SWAP1 PUSH2 0x2380 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xC3C DUP6 DUP6 DUP6 PUSH2 0x11EF JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x5 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xC8A SWAP2 SWAP1 PUSH2 0x21D9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xB4EAF47ECD4BC76248F192433E8067C96CB3E17ACED42FBC47A512742FB74216 DUP7 PUSH1 0x40 MLOAD PUSH2 0xCD7 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xCF5 DUP4 PUSH2 0xE1D JUMP JUMPDEST SWAP1 POP DUP1 DUP6 GT ISZERO PUSH2 0xD40 JUMPI DUP3 DUP6 DUP3 PUSH1 0x40 MLOAD PUSH32 0xB94ABEEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD37 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2273 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0xD4A DUP7 PUSH2 0x8D5 JUMP JUMPDEST SWAP1 POP PUSH2 0xD60 PUSH2 0xD57 PUSH2 0xF1A JUMP JUMPDEST DUP7 DUP7 DUP5 DUP11 PUSH2 0x1271 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xDA0 DUP3 PUSH0 PUSH2 0x136A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0xDB2 DUP4 PUSH2 0x13C2 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x5 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xE12 JUMPI DUP1 DUP3 PUSH2 0xE09 SWAP2 SWAP1 PUSH2 0x21D9 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0xE18 JUMP JUMPDEST PUSH0 SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xE27 DUP3 PUSH2 0x9A0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xEBB DUP3 PUSH0 PUSH2 0x136A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xF12 PUSH1 0x1 PUSH2 0xED0 PUSH2 0x63D JUMP JUMPDEST PUSH2 0xEDA SWAP2 SWAP1 PUSH2 0x2240 JUMP JUMPDEST PUSH2 0xEE2 PUSH2 0x10C8 JUMP JUMPDEST PUSH1 0xA PUSH2 0xEEE SWAP2 SWAP1 PUSH2 0x24CD JUMP JUMPDEST PUSH2 0xEF6 PUSH2 0x815 JUMP JUMPDEST PUSH2 0xF00 SWAP2 SWAP1 PUSH2 0x2240 JUMP JUMPDEST DUP5 DUP7 PUSH2 0x13DC SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xF2E DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1431 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xF3F DUP3 PUSH1 0x1 PUSH2 0x136A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xF51 DUP5 DUP5 PUSH2 0xE2E JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0xFD2 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xFC3 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFBA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2273 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFD1 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x1431 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1048 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x103F SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x10B8 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10AF SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x10C3 DUP4 DUP4 DUP4 PUSH2 0x1600 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x10D7 DUP4 PUSH2 0x8AC JUMP JUMPDEST SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0x1122 JUMPI DUP3 DUP5 DUP3 PUSH1 0x40 MLOAD PUSH32 0x79012FB200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1119 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2273 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x112C DUP6 PUSH2 0xEB0 JUMP JUMPDEST SWAP1 POP PUSH2 0x1141 PUSH2 0x1139 PUSH2 0xF1A JUMP JUMPDEST DUP6 DUP8 DUP5 PUSH2 0x114C JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1178 PUSH32 0x0 DUP6 ADDRESS DUP6 PUSH2 0x1819 JUMP JUMPDEST PUSH2 0x1182 DUP4 DUP3 PUSH2 0x189B JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDCBC1C05240F31FF3AD067EF1EE35CE4997762752E3A095284754544F4C709D7 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x11E1 SWAP3 SWAP2 SWAP1 PUSH2 0x2517 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x11FA DUP4 PUSH2 0xDA7 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 GT ISZERO PUSH2 0x1245 JUMPI DUP3 DUP6 DUP3 PUSH1 0x40 MLOAD PUSH32 0xFE9CCEEC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x123C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2273 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x124F DUP7 PUSH2 0x79F JUMP JUMPDEST SWAP1 POP PUSH2 0x1265 PUSH2 0x125C PUSH2 0xF1A JUMP JUMPDEST DUP7 DUP7 DUP10 DUP6 PUSH2 0x1271 JUMP JUMPDEST DUP1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12B0 JUMPI PUSH2 0x12AF DUP4 DUP7 DUP4 PUSH2 0xF46 JUMP JUMPDEST JUMPDEST PUSH2 0x12BA DUP4 DUP3 PUSH2 0x191A JUMP JUMPDEST PUSH2 0x12E5 PUSH32 0x0 DUP6 DUP5 PUSH2 0x1999 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFBDE797D201C681B91056529119E0B02407C7BB96A4A2C75C01FC9667232C8DB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x135B SWAP3 SWAP2 SWAP1 PUSH2 0x2517 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x13BA PUSH2 0x1376 PUSH2 0x10C8 JUMP JUMPDEST PUSH1 0xA PUSH2 0x1382 SWAP2 SWAP1 PUSH2 0x24CD JUMP JUMPDEST PUSH2 0x138A PUSH2 0x815 JUMP JUMPDEST PUSH2 0x1394 SWAP2 SWAP1 PUSH2 0x2240 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x139E PUSH2 0x63D JUMP JUMPDEST PUSH2 0x13A8 SWAP2 SWAP1 PUSH2 0x2240 JUMP JUMPDEST DUP5 DUP7 PUSH2 0x13DC SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x13D5 PUSH2 0x13CF DUP4 PUSH2 0x9A0 JUMP JUMPDEST PUSH0 PUSH2 0xEC2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x13E9 DUP7 DUP7 DUP7 PUSH2 0x1A18 JUMP JUMPDEST SWAP1 POP PUSH2 0x13F4 DUP4 PUSH2 0x1B17 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1410 JUMPI POP PUSH0 DUP5 DUP1 PUSH2 0x140B JUMPI PUSH2 0x140A PUSH2 0x253E JUMP JUMPDEST JUMPDEST DUP7 DUP9 MULMOD GT JUMPDEST ISZERO PUSH2 0x1425 JUMPI PUSH1 0x1 DUP2 PUSH2 0x1422 SWAP2 SWAP1 PUSH2 0x2240 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x14A1 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1498 SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1511 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1508 SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x15FA JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x15F1 SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1650 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1644 SWAP2 SWAP1 PUSH2 0x2240 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x171E JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x16D9 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16D0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2273 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1765 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x17AF JUMP JUMPDEST DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x180C SWAP2 SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1895 DUP5 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x184E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x256B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1B44 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x190B JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1902 SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1916 PUSH0 DUP4 DUP4 PUSH2 0x1600 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x198A JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1981 SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1995 DUP3 PUSH0 DUP4 PUSH2 0x1600 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1A13 DUP4 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x19CC SWAP3 SWAP2 SWAP1 PUSH2 0x25A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1B44 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP1 DUP4 DUP6 MUL SWAP1 POP PUSH0 DUP1 NOT DUP6 DUP8 MULMOD DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH0 DUP2 SUB PUSH2 0x1A50 JUMPI DUP4 DUP3 DUP2 PUSH2 0x1A46 JUMPI PUSH2 0x1A45 PUSH2 0x253E JUMP JUMPDEST JUMPDEST DIV SWAP3 POP POP POP PUSH2 0x1B10 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x1A89 JUMPI PUSH1 0x40 MLOAD PUSH32 0x227BC15300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP5 DUP7 DUP9 MULMOD SWAP1 POP DUP3 DUP2 GT DUP3 SUB SWAP2 POP DUP1 DUP4 SUB SWAP3 POP PUSH0 DUP6 PUSH0 SUB DUP7 AND SWAP1 POP DUP1 DUP7 DIV SWAP6 POP DUP1 DUP5 DIV SWAP4 POP PUSH1 0x1 DUP2 DUP3 PUSH0 SUB DIV ADD SWAP1 POP DUP1 DUP4 MUL DUP5 OR SWAP4 POP PUSH0 PUSH1 0x2 DUP8 PUSH1 0x3 MUL XOR SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP8 MUL PUSH1 0x2 SUB DUP2 MUL SWAP1 POP DUP1 DUP6 MUL SWAP6 POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x2 DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B2F JUMPI PUSH2 0x1B2E PUSH2 0x25C7 JUMP JUMPDEST JUMPDEST PUSH2 0x1B39 SWAP2 SWAP1 PUSH2 0x25F4 JUMP JUMPDEST PUSH1 0xFF AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1B6E DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1BD9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD EQ ISZERO DUP1 ISZERO PUSH2 0x1B92 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1B90 SWAP2 SWAP1 PUSH2 0x264E JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1BD4 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BCB SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1BE6 DUP4 DUP4 PUSH0 PUSH2 0x1BEE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 SELFBALANCE LT ISZERO PUSH2 0x1C35 JUMPI ADDRESS PUSH1 0x40 MLOAD PUSH32 0xCD78605900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C2C SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP7 PUSH1 0x40 MLOAD PUSH2 0x1C5D SWAP2 SWAP1 PUSH2 0x26BD JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x1C97 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1C9C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1CAC DUP7 DUP4 DUP4 PUSH2 0x1CB7 JUMP JUMPDEST SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x1CCC JUMPI PUSH2 0x1CC7 DUP3 PUSH2 0x1D44 JUMP JUMPDEST PUSH2 0x1D3C JUMP JUMPDEST PUSH0 DUP3 MLOAD EQ DUP1 ISZERO PUSH2 0x1CF2 JUMPI POP PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST ISZERO PUSH2 0x1D34 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D2B SWAP2 SWAP1 PUSH2 0x2000 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP PUSH2 0x1D3D JUMP JUMPDEST JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD GT ISZERO PUSH2 0x1D56 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1D9A DUP2 PUSH2 0x1D88 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DB3 PUSH0 DUP4 ADD DUP5 PUSH2 0x1D91 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1DFB DUP3 PUSH2 0x1DB9 JUMP JUMPDEST PUSH2 0x1E05 DUP2 DUP6 PUSH2 0x1DC3 JUMP JUMPDEST SWAP4 POP PUSH2 0x1E15 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1DD3 JUMP JUMPDEST PUSH2 0x1E1E DUP2 PUSH2 0x1DE1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1E41 DUP2 DUP5 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1E56 DUP2 PUSH2 0x1D88 JUMP JUMPDEST DUP2 EQ PUSH2 0x1E60 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E71 DUP2 PUSH2 0x1E4D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E8C JUMPI PUSH2 0x1E8B PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1E99 DUP5 DUP3 DUP6 ADD PUSH2 0x1E63 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1ECB DUP3 PUSH2 0x1EA2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1EDB DUP2 PUSH2 0x1EC1 JUMP JUMPDEST DUP2 EQ PUSH2 0x1EE5 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1EF6 DUP2 PUSH2 0x1ED2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F12 JUMPI PUSH2 0x1F11 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1F1F DUP6 DUP3 DUP7 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1F30 DUP6 DUP3 DUP7 ADD PUSH2 0x1E63 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F4E DUP2 PUSH2 0x1F3A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1F67 PUSH0 DUP4 ADD DUP5 PUSH2 0x1F45 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F84 JUMPI PUSH2 0x1F83 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1F91 DUP7 DUP3 DUP8 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1FA2 DUP7 DUP3 DUP8 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1FB3 DUP7 DUP3 DUP8 ADD PUSH2 0x1E63 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FD2 DUP2 PUSH2 0x1FBD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1FEB PUSH0 DUP4 ADD DUP5 PUSH2 0x1FC9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1FFA DUP2 PUSH2 0x1EC1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2013 PUSH0 DUP4 ADD DUP5 PUSH2 0x1FF1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x202E JUMPI PUSH2 0x202D PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x203B DUP5 DUP3 DUP6 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x205A JUMPI PUSH2 0x2059 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2067 DUP6 DUP3 DUP7 ADD PUSH2 0x1E63 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2078 DUP6 DUP3 DUP7 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2099 JUMPI PUSH2 0x2098 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x20A6 DUP7 DUP3 DUP8 ADD PUSH2 0x1E63 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x20B7 DUP7 DUP3 DUP8 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x20C8 DUP7 DUP3 DUP8 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20E8 JUMPI PUSH2 0x20E7 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x20F5 DUP6 DUP3 DUP7 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2106 DUP6 DUP3 DUP7 ADD PUSH2 0x1EE8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x211E DUP2 PUSH2 0x1E4D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2139 JUMPI PUSH2 0x2138 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2146 DUP5 DUP3 DUP6 ADD PUSH2 0x2110 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2193 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x21A6 JUMPI PUSH2 0x21A5 PUSH2 0x214F JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x21E3 DUP3 PUSH2 0x1D88 JUMP JUMPDEST SWAP2 POP PUSH2 0x21EE DUP4 PUSH2 0x1D88 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2206 JUMPI PUSH2 0x2205 PUSH2 0x21AC JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2216 DUP3 PUSH2 0x1FBD JUMP JUMPDEST SWAP2 POP PUSH2 0x2221 DUP4 PUSH2 0x1FBD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH1 0xFF DUP2 GT ISZERO PUSH2 0x223A JUMPI PUSH2 0x2239 PUSH2 0x21AC JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x224A DUP3 PUSH2 0x1D88 JUMP JUMPDEST SWAP2 POP PUSH2 0x2255 DUP4 PUSH2 0x1D88 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x226D JUMPI PUSH2 0x226C PUSH2 0x21AC JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2286 PUSH0 DUP4 ADD DUP7 PUSH2 0x1FF1 JUMP JUMPDEST PUSH2 0x2293 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1D91 JUMP JUMPDEST PUSH2 0x22A0 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1D91 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x45786365656473206D617820776974686472617720616D6F756E740000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x22DC PUSH1 0x1B DUP4 PUSH2 0x1DC3 JUMP JUMPDEST SWAP2 POP PUSH2 0x22E7 DUP3 PUSH2 0x22A8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x2309 DUP2 PUSH2 0x22D0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207769746864726177206C6F636B656420636F6C6C6174657261 PUSH0 DUP3 ADD MSTORE PUSH32 0x6C00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x236A PUSH1 0x21 DUP4 PUSH2 0x1DC3 JUMP JUMPDEST SWAP2 POP PUSH2 0x2375 DUP3 PUSH2 0x2310 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x2397 DUP2 PUSH2 0x235E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0x23F3 JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0x23CF JUMPI PUSH2 0x23CE PUSH2 0x21AC JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x23DE JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0x23EC DUP6 PUSH2 0x239E JUMP JUMPDEST SWAP5 POP PUSH2 0x23B3 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x240B JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x24C6 JUMP JUMPDEST DUP2 PUSH2 0x2418 JUMPI PUSH0 SWAP1 POP PUSH2 0x24C6 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x242E JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x2438 JUMPI PUSH2 0x2467 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x24C6 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x244A JUMPI PUSH2 0x2449 PUSH2 0x21AC JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x2461 JUMPI PUSH2 0x2460 PUSH2 0x21AC JUMP JUMPDEST JUMPDEST POP PUSH2 0x24C6 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x249C JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x2497 JUMPI PUSH2 0x2496 PUSH2 0x21AC JUMP JUMPDEST JUMPDEST PUSH2 0x24C6 JUMP JUMPDEST PUSH2 0x24A9 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x23AA JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x24C0 JUMPI PUSH2 0x24BF PUSH2 0x21AC JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x24D7 DUP3 PUSH2 0x1D88 JUMP JUMPDEST SWAP2 POP PUSH2 0x24E2 DUP4 PUSH2 0x1FBD JUMP JUMPDEST SWAP3 POP PUSH2 0x250F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0x23FC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x252A PUSH0 DUP4 ADD DUP6 PUSH2 0x1D91 JUMP JUMPDEST PUSH2 0x2537 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D91 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x257E PUSH0 DUP4 ADD DUP7 PUSH2 0x1FF1 JUMP JUMPDEST PUSH2 0x258B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1FF1 JUMP JUMPDEST PUSH2 0x2598 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1D91 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x25B3 PUSH0 DUP4 ADD DUP6 PUSH2 0x1FF1 JUMP JUMPDEST PUSH2 0x25C0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D91 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x25FE DUP3 PUSH2 0x1FBD JUMP JUMPDEST SWAP2 POP PUSH2 0x2609 DUP4 PUSH2 0x1FBD JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2619 JUMPI PUSH2 0x2618 PUSH2 0x253E JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x262D DUP2 PUSH2 0x1F3A JUMP JUMPDEST DUP2 EQ PUSH2 0x2637 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x2648 DUP2 PUSH2 0x2624 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2663 JUMPI PUSH2 0x2662 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x2670 DUP5 DUP3 DUP6 ADD PUSH2 0x263A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x2697 DUP3 PUSH2 0x2679 JUMP JUMPDEST PUSH2 0x26A1 DUP2 DUP6 PUSH2 0x2683 JUMP JUMPDEST SWAP4 POP PUSH2 0x26B1 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1DD3 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x26C8 DUP3 DUP5 PUSH2 0x268D JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 SWAP11 TLOAD 0xD3 0x26 TLOAD 0xB0 ADDMOD STOP 0x22 MUL BASEFEE CREATE DUP6 0xC7 EXTCODEHASH KECCAK256 SUB 0xB7 CALLDATACOPY GASPRICE SELFDESTRUCT 0xBA NOT LOG4 0xB3 MULMOD MSTORE8 PUSH31 0x87B0D64736F6C634300081A00330000000000000000000000000000000000 ",
							"sourceMap": "193:2642:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5780:116:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2074:89:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6152:148:4;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4293:186:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1667:338:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3144:97:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5039:244;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5441:151:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5636:94;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6349:108;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7617:146;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;759:287:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3299:116:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;279:51:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8468:380:4;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2276:93:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;337:27:11;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3610:178:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7221:143:4;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1114:476:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9353:405:4;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6503:105;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5950:148;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2504:329:11;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6859:112:4;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3846:140:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7024:147:4;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5780:116;5832:7;5858:6;:16;;;5883:4;5858:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5851:38;;5780:116;:::o;2074:89:2:-;2119:13;2151:5;2144:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89;:::o;6152:148:4:-;6222:7;6248:45;6265:6;6273:19;6248:16;:45::i;:::-;6241:52;;6152:148;;;:::o;4293:186:2:-;4366:4;4382:13;4398:12;:10;:12::i;:::-;4382:28;;4420:31;4429:5;4436:7;4445:5;4420:8;:31::i;:::-;4468:4;4461:11;;;4293:186;;;;:::o;1667:338:11:-;1738:7;1757:23;1783:29;1805:6;1783:21;:29::i;:::-;1757:55;;1822:20;1845:16;:28;1862:10;1845:28;;;;;;;;;;;;;;;;1822:51;;1905:12;1887:15;:30;1883:98;;;1958:12;1940:15;:30;;;;:::i;:::-;1933:37;;;;;;1883:98;1997:1;1990:8;;;;1667:338;;;;:::o;3144:97:2:-;3196:7;3222:12;;3215:19;;3144:97;:::o;5039:244::-;5126:4;5142:15;5160:12;:10;:12::i;:::-;5142:30;;5182:37;5198:4;5204:7;5213:5;5182:15;:37::i;:::-;5229:26;5239:4;5245:2;5249:5;5229:9;:26::i;:::-;5272:4;5265:11;;;5039:244;;;;;:::o;5441:151:4:-;5522:5;5568:17;:15;:17::i;:::-;5546:19;:39;;;;:::i;:::-;5539:46;;5441:151;:::o;5636:94::-;5682:7;5716:6;5701:22;;5636:94;:::o;6349:108::-;6407:7;6433:17;6426:24;;6349:108;;;:::o;7617:146::-;7685:7;7711:45;7728:6;7736:19;7711:16;:45::i;:::-;7704:52;;7617:146;;;:::o;759:287:11:-;835:7;854:14;871:31;885:6;893:8;871:13;:31::i;:::-;854:48;;942:6;912:16;:26;929:8;912:26;;;;;;;;;;;;;;;;:36;;;;;;;:::i;:::-;;;;;;;;999:8;982:34;;;1009:6;982:34;;;;;;:::i;:::-;;;;;;;;1033:6;1026:13;;;759:287;;;;:::o;3299:116:2:-;3364:7;3390:9;:18;3400:7;3390:18;;;;;;;;;;;;;;;;3383:25;;3299:116;;;:::o;279:51:11:-;;;;;;;;;;;;;;;;;:::o;8468:380:4:-;8540:7;8559:17;8579;8587:8;8579:7;:17::i;:::-;8559:37;;8619:9;8610:6;:18;8606:107;;;8674:8;8684:6;8692:9;8651:51;;;;;;;;;;;;;:::i;:::-;;;;;;;;8606:107;8723:14;8740:19;8752:6;8740:11;:19::i;:::-;8723:36;;8769:48;8778:12;:10;:12::i;:::-;8792:8;8802:6;8810;8769:8;:48::i;:::-;8835:6;8828:13;;;;8468:380;;;;:::o;2276:93:2:-;2323:13;2355:7;2348:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2276:93;:::o;337:27:11:-;;;;;;;;;;;;;:::o;3610:178:2:-;3679:4;3695:13;3711:12;:10;:12::i;:::-;3695:28;;3733:27;3743:5;3750:2;3754:5;3733:9;:27::i;:::-;3777:4;3770:11;;;3610:178;;;;:::o;7221:143:4:-;7287:7;7313:44;7330:6;7338:18;7313:16;:44::i;:::-;7306:51;;7221:143;;;:::o;1114:476:11:-;1206:7;1243:18;1255:5;1243:11;:18::i;:::-;1233:6;:28;;1225:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1321:16;:23;1338:5;1321:23;;;;;;;;;;;;;;;;1311:6;:33;;1303:79;;;;;;;;;;;;:::i;:::-;;;;;;;;;1392:14;1409:39;1424:6;1432:8;1442:5;1409:14;:39::i;:::-;1392:56;;1485:6;1458:16;:23;1475:5;1458:23;;;;;;;;;;;;;;;;:33;;;;;;;:::i;:::-;;;;;;;;1546:5;1527:33;;;1553:6;1527:33;;;;;;:::i;:::-;;;;;;;;1577:6;1570:13;;;1114:476;;;;;:::o;9353:405:4:-;9442:7;9461:17;9481:16;9491:5;9481:9;:16::i;:::-;9461:36;;9520:9;9511:6;:18;9507:106;;;9577:5;9584:6;9592:9;9552:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;9507:106;9623:14;9640:21;9654:6;9640:13;:21::i;:::-;9623:38;;9671:56;9681:12;:10;:12::i;:::-;9695:8;9705:5;9712:6;9720;9671:9;:56::i;:::-;9745:6;9738:13;;;;9353:405;;;;;:::o;6503:105::-;6558:7;6584:17;6577:24;;6503:105;;;:::o;5950:148::-;6020:7;6046:45;6063:6;6071:19;6046:16;:45::i;:::-;6039:52;;5950:148;;;:::o;2504:329:11:-;2570:7;2589:25;2617:24;2635:5;2617:17;:24::i;:::-;2589:52;;2651:20;2674:16;:23;2691:5;2674:23;;;;;;;;;;;;;;;;2651:46;;2731:12;2711:17;:32;2707:102;;;2786:12;2766:17;:32;;;;:::i;:::-;2759:39;;;;;;2707:102;2825:1;2818:8;;;;2504:329;;;;:::o;6859:112:4:-;6922:7;6948:16;6958:5;6948:9;:16::i;:::-;6941:23;;6859:112;;;:::o;3846:140:2:-;3926:7;3952:11;:18;3964:5;3952:18;;;;;;;;;;;;;;;:27;3971:7;3952:27;;;;;;;;;;;;;;;;3945:34;;3846:140;;;;:::o;7024:147:4:-;7093:7;7119:45;7136:6;7144:19;7119:16;:45::i;:::-;7112:52;;7024:147;;;:::o;10219:213::-;10316:7;10342:83;10372:1;10356:13;:11;:13::i;:::-;:17;;;;:::i;:::-;10397;:15;:17::i;:::-;10391:2;:23;;;;:::i;:::-;10375:13;:11;:13::i;:::-;:39;;;;:::i;:::-;10416:8;10342:6;:13;;:83;;;;;;:::i;:::-;10335:90;;10219:213;;;;:::o;656:96:9:-;709:7;735:10;728:17;;656:96;:::o;8989:128:2:-;9073:37;9082:5;9089:7;9098:5;9105:4;9073:8;:37::i;:::-;8989:128;;;:::o;7418:147:4:-;7488:7;7514:44;7531:6;7539:18;7514:16;:44::i;:::-;7507:51;;7418:147;;;:::o;10663:477:2:-;10762:24;10789:25;10799:5;10806:7;10789:9;:25::i;:::-;10762:52;;10848:17;10828:16;:37;10824:310;;10904:5;10885:16;:24;10881:130;;;10963:7;10972:16;10990:5;10936:60;;;;;;;;;;;;;:::i;:::-;;;;;;;;10881:130;11052:57;11061:5;11068:7;11096:5;11077:16;:24;11103:5;11052:8;:57::i;:::-;10824:310;10752:388;10663:477;;;:::o;5656:300::-;5755:1;5739:18;;:4;:18;;;5735:86;;5807:1;5780:30;;;;;;;;;;;:::i;:::-;;;;;;;;5735:86;5848:1;5834:16;;:2;:16;;;5830:86;;5902:1;5873:32;;;;;;;;;;;:::i;:::-;;;;;;;;5830:86;5925:24;5933:4;5939:2;5943:5;5925:7;:24::i;:::-;5656:300;;;:::o;12313:90:4:-;12371:5;12313:90;:::o;7809:392::-;7884:7;7903:17;7923:20;7934:8;7923:10;:20::i;:::-;7903:40;;7966:9;7957:6;:18;7953:110;;;8024:8;8034:6;8042:9;7998:54;;;;;;;;;;;;;:::i;:::-;;;;;;;;7953:110;8073:14;8090:22;8105:6;8090:14;:22::i;:::-;8073:39;;8122:48;8131:12;:10;:12::i;:::-;8145:8;8155:6;8163;8122:8;:48::i;:::-;8188:6;8181:13;;;;7809:392;;;;:::o;10496:830::-;11164:65;11191:6;11199;11215:4;11222:6;11164:26;:65::i;:::-;11239:23;11245:8;11255:6;11239:5;:23::i;:::-;11294:8;11278:41;;11286:6;11278:41;;;11304:6;11312;11278:41;;;;;;;:::i;:::-;;;;;;;;10496:830;;;;:::o;8895:413::-;8986:7;9005:17;9025:18;9037:5;9025:11;:18::i;:::-;9005:38;;9066:9;9057:6;:18;9053:108;;;9125:5;9132:6;9140:9;9098:52;;;;;;;;;;;;;:::i;:::-;;;;;;;;9053:108;9171:14;9188:23;9204:6;9188:15;:23::i;:::-;9171:40;;9221:56;9231:12;:10;:12::i;:::-;9245:8;9255:5;9262:6;9270;9221:9;:56::i;:::-;9295:6;9288:13;;;;8895:413;;;;;:::o;11393:914::-;11580:5;11570:15;;:6;:15;;;11566:84;;11601:38;11617:5;11624:6;11632;11601:15;:38::i;:::-;11566:84;12157:20;12163:5;12170:6;12157:5;:20::i;:::-;12187:48;12210:6;12218:8;12228:6;12187:22;:48::i;:::-;12278:5;12251:49;;12268:8;12251:49;;12260:6;12251:49;;;12285:6;12293;12251:49;;;;;;;:::i;:::-;;;;;;;;11393:914;;;;;:::o;9882:213::-;9979:7;10005:83;10041:17;:15;:17::i;:::-;10035:2;:23;;;;:::i;:::-;10019:13;:11;:13::i;:::-;:39;;;;:::i;:::-;10076:1;10060:13;:11;:13::i;:::-;:17;;;;:::i;:::-;10079:8;10005:6;:13;;:83;;;;;;:::i;:::-;9998:90;;9882:213;;;;:::o;6658:153::-;6723:7;6749:55;6766:16;6776:5;6766:9;:16::i;:::-;6784:19;6749:16;:55::i;:::-;6742:62;;6658:153;;;:::o;8051:302:10:-;8152:7;8171:14;8188:25;8195:1;8198;8201:11;8188:6;:25::i;:::-;8171:42;;8227:26;8244:8;8227:16;:26::i;:::-;:59;;;;;8285:1;8270:11;8257:25;;;;;:::i;:::-;;8267:1;8264;8257:25;:29;8227:59;8223:101;;;8312:1;8302:11;;;;;:::i;:::-;;;8223:101;8340:6;8333:13;;;8051:302;;;;;;:::o;9949:432:2:-;10078:1;10061:19;;:5;:19;;;10057:89;;10132:1;10103:32;;;;;;;;;;;:::i;:::-;;;;;;;;10057:89;10178:1;10159:21;;:7;:21;;;10155:90;;10231:1;10203:31;;;;;;;;;;;:::i;:::-;;;;;;;;10155:90;10284:5;10254:11;:18;10266:5;10254:18;;;;;;;;;;;;;;;:27;10273:7;10254:27;;;;;;;;;;;;;;;:35;;;;10303:9;10299:76;;;10349:7;10333:31;;10342:5;10333:31;;;10358:5;10333:31;;;;;;:::i;:::-;;;;;;;;10299:76;9949:432;;;;:::o;6271:1107::-;6376:1;6360:18;;:4;:18;;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;;;;;6356:540;;;6548:19;6570:9;:15;6580:4;6570:15;;;;;;;;;;;;;;;;6548:37;;6617:5;6603:11;:19;6599:115;;;6674:4;6680:11;6693:5;6649:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;6599:115;6866:5;6852:11;:19;6834:9;:15;6844:4;6834:15;;;;;;;;;;;;;;;:37;;;;6534:362;6356:540;6924:1;6910:16;;:2;:16;;;6906:425;;7089:5;7073:12;;:21;;;;;;;;;;;6906:425;;;7301:5;7284:9;:13;7294:2;7284:13;;;;;;;;;;;;;;;;:22;;;;;;;;;;;6906:425;7361:2;7346:25;;7355:4;7346:25;;;7365:5;7346:25;;;;;;:::i;:::-;;;;;;;;6271:1107;;;:::o;1702:188:7:-;1802:81;1822:5;1844;:18;;;1865:4;1871:2;1875:5;1829:53;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1802:19;:81::i;:::-;1702:188;;;;:::o;7721:208:2:-;7810:1;7791:21;;:7;:21;;;7787:91;;7864:1;7835:32;;;;;;;;;;;:::i;:::-;;;;;;;;7787:91;7887:35;7903:1;7907:7;7916:5;7887:7;:35::i;:::-;7721:208;;:::o;8247:206::-;8336:1;8317:21;;:7;:21;;;8313:89;;8388:1;8361:30;;;;;;;;;;;:::i;:::-;;;;;;;;8313:89;8411:35;8419:7;8436:1;8440:5;8411:7;:35::i;:::-;8247:206;;:::o;1303:160:7:-;1385:71;1405:5;1427;:14;;;1444:2;1448:5;1412:43;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1385:19;:71::i;:::-;1303:160;;;:::o;3803:4116:10:-;3885:14;4232:13;4252:1;4248;:5;4232:21;;4312:13;4437:1;4433:6;4430:1;4427;4420:20;4493:5;4489:2;4486:13;4478:5;4474:2;4470:14;4466:34;4457:43;;4392:122;4604:1;4595:5;:10;4591:368;;4933:11;4925:5;:19;;;;;:::i;:::-;;;4918:26;;;;;;4591:368;5080:5;5065:11;:20;5061:88;;5112:22;;;;;;;;;;;;;;5061:88;5404:17;5539:11;5536:1;5533;5526:25;5513:38;;5667:5;5656:9;5653:20;5646:5;5642:32;5633:41;;5711:9;5704:5;5700:21;5691:30;;5939:12;5973:11;5969:1;:15;5954:11;:31;5939:46;;6105:4;6092:11;6088:22;6073:37;;6197:4;6190:5;6186:16;6177:25;;6354:1;6347:4;6340;6337:1;6333:12;6329:23;6325:31;6317:39;;6453:4;6445:5;:12;6436:21;;;;6775:15;6813:1;6798:11;6794:1;:15;6793:21;6775:39;;7060:7;7046:11;:21;7042:1;:25;7031:36;;;;7129:7;7115:11;:21;7111:1;:25;7100:36;;;;7199:7;7185:11;:21;7181:1;:25;7170:36;;;;7269:7;7255:11;:21;7251:1;:25;7240:36;;;;7339:7;7325:11;:21;7321:1;:25;7310:36;;;;7410:7;7396:11;:21;7392:1;:25;7381:36;;;;7868:7;7860:5;:15;7851:24;;7889:13;;;;;3803:4116;;;;;;:::o;14993:122::-;15061:4;15107:1;15102;15090:8;15084:15;;;;;;;;:::i;:::-;;:19;;;;:::i;:::-;:24;;;15077:31;;14993:122;;;:::o;4059:629:7:-;4478:23;4504:33;4532:4;4512:5;4504:27;;;;:33;;;;:::i;:::-;4478:59;;4572:1;4551:10;:17;:22;;:57;;;;;4589:10;4578:30;;;;;;;;;;;;:::i;:::-;4577:31;4551:57;4547:135;;;4664:5;4631:40;;;;;;;;;;;:::i;:::-;;;;;;;;4547:135;4129:559;4059:629;;:::o;2705:151:8:-;2780:12;2811:38;2833:6;2841:4;2847:1;2811:21;:38::i;:::-;2804:45;;2705:151;;;;:::o;3180:392::-;3279:12;3331:5;3307:21;:29;3303:108;;;3394:4;3359:41;;;;;;;;;;;:::i;:::-;;;;;;;;3303:108;3421:12;3435:23;3462:6;:11;;3481:5;3488:4;3462:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3420:73;;;;3510:55;3537:6;3545:7;3554:10;3510:26;:55::i;:::-;3503:62;;;;3180:392;;;;;:::o;4625:582::-;4769:12;4798:7;4793:408;;4821:19;4829:10;4821:7;:19::i;:::-;4793:408;;;5066:1;5045:10;:17;:22;:49;;;;;5093:1;5071:6;:18;;;:23;5045:49;5041:119;;;5138:6;5121:24;;;;;;;;;;;:::i;:::-;;;;;;;;5041:119;5180:10;5173:17;;;;4793:408;4625:582;;;;;;:::o;5743:516::-;5894:1;5874:10;:17;:21;5870:383;;;6102:10;6096:17;6158:15;6145:10;6141:2;6137:19;6130:44;5870:383;6225:17;;;;;;;;;;;;;;7:77:12;44:7;73:5;62:16;;7:77;;;:::o;90:118::-;177:24;195:5;177:24;:::i;:::-;172:3;165:37;90:118;;:::o;214:222::-;307:4;345:2;334:9;330:18;322:26;;358:71;426:1;415:9;411:17;402:6;358:71;:::i;:::-;214:222;;;;:::o;442:99::-;494:6;528:5;522:12;512:22;;442:99;;;:::o;547:169::-;631:11;665:6;660:3;653:19;705:4;700:3;696:14;681:29;;547:169;;;;:::o;722:139::-;811:6;806:3;801;795:23;852:1;843:6;838:3;834:16;827:27;722:139;;;:::o;867:102::-;908:6;959:2;955:7;950:2;943:5;939:14;935:28;925:38;;867:102;;;:::o;975:377::-;1063:3;1091:39;1124:5;1091:39;:::i;:::-;1146:71;1210:6;1205:3;1146:71;:::i;:::-;1139:78;;1226:65;1284:6;1279:3;1272:4;1265:5;1261:16;1226:65;:::i;:::-;1316:29;1338:6;1316:29;:::i;:::-;1311:3;1307:39;1300:46;;1067:285;975:377;;;;:::o;1358:313::-;1471:4;1509:2;1498:9;1494:18;1486:26;;1558:9;1552:4;1548:20;1544:1;1533:9;1529:17;1522:47;1586:78;1659:4;1650:6;1586:78;:::i;:::-;1578:86;;1358:313;;;;:::o;1758:117::-;1867:1;1864;1857:12;2004:122;2077:24;2095:5;2077:24;:::i;:::-;2070:5;2067:35;2057:63;;2116:1;2113;2106:12;2057:63;2004:122;:::o;2132:139::-;2178:5;2216:6;2203:20;2194:29;;2232:33;2259:5;2232:33;:::i;:::-;2132:139;;;;:::o;2277:329::-;2336:6;2385:2;2373:9;2364:7;2360:23;2356:32;2353:119;;;2391:79;;:::i;:::-;2353:119;2511:1;2536:53;2581:7;2572:6;2561:9;2557:22;2536:53;:::i;:::-;2526:63;;2482:117;2277:329;;;;:::o;2612:126::-;2649:7;2689:42;2682:5;2678:54;2667:65;;2612:126;;;:::o;2744:96::-;2781:7;2810:24;2828:5;2810:24;:::i;:::-;2799:35;;2744:96;;;:::o;2846:122::-;2919:24;2937:5;2919:24;:::i;:::-;2912:5;2909:35;2899:63;;2958:1;2955;2948:12;2899:63;2846:122;:::o;2974:139::-;3020:5;3058:6;3045:20;3036:29;;3074:33;3101:5;3074:33;:::i;:::-;2974:139;;;;:::o;3119:474::-;3187:6;3195;3244:2;3232:9;3223:7;3219:23;3215:32;3212:119;;;3250:79;;:::i;:::-;3212:119;3370:1;3395:53;3440:7;3431:6;3420:9;3416:22;3395:53;:::i;:::-;3385:63;;3341:117;3497:2;3523:53;3568:7;3559:6;3548:9;3544:22;3523:53;:::i;:::-;3513:63;;3468:118;3119:474;;;;;:::o;3599:90::-;3633:7;3676:5;3669:13;3662:21;3651:32;;3599:90;;;:::o;3695:109::-;3776:21;3791:5;3776:21;:::i;:::-;3771:3;3764:34;3695:109;;:::o;3810:210::-;3897:4;3935:2;3924:9;3920:18;3912:26;;3948:65;4010:1;3999:9;3995:17;3986:6;3948:65;:::i;:::-;3810:210;;;;:::o;4026:619::-;4103:6;4111;4119;4168:2;4156:9;4147:7;4143:23;4139:32;4136:119;;;4174:79;;:::i;:::-;4136:119;4294:1;4319:53;4364:7;4355:6;4344:9;4340:22;4319:53;:::i;:::-;4309:63;;4265:117;4421:2;4447:53;4492:7;4483:6;4472:9;4468:22;4447:53;:::i;:::-;4437:63;;4392:118;4549:2;4575:53;4620:7;4611:6;4600:9;4596:22;4575:53;:::i;:::-;4565:63;;4520:118;4026:619;;;;;:::o;4651:86::-;4686:7;4726:4;4719:5;4715:16;4704:27;;4651:86;;;:::o;4743:112::-;4826:22;4842:5;4826:22;:::i;:::-;4821:3;4814:35;4743:112;;:::o;4861:214::-;4950:4;4988:2;4977:9;4973:18;4965:26;;5001:67;5065:1;5054:9;5050:17;5041:6;5001:67;:::i;:::-;4861:214;;;;:::o;5081:118::-;5168:24;5186:5;5168:24;:::i;:::-;5163:3;5156:37;5081:118;;:::o;5205:222::-;5298:4;5336:2;5325:9;5321:18;5313:26;;5349:71;5417:1;5406:9;5402:17;5393:6;5349:71;:::i;:::-;5205:222;;;;:::o;5433:329::-;5492:6;5541:2;5529:9;5520:7;5516:23;5512:32;5509:119;;;5547:79;;:::i;:::-;5509:119;5667:1;5692:53;5737:7;5728:6;5717:9;5713:22;5692:53;:::i;:::-;5682:63;;5638:117;5433:329;;;;:::o;5768:474::-;5836:6;5844;5893:2;5881:9;5872:7;5868:23;5864:32;5861:119;;;5899:79;;:::i;:::-;5861:119;6019:1;6044:53;6089:7;6080:6;6069:9;6065:22;6044:53;:::i;:::-;6034:63;;5990:117;6146:2;6172:53;6217:7;6208:6;6197:9;6193:22;6172:53;:::i;:::-;6162:63;;6117:118;5768:474;;;;;:::o;6248:619::-;6325:6;6333;6341;6390:2;6378:9;6369:7;6365:23;6361:32;6358:119;;;6396:79;;:::i;:::-;6358:119;6516:1;6541:53;6586:7;6577:6;6566:9;6562:22;6541:53;:::i;:::-;6531:63;;6487:117;6643:2;6669:53;6714:7;6705:6;6694:9;6690:22;6669:53;:::i;:::-;6659:63;;6614:118;6771:2;6797:53;6842:7;6833:6;6822:9;6818:22;6797:53;:::i;:::-;6787:63;;6742:118;6248:619;;;;;:::o;6873:474::-;6941:6;6949;6998:2;6986:9;6977:7;6973:23;6969:32;6966:119;;;7004:79;;:::i;:::-;6966:119;7124:1;7149:53;7194:7;7185:6;7174:9;7170:22;7149:53;:::i;:::-;7139:63;;7095:117;7251:2;7277:53;7322:7;7313:6;7302:9;7298:22;7277:53;:::i;:::-;7267:63;;7222:118;6873:474;;;;;:::o;7353:143::-;7410:5;7441:6;7435:13;7426:22;;7457:33;7484:5;7457:33;:::i;:::-;7353:143;;;;:::o;7502:351::-;7572:6;7621:2;7609:9;7600:7;7596:23;7592:32;7589:119;;;7627:79;;:::i;:::-;7589:119;7747:1;7772:64;7828:7;7819:6;7808:9;7804:22;7772:64;:::i;:::-;7762:74;;7718:128;7502:351;;;;:::o;7859:180::-;7907:77;7904:1;7897:88;8004:4;8001:1;7994:15;8028:4;8025:1;8018:15;8045:320;8089:6;8126:1;8120:4;8116:12;8106:22;;8173:1;8167:4;8163:12;8194:18;8184:81;;8250:4;8242:6;8238:17;8228:27;;8184:81;8312:2;8304:6;8301:14;8281:18;8278:38;8275:84;;8331:18;;:::i;:::-;8275:84;8096:269;8045:320;;;:::o;8371:180::-;8419:77;8416:1;8409:88;8516:4;8513:1;8506:15;8540:4;8537:1;8530:15;8557:194;8597:4;8617:20;8635:1;8617:20;:::i;:::-;8612:25;;8651:20;8669:1;8651:20;:::i;:::-;8646:25;;8695:1;8692;8688:9;8680:17;;8719:1;8713:4;8710:11;8707:37;;;8724:18;;:::i;:::-;8707:37;8557:194;;;;:::o;8757:188::-;8795:3;8814:18;8830:1;8814:18;:::i;:::-;8809:23;;8846:18;8862:1;8846:18;:::i;:::-;8841:23;;8887:1;8884;8880:9;8873:16;;8910:4;8905:3;8902:13;8899:39;;;8918:18;;:::i;:::-;8899:39;8757:188;;;;:::o;8951:191::-;8991:3;9010:20;9028:1;9010:20;:::i;:::-;9005:25;;9044:20;9062:1;9044:20;:::i;:::-;9039:25;;9087:1;9084;9080:9;9073:16;;9108:3;9105:1;9102:10;9099:36;;;9115:18;;:::i;:::-;9099:36;8951:191;;;;:::o;9148:442::-;9297:4;9335:2;9324:9;9320:18;9312:26;;9348:71;9416:1;9405:9;9401:17;9392:6;9348:71;:::i;:::-;9429:72;9497:2;9486:9;9482:18;9473:6;9429:72;:::i;:::-;9511;9579:2;9568:9;9564:18;9555:6;9511:72;:::i;:::-;9148:442;;;;;;:::o;9596:177::-;9736:29;9732:1;9724:6;9720:14;9713:53;9596:177;:::o;9779:366::-;9921:3;9942:67;10006:2;10001:3;9942:67;:::i;:::-;9935:74;;10018:93;10107:3;10018:93;:::i;:::-;10136:2;10131:3;10127:12;10120:19;;9779:366;;;:::o;10151:419::-;10317:4;10355:2;10344:9;10340:18;10332:26;;10404:9;10398:4;10394:20;10390:1;10379:9;10375:17;10368:47;10432:131;10558:4;10432:131;:::i;:::-;10424:139;;10151:419;;;:::o;10576:220::-;10716:34;10712:1;10704:6;10700:14;10693:58;10785:3;10780:2;10772:6;10768:15;10761:28;10576:220;:::o;10802:366::-;10944:3;10965:67;11029:2;11024:3;10965:67;:::i;:::-;10958:74;;11041:93;11130:3;11041:93;:::i;:::-;11159:2;11154:3;11150:12;11143:19;;10802:366;;;:::o;11174:419::-;11340:4;11378:2;11367:9;11363:18;11355:26;;11427:9;11421:4;11417:20;11413:1;11402:9;11398:17;11391:47;11455:131;11581:4;11455:131;:::i;:::-;11447:139;;11174:419;;;:::o;11599:102::-;11641:8;11688:5;11685:1;11681:13;11660:34;;11599:102;;;:::o;11707:848::-;11768:5;11775:4;11799:6;11790:15;;11823:5;11814:14;;11837:712;11858:1;11848:8;11845:15;11837:712;;;11953:4;11948:3;11944:14;11938:4;11935:24;11932:50;;;11962:18;;:::i;:::-;11932:50;12012:1;12002:8;11998:16;11995:451;;;12427:4;12420:5;12416:16;12407:25;;11995:451;12477:4;12471;12467:15;12459:23;;12507:32;12530:8;12507:32;:::i;:::-;12495:44;;11837:712;;;11707:848;;;;;;;:::o;12561:1073::-;12615:5;12806:8;12796:40;;12827:1;12818:10;;12829:5;;12796:40;12855:4;12845:36;;12872:1;12863:10;;12874:5;;12845:36;12941:4;12989:1;12984:27;;;;13025:1;13020:191;;;;12934:277;;12984:27;13002:1;12993:10;;13004:5;;;13020:191;13065:3;13055:8;13052:17;13049:43;;;13072:18;;:::i;:::-;13049:43;13121:8;13118:1;13114:16;13105:25;;13156:3;13149:5;13146:14;13143:40;;;13163:18;;:::i;:::-;13143:40;13196:5;;;12934:277;;13320:2;13310:8;13307:16;13301:3;13295:4;13292:13;13288:36;13270:2;13260:8;13257:16;13252:2;13246:4;13243:12;13239:35;13223:111;13220:246;;;13376:8;13370:4;13366:19;13357:28;;13411:3;13404:5;13401:14;13398:40;;;13418:18;;:::i;:::-;13398:40;13451:5;;13220:246;13491:42;13529:3;13519:8;13513:4;13510:1;13491:42;:::i;:::-;13476:57;;;;13565:4;13560:3;13556:14;13549:5;13546:25;13543:51;;;13574:18;;:::i;:::-;13543:51;13623:4;13616:5;13612:16;13603:25;;12561:1073;;;;;;:::o;13640:281::-;13698:5;13722:23;13740:4;13722:23;:::i;:::-;13714:31;;13766:25;13782:8;13766:25;:::i;:::-;13754:37;;13810:104;13847:66;13837:8;13831:4;13810:104;:::i;:::-;13801:113;;13640:281;;;;:::o;13927:332::-;14048:4;14086:2;14075:9;14071:18;14063:26;;14099:71;14167:1;14156:9;14152:17;14143:6;14099:71;:::i;:::-;14180:72;14248:2;14237:9;14233:18;14224:6;14180:72;:::i;:::-;13927:332;;;;;:::o;14265:180::-;14313:77;14310:1;14303:88;14410:4;14407:1;14400:15;14434:4;14431:1;14424:15;14451:442;14600:4;14638:2;14627:9;14623:18;14615:26;;14651:71;14719:1;14708:9;14704:17;14695:6;14651:71;:::i;:::-;14732:72;14800:2;14789:9;14785:18;14776:6;14732:72;:::i;:::-;14814;14882:2;14871:9;14867:18;14858:6;14814:72;:::i;:::-;14451:442;;;;;;:::o;14899:332::-;15020:4;15058:2;15047:9;15043:18;15035:26;;15071:71;15139:1;15128:9;15124:17;15115:6;15071:71;:::i;:::-;15152:72;15220:2;15209:9;15205:18;15196:6;15152:72;:::i;:::-;14899:332;;;;;:::o;15237:180::-;15285:77;15282:1;15275:88;15382:4;15379:1;15372:15;15406:4;15403:1;15396:15;15423:170;15453:1;15470:18;15486:1;15470:18;:::i;:::-;15465:23;;15502:18;15518:1;15502:18;:::i;:::-;15497:23;;15539:1;15529:35;;15544:18;;:::i;:::-;15529:35;15585:1;15582;15578:9;15573:14;;15423:170;;;;:::o;15599:116::-;15669:21;15684:5;15669:21;:::i;:::-;15662:5;15659:32;15649:60;;15705:1;15702;15695:12;15649:60;15599:116;:::o;15721:137::-;15775:5;15806:6;15800:13;15791:22;;15822:30;15846:5;15822:30;:::i;:::-;15721:137;;;;:::o;15864:345::-;15931:6;15980:2;15968:9;15959:7;15955:23;15951:32;15948:119;;;15986:79;;:::i;:::-;15948:119;16106:1;16131:61;16184:7;16175:6;16164:9;16160:22;16131:61;:::i;:::-;16121:71;;16077:125;15864:345;;;;:::o;16215:98::-;16266:6;16300:5;16294:12;16284:22;;16215:98;;;:::o;16319:147::-;16420:11;16457:3;16442:18;;16319:147;;;;:::o;16472:386::-;16576:3;16604:38;16636:5;16604:38;:::i;:::-;16658:88;16739:6;16734:3;16658:88;:::i;:::-;16651:95;;16755:65;16813:6;16808:3;16801:4;16794:5;16790:16;16755:65;:::i;:::-;16845:6;16840:3;16836:16;16829:23;;16580:278;16472:386;;;;:::o;16864:271::-;16994:3;17016:93;17105:3;17096:6;17016:93;:::i;:::-;17009:100;;17126:3;17119:10;;16864:271;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1998600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "infinite",
								"asset()": "infinite",
								"balanceOf(address)": "2940",
								"convertToAssets(uint256)": "infinite",
								"convertToShares(uint256)": "infinite",
								"decimals()": "infinite",
								"deposit(uint256,address)": "infinite",
								"lockedCollateral(address)": "2848",
								"maxDeposit(address)": "686",
								"maxMint(address)": "708",
								"maxRedeem(address)": "2937",
								"maxWithdraw(address)": "infinite",
								"mint(uint256,address)": "infinite",
								"name()": "infinite",
								"previewDeposit(uint256)": "infinite",
								"previewMint(uint256)": "infinite",
								"previewRedeem(uint256)": "infinite",
								"previewWithdraw(uint256)": "infinite",
								"redeem(uint256,address,address)": "infinite",
								"symbol()": "infinite",
								"tokenAddress()": "2553",
								"totalAssets()": "infinite",
								"totalSupply()": "2566",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"withdraw(uint256,address,address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 193,
									"end": 2835,
									"name": "PUSH",
									"source": 11,
									"value": "C0"
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "CALLVALUE",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 603,
									"end": 701,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 603,
									"end": 701,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 603,
									"end": 701,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 603,
									"end": 701,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "PUSHSIZE",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "CODESIZE",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "PUSHSIZE",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 603,
									"end": 701,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 603,
									"end": 701,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "3"
								},
								{
									"begin": 603,
									"end": 701,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 603,
									"end": 701,
									"name": "tag",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 603,
									"end": 701,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 653,
									"end": 666,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "D"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "4D795661756C7453686172657300000000000000000000000000000000000000"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 2,
									"value": "4D56530000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1970,
									"end": 1975,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1962,
									"end": 1967,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 1962,
									"end": 1975,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "tag",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1995,
									"end": 2002,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1985,
									"end": 1992,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 1985,
									"end": 2002,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "tag",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 4203,
									"end": 4215,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 4217,
									"end": 4236,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "12"
								},
								{
									"begin": 4261,
									"end": 4267,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 4240,
									"end": 4260,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "13"
								},
								{
									"begin": 4240,
									"end": 4260,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 4240,
									"end": 4260,
									"name": "SHL",
									"source": 4
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "SHR",
									"source": 4
								},
								{
									"begin": 4240,
									"end": 4268,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "tag",
									"source": 4,
									"value": "12"
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 4202,
									"end": 4268,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 4202,
									"end": 4268,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4202,
									"end": 4268,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 4202,
									"end": 4268,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4300,
									"end": 4307,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "14"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 4326,
									"end": 4328,
									"name": "PUSH",
									"source": 4,
									"value": "12"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "15"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "tag",
									"source": 4,
									"value": "14"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 4310,
									"end": 4323,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "tag",
									"source": 4,
									"value": "15"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "PUSH",
									"source": 4,
									"value": "FF"
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "PUSH",
									"source": 4,
									"value": "A0"
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "PUSH",
									"source": 4,
									"value": "FF"
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4347,
									"end": 4353,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "PUSH",
									"source": 4,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "PUSH",
									"source": 4,
									"value": "80"
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "PUSH",
									"source": 4,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4192,
									"end": 4360,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4192,
									"end": 4360,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4165,
									"end": 4360,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 603,
									"end": 701,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "17"
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "tag",
									"source": 4,
									"value": "13"
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 4570,
									"end": 4574,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 4576,
									"end": 4581,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 4594,
									"end": 4606,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 4608,
									"end": 4636,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 4648,
									"end": 4654,
									"name": "DUP5",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4666,
									"name": "PUSH",
									"source": 4,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 4640,
									"end": 4666,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "SUB",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "SUB",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 4,
									"value": "313CE567"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 4,
									"value": "E0"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "SHL",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 4,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "OR",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "19"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 4640,
									"end": 4733,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "tag",
									"source": 4,
									"value": "19"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SUB",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP6",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "GAS",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "STATICCALL",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "RETURNDATASIZE",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "23"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 4,
									"value": "1F"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "NOT",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 4,
									"value": "3F"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "RETURNDATASIZE",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "RETURNDATASIZE",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "RETURNDATASIZE",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "DUP5",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "RETURNDATACOPY",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "22"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "tag",
									"source": 4,
									"value": "23"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "PUSH",
									"source": 4,
									"value": "60"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "tag",
									"source": 4,
									"value": "22"
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4593,
									"end": 4733,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 4593,
									"end": 4733,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4593,
									"end": 4733,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 4593,
									"end": 4733,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4747,
									"end": 4754,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4784,
									"end": 4786,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 4758,
									"end": 4773,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 4758,
									"end": 4780,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 4758,
									"end": 4786,
									"name": "LT",
									"source": 4
								},
								{
									"begin": 4758,
									"end": 4786,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "tag",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "25"
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 4802,
									"end": 4826,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 4840,
									"end": 4855,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "26"
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "27"
								},
								{
									"begin": 4829,
									"end": 4867,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "tag",
									"source": 4,
									"value": "26"
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 4802,
									"end": 4867,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 4802,
									"end": 4867,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4905,
									"end": 4920,
									"name": "PUSH",
									"source": 4,
									"value": "FF"
								},
								{
									"begin": 4885,
									"end": 4920,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 4885,
									"end": 4920,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 4885,
									"end": 4901,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 4885,
									"end": 4920,
									"name": "GT",
									"source": 4
								},
								{
									"begin": 4881,
									"end": 4993,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "28"
								},
								{
									"begin": 4881,
									"end": 4993,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 4948,
									"end": 4952,
									"name": "PUSH",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 4960,
									"end": 4976,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "SWAP5",
									"source": 4
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "SWAP5",
									"source": 4
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "18"
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 4881,
									"end": 4993,
									"name": "tag",
									"source": 4,
									"value": "28"
								},
								{
									"begin": 4881,
									"end": 4993,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 4788,
									"end": 5003,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "tag",
									"source": 4,
									"value": "25"
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 5020,
									"end": 5025,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 5027,
									"end": 5028,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "SWAP4",
									"source": 4
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "SWAP4",
									"source": 4
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "tag",
									"source": 4,
									"value": "18"
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 4503,
									"end": 5036,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 12,
									"value": "30"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 334,
									"end": 460,
									"name": "tag",
									"source": 12,
									"value": "32"
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 453,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 404,
									"end": 409,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 400,
									"end": 454,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 389,
									"end": 454,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 389,
									"end": 454,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 334,
									"end": 460,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 334,
									"end": 460,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 466,
									"end": 562,
									"name": "tag",
									"source": 12,
									"value": "33"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 503,
									"end": 510,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "68"
								},
								{
									"begin": 550,
									"end": 555,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "32"
								},
								{
									"begin": 532,
									"end": 556,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 532,
									"end": 556,
									"name": "tag",
									"source": 12,
									"value": "68"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 521,
									"end": 556,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 521,
									"end": 556,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 466,
									"end": 562,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 466,
									"end": 562,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 568,
									"end": 690,
									"name": "tag",
									"source": 12,
									"value": "34"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "70"
								},
								{
									"begin": 659,
									"end": 664,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "33"
								},
								{
									"begin": 641,
									"end": 665,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 641,
									"end": 665,
									"name": "tag",
									"source": 12,
									"value": "70"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 634,
									"end": 639,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 631,
									"end": 666,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 621,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "71"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 680,
									"end": 681,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 677,
									"end": 678,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 670,
									"end": 682,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 621,
									"end": 684,
									"name": "tag",
									"source": 12,
									"value": "71"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 568,
									"end": 690,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 568,
									"end": 690,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 696,
									"end": 839,
									"name": "tag",
									"source": 12,
									"value": "35"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 753,
									"end": 758,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 784,
									"end": 790,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 778,
									"end": 791,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 769,
									"end": 791,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 769,
									"end": 791,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 827,
									"end": 832,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "34"
								},
								{
									"begin": 800,
									"end": 833,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 800,
									"end": 833,
									"name": "tag",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 696,
									"end": 839,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "tag",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 915,
									"end": 921,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 964,
									"end": 966,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 952,
									"end": 961,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 943,
									"end": 950,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 939,
									"end": 962,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 935,
									"end": 967,
									"name": "SLT",
									"source": 12
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "75"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "76"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "30"
								},
								{
									"begin": 970,
									"end": 1049,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "tag",
									"source": 12,
									"value": "76"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "tag",
									"source": 12,
									"value": "75"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1090,
									"end": 1091,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "77"
								},
								{
									"begin": 1171,
									"end": 1178,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 1162,
									"end": 1168,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1151,
									"end": 1160,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 1147,
									"end": 1169,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "35"
								},
								{
									"begin": 1115,
									"end": 1179,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "tag",
									"source": 12,
									"value": "77"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1061,
									"end": 1189,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 845,
									"end": 1196,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "tag",
									"source": 12,
									"value": "36"
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1254,
									"end": 1260,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1288,
									"end": 1293,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1282,
									"end": 1294,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 1272,
									"end": 1294,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1272,
									"end": 1294,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1202,
									"end": 1301,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1307,
									"end": 1487,
									"name": "tag",
									"source": 12,
									"value": "37"
								},
								{
									"begin": 1307,
									"end": 1487,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1355,
									"end": 1432,
									"name": "PUSH",
									"source": 12,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1352,
									"end": 1353,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1345,
									"end": 1433,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1452,
									"end": 1456,
									"name": "PUSH",
									"source": 12,
									"value": "41"
								},
								{
									"begin": 1449,
									"end": 1450,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 1442,
									"end": 1457,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1476,
									"end": 1480,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 1473,
									"end": 1474,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1466,
									"end": 1481,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 1493,
									"end": 1673,
									"name": "tag",
									"source": 12,
									"value": "38"
								},
								{
									"begin": 1493,
									"end": 1673,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1541,
									"end": 1618,
									"name": "PUSH",
									"source": 12,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1538,
									"end": 1539,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1531,
									"end": 1619,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1638,
									"end": 1642,
									"name": "PUSH",
									"source": 12,
									"value": "22"
								},
								{
									"begin": 1635,
									"end": 1636,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 1628,
									"end": 1643,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1662,
									"end": 1666,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 1659,
									"end": 1660,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1652,
									"end": 1667,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "tag",
									"source": 12,
									"value": "39"
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1723,
									"end": 1729,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1760,
									"end": 1761,
									"name": "PUSH",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 1754,
									"end": 1758,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1750,
									"end": 1762,
									"name": "DIV",
									"source": 12
								},
								{
									"begin": 1740,
									"end": 1762,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1740,
									"end": 1762,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1807,
									"end": 1808,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 1801,
									"end": 1805,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1797,
									"end": 1809,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 1828,
									"end": 1846,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1818,
									"end": 1899,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "82"
								},
								{
									"begin": 1818,
									"end": 1899,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1884,
									"end": 1888,
									"name": "PUSH",
									"source": 12,
									"value": "7F"
								},
								{
									"begin": 1876,
									"end": 1882,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1872,
									"end": 1889,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 1862,
									"end": 1889,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1862,
									"end": 1889,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1818,
									"end": 1899,
									"name": "tag",
									"source": 12,
									"value": "82"
								},
								{
									"begin": 1818,
									"end": 1899,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1946,
									"end": 1948,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1938,
									"end": 1944,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1935,
									"end": 1949,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 1915,
									"end": 1933,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1912,
									"end": 1950,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 1909,
									"end": 1993,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "83"
								},
								{
									"begin": 1909,
									"end": 1993,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1965,
									"end": 1983,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "84"
								},
								{
									"begin": 1965,
									"end": 1983,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "38"
								},
								{
									"begin": 1965,
									"end": 1983,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1965,
									"end": 1983,
									"name": "tag",
									"source": 12,
									"value": "84"
								},
								{
									"begin": 1965,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1909,
									"end": 1993,
									"name": "tag",
									"source": 12,
									"value": "83"
								},
								{
									"begin": 1909,
									"end": 1993,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1730,
									"end": 1999,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1679,
									"end": 1999,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "tag",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2054,
									"end": 2058,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2077,
									"end": 2080,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2069,
									"end": 2080,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2069,
									"end": 2080,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2100,
									"end": 2103,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2097,
									"end": 2098,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2090,
									"end": 2104,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2134,
									"end": 2138,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2131,
									"end": 2132,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2121,
									"end": 2139,
									"name": "KECCAK256",
									"source": 12
								},
								{
									"begin": 2113,
									"end": 2139,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2113,
									"end": 2139,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2005,
									"end": 2146,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "tag",
									"source": 12,
									"value": "41"
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2189,
									"end": 2195,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2236,
									"end": 2238,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2231,
									"end": 2233,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 2224,
									"end": 2229,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 2220,
									"end": 2234,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2216,
									"end": 2239,
									"name": "DIV",
									"source": 12
								},
								{
									"begin": 2206,
									"end": 2239,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2206,
									"end": 2239,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2152,
									"end": 2245,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "tag",
									"source": 12,
									"value": "42"
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2295,
									"end": 2303,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2345,
									"end": 2350,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2339,
									"end": 2343,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2335,
									"end": 2351,
									"name": "SHL",
									"source": 12
								},
								{
									"begin": 2314,
									"end": 2351,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2314,
									"end": 2351,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2251,
									"end": 2358,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "tag",
									"source": 12,
									"value": "43"
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2433,
									"end": 2439,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2483,
									"end": 2484,
									"name": "PUSH",
									"source": 12,
									"value": "8"
								},
								{
									"begin": 2471,
									"end": 2481,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 2467,
									"end": 2485,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 2506,
									"end": 2603,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "89"
								},
								{
									"begin": 2536,
									"end": 2602,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2525,
									"end": 2534,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2506,
									"end": 2603,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "42"
								},
								{
									"begin": 2506,
									"end": 2603,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2506,
									"end": 2603,
									"name": "tag",
									"source": 12,
									"value": "89"
								},
								{
									"begin": 2506,
									"end": 2603,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2624,
									"end": 2663,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "90"
								},
								{
									"begin": 2654,
									"end": 2662,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 2643,
									"end": 2652,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 2624,
									"end": 2663,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "42"
								},
								{
									"begin": 2624,
									"end": 2663,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2624,
									"end": 2663,
									"name": "tag",
									"source": 12,
									"value": "90"
								},
								{
									"begin": 2624,
									"end": 2663,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2612,
									"end": 2663,
									"name": "SWAP6",
									"source": 12
								},
								{
									"begin": 2612,
									"end": 2663,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2696,
									"end": 2700,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2692,
									"end": 2701,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 2685,
									"end": 2690,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 2681,
									"end": 2702,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 2672,
									"end": 2702,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": 2672,
									"end": 2702,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2745,
									"end": 2749,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2735,
									"end": 2743,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 2731,
									"end": 2750,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 2724,
									"end": 2729,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 2721,
									"end": 2751,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 2711,
									"end": 2751,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 2711,
									"end": 2751,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2440,
									"end": 2757,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2440,
									"end": 2757,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2364,
									"end": 2757,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "tag",
									"source": 12,
									"value": "44"
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2800,
									"end": 2807,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2829,
									"end": 2834,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2818,
									"end": 2834,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2818,
									"end": 2834,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2763,
									"end": 2840,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "tag",
									"source": 12,
									"value": "45"
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2874,
									"end": 2877,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2895,
									"end": 2900,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2888,
									"end": 2900,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2888,
									"end": 2900,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2846,
									"end": 2906,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "tag",
									"source": 12,
									"value": "46"
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2962,
									"end": 2971,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2995,
									"end": 3048,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "94"
								},
								{
									"begin": 3013,
									"end": 3047,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "95"
								},
								{
									"begin": 3022,
									"end": 3046,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "96"
								},
								{
									"begin": 3040,
									"end": 3045,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 3022,
									"end": 3046,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "44"
								},
								{
									"begin": 3022,
									"end": 3046,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3022,
									"end": 3046,
									"name": "tag",
									"source": 12,
									"value": "96"
								},
								{
									"begin": 3022,
									"end": 3046,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3013,
									"end": 3047,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "45"
								},
								{
									"begin": 3013,
									"end": 3047,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3013,
									"end": 3047,
									"name": "tag",
									"source": 12,
									"value": "95"
								},
								{
									"begin": 3013,
									"end": 3047,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2995,
									"end": 3048,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "44"
								},
								{
									"begin": 2995,
									"end": 3048,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 2995,
									"end": 3048,
									"name": "tag",
									"source": 12,
									"value": "94"
								},
								{
									"begin": 2995,
									"end": 3048,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2982,
									"end": 3048,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2982,
									"end": 3048,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2912,
									"end": 3054,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "tag",
									"source": 12,
									"value": "47"
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3103,
									"end": 3106,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3124,
									"end": 3129,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3117,
									"end": 3129,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3117,
									"end": 3129,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3060,
									"end": 3135,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "tag",
									"source": 12,
									"value": "48"
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3251,
									"end": 3290,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "99"
								},
								{
									"begin": 3282,
									"end": 3289,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 3251,
									"end": 3290,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "46"
								},
								{
									"begin": 3251,
									"end": 3290,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3251,
									"end": 3290,
									"name": "tag",
									"source": 12,
									"value": "99"
								},
								{
									"begin": 3251,
									"end": 3290,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3312,
									"end": 3403,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "100"
								},
								{
									"begin": 3361,
									"end": 3402,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "101"
								},
								{
									"begin": 3385,
									"end": 3401,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3361,
									"end": 3402,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "47"
								},
								{
									"begin": 3361,
									"end": 3402,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3361,
									"end": 3402,
									"name": "tag",
									"source": 12,
									"value": "101"
								},
								{
									"begin": 3361,
									"end": 3402,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3353,
									"end": 3359,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 3346,
									"end": 3350,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 3340,
									"end": 3351,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 3312,
									"end": 3403,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "43"
								},
								{
									"begin": 3312,
									"end": 3403,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3312,
									"end": 3403,
									"name": "tag",
									"source": 12,
									"value": "100"
								},
								{
									"begin": 3312,
									"end": 3403,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3306,
									"end": 3310,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3299,
									"end": 3404,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 3217,
									"end": 3410,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3141,
									"end": 3410,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3416,
									"end": 3489,
									"name": "tag",
									"source": 12,
									"value": "49"
								},
								{
									"begin": 3416,
									"end": 3489,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3461,
									"end": 3464,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3416,
									"end": 3489,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3416,
									"end": 3489,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3495,
									"end": 3684,
									"name": "tag",
									"source": 12,
									"value": "50"
								},
								{
									"begin": 3495,
									"end": 3684,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3572,
									"end": 3604,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "104"
								},
								{
									"begin": 3572,
									"end": 3604,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "49"
								},
								{
									"begin": 3572,
									"end": 3604,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3572,
									"end": 3604,
									"name": "tag",
									"source": 12,
									"value": "104"
								},
								{
									"begin": 3572,
									"end": 3604,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3613,
									"end": 3678,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "105"
								},
								{
									"begin": 3671,
									"end": 3677,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3663,
									"end": 3669,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 3657,
									"end": 3661,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 3613,
									"end": 3678,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "48"
								},
								{
									"begin": 3613,
									"end": 3678,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3613,
									"end": 3678,
									"name": "tag",
									"source": 12,
									"value": "105"
								},
								{
									"begin": 3613,
									"end": 3678,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3548,
									"end": 3684,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3495,
									"end": 3684,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3495,
									"end": 3684,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3495,
									"end": 3684,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3690,
									"end": 3876,
									"name": "tag",
									"source": 12,
									"value": "51"
								},
								{
									"begin": 3690,
									"end": 3876,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "tag",
									"source": 12,
									"value": "107"
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3767,
									"end": 3770,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3760,
									"end": 3765,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3757,
									"end": 3771,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "109"
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 3821,
									"end": 3860,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "110"
								},
								{
									"begin": 3858,
									"end": 3859,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3851,
									"end": 3856,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3821,
									"end": 3860,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "50"
								},
								{
									"begin": 3821,
									"end": 3860,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3821,
									"end": 3860,
									"name": "tag",
									"source": 12,
									"value": "110"
								},
								{
									"begin": 3821,
									"end": 3860,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3794,
									"end": 3795,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 3787,
									"end": 3792,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3783,
									"end": 3796,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3774,
									"end": 3796,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3774,
									"end": 3796,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "107"
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "tag",
									"source": 12,
									"value": "109"
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3690,
									"end": 3876,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3690,
									"end": 3876,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3690,
									"end": 3876,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "tag",
									"source": 12,
									"value": "52"
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3983,
									"end": 3985,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 3978,
									"end": 3981,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3975,
									"end": 3986,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "112"
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 4017,
									"end": 4055,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "113"
								},
								{
									"begin": 4049,
									"end": 4054,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 4017,
									"end": 4055,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 4017,
									"end": 4055,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4017,
									"end": 4055,
									"name": "tag",
									"source": 12,
									"value": "113"
								},
								{
									"begin": 4017,
									"end": 4055,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4101,
									"end": 4130,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "114"
								},
								{
									"begin": 4119,
									"end": 4129,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 4101,
									"end": 4130,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "41"
								},
								{
									"begin": 4101,
									"end": 4130,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4101,
									"end": 4130,
									"name": "tag",
									"source": 12,
									"value": "114"
								},
								{
									"begin": 4101,
									"end": 4130,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4091,
									"end": 4099,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 4087,
									"end": 4131,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 4284,
									"end": 4286,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 4272,
									"end": 4282,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 4269,
									"end": 4287,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "115"
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 4305,
									"end": 4313,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 4290,
									"end": 4313,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 4290,
									"end": 4313,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "tag",
									"source": 12,
									"value": "115"
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4328,
									"end": 4408,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "116"
								},
								{
									"begin": 4384,
									"end": 4406,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "117"
								},
								{
									"begin": 4402,
									"end": 4405,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 4384,
									"end": 4406,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "41"
								},
								{
									"begin": 4384,
									"end": 4406,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4384,
									"end": 4406,
									"name": "tag",
									"source": 12,
									"value": "117"
								},
								{
									"begin": 4384,
									"end": 4406,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4374,
									"end": 4382,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 4370,
									"end": 4407,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 4357,
									"end": 4368,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 4328,
									"end": 4408,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "51"
								},
								{
									"begin": 4328,
									"end": 4408,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4328,
									"end": 4408,
									"name": "tag",
									"source": 12,
									"value": "116"
								},
								{
									"begin": 4328,
									"end": 4408,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3987,
									"end": 4418,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3987,
									"end": 4418,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "tag",
									"source": 12,
									"value": "112"
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3882,
									"end": 4425,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "tag",
									"source": 12,
									"value": "53"
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4485,
									"end": 4493,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 4535,
									"end": 4540,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 4529,
									"end": 4533,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 4525,
									"end": 4541,
									"name": "SHR",
									"source": 12
								},
								{
									"begin": 4504,
									"end": 4541,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 4504,
									"end": 4541,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4431,
									"end": 4548,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "tag",
									"source": 12,
									"value": "54"
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4598,
									"end": 4604,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 4631,
									"end": 4682,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "120"
								},
								{
									"begin": 4679,
									"end": 4680,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 4675,
									"end": 4681,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 4667,
									"end": 4672,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 4664,
									"end": 4665,
									"name": "PUSH",
									"source": 12,
									"value": "8"
								},
								{
									"begin": 4660,
									"end": 4673,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 4631,
									"end": 4682,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "53"
								},
								{
									"begin": 4631,
									"end": 4682,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4631,
									"end": 4682,
									"name": "tag",
									"source": 12,
									"value": "120"
								},
								{
									"begin": 4631,
									"end": 4682,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4627,
									"end": 4683,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 4712,
									"end": 4716,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 4706,
									"end": 4710,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 4702,
									"end": 4717,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 4692,
									"end": 4717,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 4692,
									"end": 4717,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4605,
									"end": 4723,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4554,
									"end": 4723,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "tag",
									"source": 12,
									"value": "55"
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4804,
									"end": 4808,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 4950,
									"end": 4979,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "122"
								},
								{
									"begin": 4975,
									"end": 4978,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 4969,
									"end": 4973,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 4950,
									"end": 4979,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "54"
								},
								{
									"begin": 4950,
									"end": 4979,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 4950,
									"end": 4979,
									"name": "tag",
									"source": 12,
									"value": "122"
								},
								{
									"begin": 4950,
									"end": 4979,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4942,
									"end": 4979,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 4942,
									"end": 4979,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5012,
									"end": 5015,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 5009,
									"end": 5010,
									"name": "PUSH",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 5005,
									"end": 5016,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 4999,
									"end": 5003,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 4996,
									"end": 5017,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 4988,
									"end": 5017,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 4988,
									"end": 5017,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 4728,
									"end": 5023,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 5028,
									"end": 6423,
									"name": "tag",
									"source": 12,
									"value": "9"
								},
								{
									"begin": 5028,
									"end": 6423,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5145,
									"end": 5182,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "124"
								},
								{
									"begin": 5178,
									"end": 5181,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 5145,
									"end": 5182,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "36"
								},
								{
									"begin": 5145,
									"end": 5182,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 5145,
									"end": 5182,
									"name": "tag",
									"source": 12,
									"value": "124"
								},
								{
									"begin": 5145,
									"end": 5182,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5247,
									"end": 5265,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 5239,
									"end": 5245,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 5236,
									"end": 5266,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "125"
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 5269,
									"end": 5287,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "126"
								},
								{
									"begin": 5269,
									"end": 5287,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "37"
								},
								{
									"begin": 5269,
									"end": 5287,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 5269,
									"end": 5287,
									"name": "tag",
									"source": 12,
									"value": "126"
								},
								{
									"begin": 5269,
									"end": 5287,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "tag",
									"source": 12,
									"value": "125"
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5313,
									"end": 5351,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "127"
								},
								{
									"begin": 5345,
									"end": 5349,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 5339,
									"end": 5350,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 5313,
									"end": 5351,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "39"
								},
								{
									"begin": 5313,
									"end": 5351,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 5313,
									"end": 5351,
									"name": "tag",
									"source": 12,
									"value": "127"
								},
								{
									"begin": 5313,
									"end": 5351,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5398,
									"end": 5465,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "128"
								},
								{
									"begin": 5458,
									"end": 5464,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 5450,
									"end": 5456,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 5444,
									"end": 5448,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 5398,
									"end": 5465,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "52"
								},
								{
									"begin": 5398,
									"end": 5465,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 5398,
									"end": 5465,
									"name": "tag",
									"source": 12,
									"value": "128"
								},
								{
									"begin": 5398,
									"end": 5465,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5492,
									"end": 5493,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 5516,
									"end": 5520,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 5503,
									"end": 5520,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 5503,
									"end": 5520,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5548,
									"end": 5550,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 5540,
									"end": 5546,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 5537,
									"end": 5551,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 5565,
									"end": 5566,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "130"
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 6222,
									"end": 6223,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 6239,
									"end": 6245,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "131"
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 6288,
									"end": 6297,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 6283,
									"end": 6286,
									"name": "DUP8",
									"source": 12
								},
								{
									"begin": 6279,
									"end": 6298,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 6273,
									"end": 6299,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 6264,
									"end": 6299,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 6264,
									"end": 6299,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "tag",
									"source": 12,
									"value": "131"
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 6339,
									"end": 6406,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "132"
								},
								{
									"begin": 6399,
									"end": 6405,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 6392,
									"end": 6397,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 6339,
									"end": 6406,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "55"
								},
								{
									"begin": 6339,
									"end": 6406,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 6339,
									"end": 6406,
									"name": "tag",
									"source": 12,
									"value": "132"
								},
								{
									"begin": 6339,
									"end": 6406,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 6333,
									"end": 6337,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 6326,
									"end": 6407,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 6195,
									"end": 6417,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "129"
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "tag",
									"source": 12,
									"value": "130"
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5612,
									"end": 5616,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 5608,
									"end": 5617,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 5600,
									"end": 5606,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 5596,
									"end": 5618,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 5646,
									"end": 5683,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "133"
								},
								{
									"begin": 5678,
									"end": 5682,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 5646,
									"end": 5683,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 5646,
									"end": 5683,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 5646,
									"end": 5683,
									"name": "tag",
									"source": 12,
									"value": "133"
								},
								{
									"begin": 5646,
									"end": 5683,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5705,
									"end": 5706,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "tag",
									"source": 12,
									"value": "134"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5733,
									"end": 5740,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 5730,
									"end": 5731,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 5727,
									"end": 5741,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "136"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 5812,
									"end": 5821,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 5807,
									"end": 5810,
									"name": "DUP10",
									"source": 12
								},
								{
									"begin": 5803,
									"end": 5822,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 5797,
									"end": 5823,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 5789,
									"end": 5795,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 5782,
									"end": 5824,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 5863,
									"end": 5864,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 5855,
									"end": 5861,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 5851,
									"end": 5865,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 5841,
									"end": 5865,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 5841,
									"end": 5865,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5910,
									"end": 5912,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 5899,
									"end": 5908,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 5895,
									"end": 5913,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 5882,
									"end": 5913,
									"name": "SWAP5",
									"source": 12
								},
								{
									"begin": 5882,
									"end": 5913,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5756,
									"end": 5760,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 5753,
									"end": 5754,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 5749,
									"end": 5761,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 5744,
									"end": 5761,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 5744,
									"end": 5761,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "134"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "tag",
									"source": 12,
									"value": "136"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5955,
									"end": 5961,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 5946,
									"end": 5953,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 5943,
									"end": 5962,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "137"
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 6013,
									"end": 6022,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 6008,
									"end": 6011,
									"name": "DUP10",
									"source": 12
								},
								{
									"begin": 6004,
									"end": 6023,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 5998,
									"end": 6024,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 6056,
									"end": 6104,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "138"
								},
								{
									"begin": 6098,
									"end": 6102,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 6090,
									"end": 6096,
									"name": "DUP10",
									"source": 12
								},
								{
									"begin": 6086,
									"end": 6103,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 6075,
									"end": 6084,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 6056,
									"end": 6104,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "54"
								},
								{
									"begin": 6056,
									"end": 6104,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 6056,
									"end": 6104,
									"name": "tag",
									"source": 12,
									"value": "138"
								},
								{
									"begin": 6056,
									"end": 6104,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 6048,
									"end": 6054,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 6041,
									"end": 6105,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 5963,
									"end": 6119,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "tag",
									"source": 12,
									"value": "137"
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 6165,
									"end": 6166,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 6161,
									"end": 6162,
									"name": "PUSH",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 6153,
									"end": 6159,
									"name": "DUP9",
									"source": 12
								},
								{
									"begin": 6149,
									"end": 6163,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 6145,
									"end": 6167,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 6139,
									"end": 6143,
									"name": "DUP9",
									"source": 12
								},
								{
									"begin": 6132,
									"end": 6168,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 5567,
									"end": 6178,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5567,
									"end": 6178,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5567,
									"end": 6178,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "tag",
									"source": 12,
									"value": "129"
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5120,
									"end": 6423,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5120,
									"end": 6423,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5120,
									"end": 6423,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5028,
									"end": 6423,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5028,
									"end": 6423,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 5028,
									"end": 6423,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 6429,
									"end": 6527,
									"name": "tag",
									"source": 12,
									"value": "56"
								},
								{
									"begin": 6429,
									"end": 6527,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 6480,
									"end": 6486,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 6514,
									"end": 6519,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 6508,
									"end": 6520,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 6498,
									"end": 6520,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 6498,
									"end": 6520,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6429,
									"end": 6527,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 6429,
									"end": 6527,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 6429,
									"end": 6527,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6429,
									"end": 6527,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 6533,
									"end": 6680,
									"name": "tag",
									"source": 12,
									"value": "57"
								},
								{
									"begin": 6533,
									"end": 6680,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 6634,
									"end": 6645,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 6671,
									"end": 6674,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 6656,
									"end": 6674,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 6656,
									"end": 6674,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6533,
									"end": 6680,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 6533,
									"end": 6680,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 6533,
									"end": 6680,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6533,
									"end": 6680,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6533,
									"end": 6680,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 6686,
									"end": 6825,
									"name": "tag",
									"source": 12,
									"value": "58"
								},
								{
									"begin": 6686,
									"end": 6825,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 6775,
									"end": 6781,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 6770,
									"end": 6773,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 6765,
									"end": 6768,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 6759,
									"end": 6782,
									"name": "MCOPY",
									"source": 12
								},
								{
									"begin": 6816,
									"end": 6817,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 6807,
									"end": 6813,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 6802,
									"end": 6805,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 6798,
									"end": 6814,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 6791,
									"end": 6818,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 6686,
									"end": 6825,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6686,
									"end": 6825,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6686,
									"end": 6825,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6686,
									"end": 6825,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 6831,
									"end": 7217,
									"name": "tag",
									"source": 12,
									"value": "59"
								},
								{
									"begin": 6831,
									"end": 7217,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 6935,
									"end": 6938,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 6963,
									"end": 7001,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "143"
								},
								{
									"begin": 6995,
									"end": 7000,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 6963,
									"end": 7001,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "56"
								},
								{
									"begin": 6963,
									"end": 7001,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 6963,
									"end": 7001,
									"name": "tag",
									"source": 12,
									"value": "143"
								},
								{
									"begin": 6963,
									"end": 7001,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 7017,
									"end": 7105,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "144"
								},
								{
									"begin": 7098,
									"end": 7104,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 7093,
									"end": 7096,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 7017,
									"end": 7105,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "57"
								},
								{
									"begin": 7017,
									"end": 7105,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 7017,
									"end": 7105,
									"name": "tag",
									"source": 12,
									"value": "144"
								},
								{
									"begin": 7017,
									"end": 7105,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 7010,
									"end": 7105,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": 7010,
									"end": 7105,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 7114,
									"end": 7179,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "145"
								},
								{
									"begin": 7172,
									"end": 7178,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 7167,
									"end": 7170,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 7160,
									"end": 7164,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 7153,
									"end": 7158,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 7149,
									"end": 7165,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 7114,
									"end": 7179,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "58"
								},
								{
									"begin": 7114,
									"end": 7179,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 7114,
									"end": 7179,
									"name": "tag",
									"source": 12,
									"value": "145"
								},
								{
									"begin": 7114,
									"end": 7179,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 7204,
									"end": 7210,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 7199,
									"end": 7202,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 7195,
									"end": 7211,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 7188,
									"end": 7211,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 7188,
									"end": 7211,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6939,
									"end": 7217,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6831,
									"end": 7217,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 6831,
									"end": 7217,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 6831,
									"end": 7217,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6831,
									"end": 7217,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 6831,
									"end": 7217,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 7223,
									"end": 7494,
									"name": "tag",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 7223,
									"end": 7494,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 7353,
									"end": 7356,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 7375,
									"end": 7468,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "147"
								},
								{
									"begin": 7464,
									"end": 7467,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 7455,
									"end": 7461,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 7375,
									"end": 7468,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "59"
								},
								{
									"begin": 7375,
									"end": 7468,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 7375,
									"end": 7468,
									"name": "tag",
									"source": 12,
									"value": "147"
								},
								{
									"begin": 7375,
									"end": 7468,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 7368,
									"end": 7468,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 7368,
									"end": 7468,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 7485,
									"end": 7488,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 7478,
									"end": 7488,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 7478,
									"end": 7488,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 7223,
									"end": 7494,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 7223,
									"end": 7494,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 7223,
									"end": 7494,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 7223,
									"end": 7494,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 7223,
									"end": 7494,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 7500,
									"end": 7622,
									"name": "tag",
									"source": 12,
									"value": "60"
								},
								{
									"begin": 7500,
									"end": 7622,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 7573,
									"end": 7597,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "149"
								},
								{
									"begin": 7591,
									"end": 7596,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 7573,
									"end": 7597,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "44"
								},
								{
									"begin": 7573,
									"end": 7597,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 7573,
									"end": 7597,
									"name": "tag",
									"source": 12,
									"value": "149"
								},
								{
									"begin": 7573,
									"end": 7597,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 7566,
									"end": 7571,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 7563,
									"end": 7598,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 7553,
									"end": 7616,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "150"
								},
								{
									"begin": 7553,
									"end": 7616,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 7612,
									"end": 7613,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 7609,
									"end": 7610,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 7602,
									"end": 7614,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 7553,
									"end": 7616,
									"name": "tag",
									"source": 12,
									"value": "150"
								},
								{
									"begin": 7553,
									"end": 7616,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 7500,
									"end": 7622,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 7500,
									"end": 7622,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 7628,
									"end": 7771,
									"name": "tag",
									"source": 12,
									"value": "61"
								},
								{
									"begin": 7628,
									"end": 7771,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 7685,
									"end": 7690,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 7716,
									"end": 7722,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 7710,
									"end": 7723,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 7701,
									"end": 7723,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 7701,
									"end": 7723,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 7732,
									"end": 7765,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "152"
								},
								{
									"begin": 7759,
									"end": 7764,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 7732,
									"end": 7765,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "60"
								},
								{
									"begin": 7732,
									"end": 7765,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 7732,
									"end": 7765,
									"name": "tag",
									"source": 12,
									"value": "152"
								},
								{
									"begin": 7732,
									"end": 7765,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 7628,
									"end": 7771,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 7628,
									"end": 7771,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 7628,
									"end": 7771,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 7628,
									"end": 7771,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 7628,
									"end": 7771,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 7777,
									"end": 8128,
									"name": "tag",
									"source": 12,
									"value": "27"
								},
								{
									"begin": 7777,
									"end": 8128,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 7847,
									"end": 7853,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 7896,
									"end": 7898,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 7884,
									"end": 7893,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 7875,
									"end": 7882,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 7871,
									"end": 7894,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 7867,
									"end": 7899,
									"name": "SLT",
									"source": 12
								},
								{
									"begin": 7864,
									"end": 7983,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 7864,
									"end": 7983,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "154"
								},
								{
									"begin": 7864,
									"end": 7983,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 7902,
									"end": 7981,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "155"
								},
								{
									"begin": 7902,
									"end": 7981,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "30"
								},
								{
									"begin": 7902,
									"end": 7981,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 7902,
									"end": 7981,
									"name": "tag",
									"source": 12,
									"value": "155"
								},
								{
									"begin": 7902,
									"end": 7981,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 7864,
									"end": 7983,
									"name": "tag",
									"source": 12,
									"value": "154"
								},
								{
									"begin": 7864,
									"end": 7983,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 8022,
									"end": 8023,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 8047,
									"end": 8111,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "156"
								},
								{
									"begin": 8103,
									"end": 8110,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 8094,
									"end": 8100,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 8083,
									"end": 8092,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 8079,
									"end": 8101,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 8047,
									"end": 8111,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "61"
								},
								{
									"begin": 8047,
									"end": 8111,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 8047,
									"end": 8111,
									"name": "tag",
									"source": 12,
									"value": "156"
								},
								{
									"begin": 8047,
									"end": 8111,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 8037,
									"end": 8111,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 8037,
									"end": 8111,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 7993,
									"end": 8121,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 7777,
									"end": 8128,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 7777,
									"end": 8128,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 7777,
									"end": 8128,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 7777,
									"end": 8128,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 7777,
									"end": 8128,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "tag",
									"source": 11,
									"value": "17"
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "PUSH",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "PUSH",
									"source": 11,
									"value": "A0"
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "ASSIGNIMMUTABLE",
									"source": 11,
									"value": "924"
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "ASSIGNIMMUTABLE",
									"source": 11,
									"value": "922"
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 193,
									"end": 2835,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d59a5cd3265cb00800220248f085c73f2003b7373affba19a4b309537e087b0d64736f6c634300081a0033",
									".code": [
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "CALLVALUE",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "tag",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "SHR",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "92BDF9BA"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "BA087652"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "CE96CB77"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "CE96CB77"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "D905777E"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "DD62ED3E"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "EF8B30F7"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "29"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "tag",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "BA087652"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "C63D75B6"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "C6E6F592"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "tag",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "9D76EA58"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "9D76EA58"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "A9059CBB"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "B3D7F6B9"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "B460AF94"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "tag",
											"source": 11,
											"value": "33"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "92BDF9BA"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "94BF804D"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "95D89B41"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "tag",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "23B872DD"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "402D267D"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "35"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "402D267D"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "4CDAD506"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "13"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "6E553F65"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "70A08231"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "15"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "tag",
											"source": 11,
											"value": "35"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "23B872DD"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "9"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "313CE567"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "38D52E0F"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "tag",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "1E1D114"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "6FDDE03"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "7A2D13A"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "95EA7B3"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "A28A477"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "18160DDD"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "tag",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 193,
											"end": 2835,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "tag",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "36"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 5780,
											"end": 5896,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "tag",
											"source": 4,
											"value": "36"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 5780,
											"end": 5896,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "tag",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "tag",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "45"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 6152,
											"end": 6300,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "tag",
											"source": 4,
											"value": "45"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "47"
										},
										{
											"begin": 6152,
											"end": 6300,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "tag",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "48"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 6152,
											"end": 6300,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "tag",
											"source": 4,
											"value": "48"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 2,
											"value": "53"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "tag",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "55"
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "56"
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "46"
										},
										{
											"begin": 1667,
											"end": 2005,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "tag",
											"source": 11,
											"value": "56"
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "57"
										},
										{
											"begin": 1667,
											"end": 2005,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "tag",
											"source": 11,
											"value": "55"
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "58"
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "39"
										},
										{
											"begin": 1667,
											"end": 2005,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "tag",
											"source": 11,
											"value": "58"
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 3144,
											"end": 3241,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 3144,
											"end": 3241,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "tag",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 5441,
											"end": 5592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "tag",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "69"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "70"
										},
										{
											"begin": 5441,
											"end": 5592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "tag",
											"source": 4,
											"value": "69"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "tag",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "71"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "72"
										},
										{
											"begin": 5636,
											"end": 5730,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "tag",
											"source": 4,
											"value": "71"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "74"
										},
										{
											"begin": 5636,
											"end": 5730,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "tag",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "tag",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "75"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "76"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "77"
										},
										{
											"begin": 6349,
											"end": 6457,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "tag",
											"source": 4,
											"value": "76"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 6349,
											"end": 6457,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "tag",
											"source": 4,
											"value": "75"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "79"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 6349,
											"end": 6457,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "tag",
											"source": 4,
											"value": "79"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "tag",
											"source": 4,
											"value": "13"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 7617,
											"end": 7763,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "tag",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 7617,
											"end": 7763,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "tag",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "83"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 7617,
											"end": 7763,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "tag",
											"source": 4,
											"value": "83"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "tag",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "85"
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "86"
										},
										{
											"begin": 759,
											"end": 1046,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "tag",
											"source": 11,
											"value": "85"
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "87"
										},
										{
											"begin": 759,
											"end": 1046,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "tag",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "39"
										},
										{
											"begin": 759,
											"end": 1046,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "tag",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 279,
											"end": 330,
											"name": "tag",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 279,
											"end": 330,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "93"
										},
										{
											"begin": 279,
											"end": 330,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 279,
											"end": 330,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "94"
										},
										{
											"begin": 279,
											"end": 330,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "77"
										},
										{
											"begin": 279,
											"end": 330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "tag",
											"source": 11,
											"value": "94"
										},
										{
											"begin": 279,
											"end": 330,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "95"
										},
										{
											"begin": 279,
											"end": 330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "tag",
											"source": 11,
											"value": "93"
										},
										{
											"begin": 279,
											"end": 330,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 279,
											"end": 330,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "96"
										},
										{
											"begin": 279,
											"end": 330,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "39"
										},
										{
											"begin": 279,
											"end": 330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "tag",
											"source": 11,
											"value": "96"
										},
										{
											"begin": 279,
											"end": 330,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 279,
											"end": 330,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "tag",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "97"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "98"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "86"
										},
										{
											"begin": 8468,
											"end": 8848,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "tag",
											"source": 4,
											"value": "98"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "99"
										},
										{
											"begin": 8468,
											"end": 8848,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "tag",
											"source": 4,
											"value": "97"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 8468,
											"end": 8848,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "tag",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 337,
											"end": 364,
											"name": "tag",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 337,
											"end": 364,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "104"
										},
										{
											"begin": 337,
											"end": 364,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "105"
										},
										{
											"begin": 337,
											"end": 364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "tag",
											"source": 11,
											"value": "104"
										},
										{
											"begin": 337,
											"end": 364,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 337,
											"end": 364,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "106"
										},
										{
											"begin": 337,
											"end": 364,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "74"
										},
										{
											"begin": 337,
											"end": 364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "tag",
											"source": 11,
											"value": "106"
										},
										{
											"begin": 337,
											"end": 364,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 337,
											"end": 364,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "tag",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 7221,
											"end": 7364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "tag",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 7221,
											"end": 7364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "tag",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "114"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 7221,
											"end": 7364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "tag",
											"source": 4,
											"value": "114"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "tag",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "115"
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "116"
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "117"
										},
										{
											"begin": 1114,
											"end": 1590,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "tag",
											"source": 11,
											"value": "116"
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "118"
										},
										{
											"begin": 1114,
											"end": 1590,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "tag",
											"source": 11,
											"value": "115"
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "119"
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "39"
										},
										{
											"begin": 1114,
											"end": 1590,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "tag",
											"source": 11,
											"value": "119"
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "tag",
											"source": 4,
											"value": "23"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "120"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "121"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 9353,
											"end": 9758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "tag",
											"source": 4,
											"value": "121"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 9353,
											"end": 9758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "tag",
											"source": 4,
											"value": "120"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 9353,
											"end": 9758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "tag",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "tag",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "124"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "125"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "77"
										},
										{
											"begin": 6503,
											"end": 6608,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "tag",
											"source": 4,
											"value": "125"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 6503,
											"end": 6608,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "tag",
											"source": 4,
											"value": "124"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 6503,
											"end": 6608,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "tag",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "tag",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "129"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 5950,
											"end": 6098,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "tag",
											"source": 4,
											"value": "129"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "130"
										},
										{
											"begin": 5950,
											"end": 6098,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "tag",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 5950,
											"end": 6098,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "tag",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "tag",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "132"
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "133"
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "77"
										},
										{
											"begin": 2504,
											"end": 2833,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "tag",
											"source": 11,
											"value": "133"
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "134"
										},
										{
											"begin": 2504,
											"end": 2833,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "tag",
											"source": 11,
											"value": "132"
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "135"
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "39"
										},
										{
											"begin": 2504,
											"end": 2833,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "tag",
											"source": 11,
											"value": "135"
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "RETURN",
											"source": 11
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "tag",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "77"
										},
										{
											"begin": 6859,
											"end": 6971,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "tag",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "138"
										},
										{
											"begin": 6859,
											"end": 6971,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "tag",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "139"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 6859,
											"end": 6971,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "tag",
											"source": 4,
											"value": "139"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "142"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "tag",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "145"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "146"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 7024,
											"end": 7171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "tag",
											"source": 4,
											"value": "146"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "147"
										},
										{
											"begin": 7024,
											"end": 7171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "tag",
											"source": 4,
											"value": "145"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "148"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 7024,
											"end": 7171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "tag",
											"source": 4,
											"value": "148"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "tag",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5832,
											"end": 5839,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5858,
											"end": 5864,
											"name": "PUSHIMMUTABLE",
											"source": 4,
											"value": "922"
										},
										{
											"begin": 5858,
											"end": 5874,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5858,
											"end": 5874,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5874,
											"name": "PUSH",
											"source": 4,
											"value": "70A08231"
										},
										{
											"begin": 5883,
											"end": 5887,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "150"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "74"
										},
										{
											"begin": 5858,
											"end": 5889,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "tag",
											"source": 4,
											"value": "150"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "STATICCALL",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "152"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "tag",
											"source": 4,
											"value": "152"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "153"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "154"
										},
										{
											"begin": 5858,
											"end": 5889,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "tag",
											"source": 4,
											"value": "153"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5851,
											"end": 5889,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5851,
											"end": 5889,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5896,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2119,
											"end": 2132,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2151,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "tag",
											"source": 4,
											"value": "47"
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6222,
											"end": 6229,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "163"
										},
										{
											"begin": 6265,
											"end": 6271,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6273,
											"end": 6292,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6248,
											"end": 6264,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "164"
										},
										{
											"begin": 6248,
											"end": 6293,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "tag",
											"source": 4,
											"value": "163"
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6241,
											"end": 6293,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6241,
											"end": 6293,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6152,
											"end": 6300,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4366,
											"end": 4370,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4382,
											"end": 4395,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4398,
											"end": 4410,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "166"
										},
										{
											"begin": 4398,
											"end": 4408,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "167"
										},
										{
											"begin": 4398,
											"end": 4410,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4398,
											"end": 4410,
											"name": "tag",
											"source": 2,
											"value": "166"
										},
										{
											"begin": 4398,
											"end": 4410,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4382,
											"end": 4410,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4382,
											"end": 4410,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "168"
										},
										{
											"begin": 4429,
											"end": 4434,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4436,
											"end": 4443,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4445,
											"end": 4450,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4420,
											"end": 4428,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 4420,
											"end": 4451,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "tag",
											"source": 2,
											"value": "168"
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4468,
											"end": 4472,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "tag",
											"source": 11,
											"value": "57"
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1738,
											"end": 1745,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1757,
											"end": 1780,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1783,
											"end": 1812,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "171"
										},
										{
											"begin": 1805,
											"end": 1811,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1783,
											"end": 1804,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "172"
										},
										{
											"begin": 1783,
											"end": 1812,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1783,
											"end": 1812,
											"name": "tag",
											"source": 11,
											"value": "171"
										},
										{
											"begin": 1783,
											"end": 1812,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1757,
											"end": 1812,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1757,
											"end": 1812,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1822,
											"end": 1842,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1845,
											"end": 1861,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 1845,
											"end": 1873,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1862,
											"end": 1872,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": 1845,
											"end": 1873,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1845,
											"end": 1873,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1845,
											"end": 1873,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1845,
											"end": 1873,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1845,
											"end": 1873,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1845,
											"end": 1873,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1845,
											"end": 1873,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1845,
											"end": 1873,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1845,
											"end": 1873,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1845,
											"end": 1873,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1845,
											"end": 1873,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1845,
											"end": 1873,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1845,
											"end": 1873,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1845,
											"end": 1873,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1845,
											"end": 1873,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 1845,
											"end": 1873,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1822,
											"end": 1873,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1822,
											"end": 1873,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1905,
											"end": 1917,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1887,
											"end": 1902,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1887,
											"end": 1917,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 1883,
											"end": 1981,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1883,
											"end": 1981,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "173"
										},
										{
											"begin": 1883,
											"end": 1981,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1958,
											"end": 1970,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1940,
											"end": 1955,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1940,
											"end": 1970,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "174"
										},
										{
											"begin": 1940,
											"end": 1970,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1940,
											"end": 1970,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1940,
											"end": 1970,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "175"
										},
										{
											"begin": 1940,
											"end": 1970,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1940,
											"end": 1970,
											"name": "tag",
											"source": 11,
											"value": "174"
										},
										{
											"begin": 1940,
											"end": 1970,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1933,
											"end": 1970,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1933,
											"end": 1970,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1933,
											"end": 1970,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1933,
											"end": 1970,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1933,
											"end": 1970,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "170"
										},
										{
											"begin": 1933,
											"end": 1970,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1883,
											"end": 1981,
											"name": "tag",
											"source": 11,
											"value": "173"
										},
										{
											"begin": 1883,
											"end": 1981,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1997,
											"end": 1998,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1990,
											"end": 1998,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 1998,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 1998,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 1998,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "tag",
											"source": 11,
											"value": "170"
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1667,
											"end": 2005,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3196,
											"end": 3203,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3215,
											"end": 3234,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3215,
											"end": 3234,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3144,
											"end": 3241,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5126,
											"end": 5130,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5142,
											"end": 5157,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5160,
											"end": 5172,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "178"
										},
										{
											"begin": 5160,
											"end": 5170,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "167"
										},
										{
											"begin": 5160,
											"end": 5172,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5160,
											"end": 5172,
											"name": "tag",
											"source": 2,
											"value": "178"
										},
										{
											"begin": 5160,
											"end": 5172,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5142,
											"end": 5172,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5142,
											"end": 5172,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 5198,
											"end": 5202,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5204,
											"end": 5211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5213,
											"end": 5218,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5182,
											"end": 5197,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 5182,
											"end": 5219,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "tag",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "181"
										},
										{
											"begin": 5239,
											"end": 5243,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5245,
											"end": 5247,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5249,
											"end": 5254,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5229,
											"end": 5238,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "182"
										},
										{
											"begin": 5229,
											"end": 5255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "tag",
											"source": 2,
											"value": "181"
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5272,
											"end": 5276,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5265,
											"end": 5276,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5265,
											"end": 5276,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5265,
											"end": 5276,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "tag",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5522,
											"end": 5527,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5568,
											"end": 5585,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "184"
										},
										{
											"begin": 5568,
											"end": 5583,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "185"
										},
										{
											"begin": 5568,
											"end": 5585,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5568,
											"end": 5585,
											"name": "tag",
											"source": 4,
											"value": "184"
										},
										{
											"begin": 5568,
											"end": 5585,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5546,
											"end": 5565,
											"name": "PUSHIMMUTABLE",
											"source": 4,
											"value": "924"
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "186"
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "187"
										},
										{
											"begin": 5546,
											"end": 5585,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "tag",
											"source": 4,
											"value": "186"
										},
										{
											"begin": 5546,
											"end": 5585,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5539,
											"end": 5585,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5539,
											"end": 5585,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5441,
											"end": 5592,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5441,
											"end": 5592,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "tag",
											"source": 4,
											"value": "72"
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5682,
											"end": 5689,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5716,
											"end": 5722,
											"name": "PUSHIMMUTABLE",
											"source": 4,
											"value": "922"
										},
										{
											"begin": 5701,
											"end": 5723,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5701,
											"end": 5723,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5636,
											"end": 5730,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5636,
											"end": 5730,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "tag",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6407,
											"end": 6414,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6433,
											"end": 6450,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6426,
											"end": 6450,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6426,
											"end": 6450,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6349,
											"end": 6457,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "tag",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7685,
											"end": 7692,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7711,
											"end": 7756,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "191"
										},
										{
											"begin": 7728,
											"end": 7734,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7736,
											"end": 7755,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7711,
											"end": 7727,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "164"
										},
										{
											"begin": 7711,
											"end": 7756,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7711,
											"end": 7756,
											"name": "tag",
											"source": 4,
											"value": "191"
										},
										{
											"begin": 7711,
											"end": 7756,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7704,
											"end": 7756,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7704,
											"end": 7756,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7617,
											"end": 7763,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "tag",
											"source": 11,
											"value": "87"
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 835,
											"end": 842,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 854,
											"end": 868,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 871,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "193"
										},
										{
											"begin": 885,
											"end": 891,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 893,
											"end": 901,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 871,
											"end": 884,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "194"
										},
										{
											"begin": 871,
											"end": 902,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 871,
											"end": 902,
											"name": "tag",
											"source": 11,
											"value": "193"
										},
										{
											"begin": 871,
											"end": 902,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 854,
											"end": 902,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 854,
											"end": 902,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 942,
											"end": 948,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 912,
											"end": 928,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 912,
											"end": 938,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 937,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 912,
											"end": 938,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 938,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 912,
											"end": 938,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 938,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 912,
											"end": 938,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 912,
											"end": 938,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 912,
											"end": 938,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 938,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 912,
											"end": 938,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 912,
											"end": 938,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 912,
											"end": 938,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 912,
											"end": 938,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 938,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 912,
											"end": 938,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 938,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 912,
											"end": 938,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 948,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 912,
											"end": 948,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 912,
											"end": 948,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 912,
											"end": 948,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 912,
											"end": 948,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 912,
											"end": 948,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 912,
											"end": 948,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "196"
										},
										{
											"begin": 912,
											"end": 948,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 912,
											"end": 948,
											"name": "tag",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 912,
											"end": 948,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 912,
											"end": 948,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 912,
											"end": 948,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 912,
											"end": 948,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 912,
											"end": 948,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 912,
											"end": 948,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 912,
											"end": 948,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 912,
											"end": 948,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 999,
											"end": 1007,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "PUSH",
											"source": 11,
											"value": "2251F6A4ED7FE619E9E8CE557D05A63DD484284F9C95C9AB334F6A7707CD0800"
										},
										{
											"begin": 1009,
											"end": 1015,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "39"
										},
										{
											"begin": 982,
											"end": 1016,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "tag",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 982,
											"end": 1016,
											"name": "LOG2",
											"source": 11
										},
										{
											"begin": 1033,
											"end": 1039,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1026,
											"end": 1039,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1026,
											"end": 1039,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1026,
											"end": 1039,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1046,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3364,
											"end": 3371,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3400,
											"end": 3407,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 279,
											"end": 330,
											"name": "tag",
											"source": 11,
											"value": "95"
										},
										{
											"begin": 279,
											"end": 330,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 279,
											"end": 330,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 279,
											"end": 330,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 279,
											"end": 330,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 279,
											"end": 330,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 279,
											"end": 330,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 279,
											"end": 330,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 279,
											"end": 330,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "tag",
											"source": 4,
											"value": "99"
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8540,
											"end": 8547,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8559,
											"end": 8576,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8579,
											"end": 8596,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "200"
										},
										{
											"begin": 8587,
											"end": 8595,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8579,
											"end": 8586,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 8579,
											"end": 8596,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8579,
											"end": 8596,
											"name": "tag",
											"source": 4,
											"value": "200"
										},
										{
											"begin": 8579,
											"end": 8596,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8559,
											"end": 8596,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8559,
											"end": 8596,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8619,
											"end": 8628,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8610,
											"end": 8616,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8610,
											"end": 8628,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 8606,
											"end": 8713,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8606,
											"end": 8713,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "201"
										},
										{
											"begin": 8606,
											"end": 8713,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8674,
											"end": 8682,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8684,
											"end": 8690,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8692,
											"end": 8701,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "PUSH",
											"source": 4,
											"value": "284FF66700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "202"
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "203"
										},
										{
											"begin": 8651,
											"end": 8702,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "tag",
											"source": 4,
											"value": "202"
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8651,
											"end": 8702,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 8606,
											"end": 8713,
											"name": "tag",
											"source": 4,
											"value": "201"
										},
										{
											"begin": 8606,
											"end": 8713,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8723,
											"end": 8737,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8740,
											"end": 8759,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "204"
										},
										{
											"begin": 8752,
											"end": 8758,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 8740,
											"end": 8751,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 8740,
											"end": 8759,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8740,
											"end": 8759,
											"name": "tag",
											"source": 4,
											"value": "204"
										},
										{
											"begin": 8740,
											"end": 8759,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8723,
											"end": 8759,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8723,
											"end": 8759,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8769,
											"end": 8817,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "205"
										},
										{
											"begin": 8778,
											"end": 8790,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "206"
										},
										{
											"begin": 8778,
											"end": 8788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "167"
										},
										{
											"begin": 8778,
											"end": 8790,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8778,
											"end": 8790,
											"name": "tag",
											"source": 4,
											"value": "206"
										},
										{
											"begin": 8778,
											"end": 8790,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8792,
											"end": 8800,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 8802,
											"end": 8808,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8810,
											"end": 8816,
											"name": "DUP9",
											"source": 4
										},
										{
											"begin": 8769,
											"end": 8777,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "207"
										},
										{
											"begin": 8769,
											"end": 8817,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8769,
											"end": 8817,
											"name": "tag",
											"source": 4,
											"value": "205"
										},
										{
											"begin": 8769,
											"end": 8817,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8835,
											"end": 8841,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8828,
											"end": 8841,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 8828,
											"end": 8841,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8828,
											"end": 8841,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8828,
											"end": 8841,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8468,
											"end": 8848,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2323,
											"end": 2336,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2355,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "209"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 2348,
											"end": 2362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 2,
											"value": "209"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 2348,
											"end": 2362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "212"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 2,
											"value": "212"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 2,
											"value": "213"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "213"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 337,
											"end": 364,
											"name": "tag",
											"source": 11,
											"value": "105"
										},
										{
											"begin": 337,
											"end": 364,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "PUSH",
											"source": 11,
											"value": "6"
										},
										{
											"begin": 337,
											"end": 364,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 337,
											"end": 364,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 337,
											"end": 364,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 337,
											"end": 364,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 337,
											"end": 364,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3679,
											"end": 3683,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3695,
											"end": 3708,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3711,
											"end": 3723,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "215"
										},
										{
											"begin": 3711,
											"end": 3721,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "167"
										},
										{
											"begin": 3711,
											"end": 3723,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3711,
											"end": 3723,
											"name": "tag",
											"source": 2,
											"value": "215"
										},
										{
											"begin": 3711,
											"end": 3723,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3695,
											"end": 3723,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3695,
											"end": 3723,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "216"
										},
										{
											"begin": 3743,
											"end": 3748,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3750,
											"end": 3752,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3754,
											"end": 3759,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3733,
											"end": 3742,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "182"
										},
										{
											"begin": 3733,
											"end": 3760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "tag",
											"source": 2,
											"value": "216"
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3777,
											"end": 3781,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3770,
											"end": 3781,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3770,
											"end": 3781,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3770,
											"end": 3781,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "tag",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7287,
											"end": 7294,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7313,
											"end": 7357,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "218"
										},
										{
											"begin": 7330,
											"end": 7336,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7338,
											"end": 7356,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 7313,
											"end": 7329,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "164"
										},
										{
											"begin": 7313,
											"end": 7357,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7313,
											"end": 7357,
											"name": "tag",
											"source": 4,
											"value": "218"
										},
										{
											"begin": 7313,
											"end": 7357,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7306,
											"end": 7357,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7306,
											"end": 7357,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7221,
											"end": 7364,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "tag",
											"source": 11,
											"value": "118"
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1206,
											"end": 1213,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1243,
											"end": 1261,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "220"
										},
										{
											"begin": 1255,
											"end": 1260,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1243,
											"end": 1254,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "134"
										},
										{
											"begin": 1243,
											"end": 1261,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1243,
											"end": 1261,
											"name": "tag",
											"source": 11,
											"value": "220"
										},
										{
											"begin": 1243,
											"end": 1261,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1233,
											"end": 1239,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1233,
											"end": 1261,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 1233,
											"end": 1261,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "221"
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "PUSH",
											"source": 11,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "222"
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "223"
										},
										{
											"begin": 1225,
											"end": 1293,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "tag",
											"source": 11,
											"value": "222"
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "tag",
											"source": 11,
											"value": "221"
										},
										{
											"begin": 1225,
											"end": 1293,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1321,
											"end": 1337,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 1321,
											"end": 1344,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1338,
											"end": 1343,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1321,
											"end": 1344,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1321,
											"end": 1344,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1321,
											"end": 1344,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1321,
											"end": 1344,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1321,
											"end": 1344,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1321,
											"end": 1344,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1321,
											"end": 1344,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1321,
											"end": 1344,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1321,
											"end": 1344,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1321,
											"end": 1344,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1321,
											"end": 1344,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1321,
											"end": 1344,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1321,
											"end": 1344,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1321,
											"end": 1344,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1321,
											"end": 1344,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 1321,
											"end": 1344,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1311,
											"end": 1317,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1311,
											"end": 1344,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 1311,
											"end": 1344,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "224"
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "PUSH",
											"source": 11,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "225"
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "226"
										},
										{
											"begin": 1303,
											"end": 1382,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "tag",
											"source": 11,
											"value": "225"
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "tag",
											"source": 11,
											"value": "224"
										},
										{
											"begin": 1303,
											"end": 1382,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1392,
											"end": 1406,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1409,
											"end": 1448,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "227"
										},
										{
											"begin": 1424,
											"end": 1430,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1440,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1442,
											"end": 1447,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1409,
											"end": 1423,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "228"
										},
										{
											"begin": 1409,
											"end": 1448,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1409,
											"end": 1448,
											"name": "tag",
											"source": 11,
											"value": "227"
										},
										{
											"begin": 1409,
											"end": 1448,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1392,
											"end": 1448,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1392,
											"end": 1448,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1485,
											"end": 1491,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1474,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 1458,
											"end": 1481,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1475,
											"end": 1480,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1481,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1458,
											"end": 1481,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1481,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1458,
											"end": 1481,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1481,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1481,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1481,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1458,
											"end": 1481,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1481,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1481,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1481,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1481,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1458,
											"end": 1481,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1481,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1458,
											"end": 1481,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1481,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1458,
											"end": 1491,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1491,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1491,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1491,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "229"
										},
										{
											"begin": 1458,
											"end": 1491,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1491,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1491,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "175"
										},
										{
											"begin": 1458,
											"end": 1491,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1491,
											"name": "tag",
											"source": 11,
											"value": "229"
										},
										{
											"begin": 1458,
											"end": 1491,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1491,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1491,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1491,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1491,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1491,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1491,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 1458,
											"end": 1491,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1546,
											"end": 1551,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "PUSH",
											"source": 11,
											"value": "B4EAF47ECD4BC76248F192433E8067C96CB3E17ACED42FBC47A512742FB74216"
										},
										{
											"begin": 1553,
											"end": 1559,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "230"
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "39"
										},
										{
											"begin": 1527,
											"end": 1560,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "tag",
											"source": 11,
											"value": "230"
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1527,
											"end": 1560,
											"name": "LOG2",
											"source": 11
										},
										{
											"begin": 1577,
											"end": 1583,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1570,
											"end": 1583,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1570,
											"end": 1583,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1570,
											"end": 1583,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1590,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "tag",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9442,
											"end": 9449,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 9461,
											"end": 9478,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9481,
											"end": 9497,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "232"
										},
										{
											"begin": 9491,
											"end": 9496,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 9481,
											"end": 9490,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "138"
										},
										{
											"begin": 9481,
											"end": 9497,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9481,
											"end": 9497,
											"name": "tag",
											"source": 4,
											"value": "232"
										},
										{
											"begin": 9481,
											"end": 9497,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9461,
											"end": 9497,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9461,
											"end": 9497,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9520,
											"end": 9529,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9511,
											"end": 9517,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 9511,
											"end": 9529,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "233"
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 9577,
											"end": 9582,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 9584,
											"end": 9590,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 9592,
											"end": 9601,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH",
											"source": 4,
											"value": "B94ABEEC00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "234"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "203"
										},
										{
											"begin": 9552,
											"end": 9602,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "tag",
											"source": 4,
											"value": "234"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "tag",
											"source": 4,
											"value": "233"
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9623,
											"end": 9637,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 9640,
											"end": 9661,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "235"
										},
										{
											"begin": 9654,
											"end": 9660,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 9640,
											"end": 9653,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 9640,
											"end": 9661,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9640,
											"end": 9661,
											"name": "tag",
											"source": 4,
											"value": "235"
										},
										{
											"begin": 9640,
											"end": 9661,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9623,
											"end": 9661,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9623,
											"end": 9661,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9671,
											"end": 9727,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "236"
										},
										{
											"begin": 9681,
											"end": 9693,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "237"
										},
										{
											"begin": 9681,
											"end": 9691,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "167"
										},
										{
											"begin": 9681,
											"end": 9693,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9681,
											"end": 9693,
											"name": "tag",
											"source": 4,
											"value": "237"
										},
										{
											"begin": 9681,
											"end": 9693,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9695,
											"end": 9703,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 9705,
											"end": 9710,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 9712,
											"end": 9718,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 9720,
											"end": 9726,
											"name": "DUP11",
											"source": 4
										},
										{
											"begin": 9671,
											"end": 9680,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "238"
										},
										{
											"begin": 9671,
											"end": 9727,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9671,
											"end": 9727,
											"name": "tag",
											"source": 4,
											"value": "236"
										},
										{
											"begin": 9671,
											"end": 9727,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9745,
											"end": 9751,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9738,
											"end": 9751,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 9738,
											"end": 9751,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9738,
											"end": 9751,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9738,
											"end": 9751,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9353,
											"end": 9758,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "tag",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6558,
											"end": 6565,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6584,
											"end": 6601,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6577,
											"end": 6601,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6577,
											"end": 6601,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6503,
											"end": 6608,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "tag",
											"source": 4,
											"value": "130"
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6020,
											"end": 6027,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "241"
										},
										{
											"begin": 6063,
											"end": 6069,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6071,
											"end": 6090,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6046,
											"end": 6062,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "242"
										},
										{
											"begin": 6046,
											"end": 6091,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "tag",
											"source": 4,
											"value": "241"
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6039,
											"end": 6091,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6039,
											"end": 6091,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5950,
											"end": 6098,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "tag",
											"source": 11,
											"value": "134"
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2570,
											"end": 2577,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2589,
											"end": 2614,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2617,
											"end": 2641,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "244"
										},
										{
											"begin": 2635,
											"end": 2640,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2617,
											"end": 2634,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "245"
										},
										{
											"begin": 2617,
											"end": 2641,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2617,
											"end": 2641,
											"name": "tag",
											"source": 11,
											"value": "244"
										},
										{
											"begin": 2617,
											"end": 2641,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2589,
											"end": 2641,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2589,
											"end": 2641,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2651,
											"end": 2671,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2674,
											"end": 2690,
											"name": "PUSH",
											"source": 11,
											"value": "5"
										},
										{
											"begin": 2674,
											"end": 2697,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2691,
											"end": 2696,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2697,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2674,
											"end": 2697,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2697,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2674,
											"end": 2697,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2697,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2697,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2697,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2674,
											"end": 2697,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2697,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2697,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2697,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2697,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2674,
											"end": 2697,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2697,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2674,
											"end": 2697,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 2674,
											"end": 2697,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 2651,
											"end": 2697,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2651,
											"end": 2697,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2731,
											"end": 2743,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2711,
											"end": 2728,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2711,
											"end": 2743,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 2707,
											"end": 2809,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2707,
											"end": 2809,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "246"
										},
										{
											"begin": 2707,
											"end": 2809,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2786,
											"end": 2798,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2766,
											"end": 2783,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2766,
											"end": 2798,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "247"
										},
										{
											"begin": 2766,
											"end": 2798,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2766,
											"end": 2798,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2766,
											"end": 2798,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "175"
										},
										{
											"begin": 2766,
											"end": 2798,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2766,
											"end": 2798,
											"name": "tag",
											"source": 11,
											"value": "247"
										},
										{
											"begin": 2766,
											"end": 2798,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2759,
											"end": 2798,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2759,
											"end": 2798,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2759,
											"end": 2798,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2759,
											"end": 2798,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2759,
											"end": 2798,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "243"
										},
										{
											"begin": 2759,
											"end": 2798,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2707,
											"end": 2809,
											"name": "tag",
											"source": 11,
											"value": "246"
										},
										{
											"begin": 2707,
											"end": 2809,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2825,
											"end": 2826,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2818,
											"end": 2826,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2818,
											"end": 2826,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2818,
											"end": 2826,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2818,
											"end": 2826,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "tag",
											"source": 11,
											"value": "243"
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2504,
											"end": 2833,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "tag",
											"source": 4,
											"value": "138"
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6922,
											"end": 6929,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6948,
											"end": 6964,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "249"
										},
										{
											"begin": 6958,
											"end": 6963,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6948,
											"end": 6957,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 6948,
											"end": 6964,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6948,
											"end": 6964,
											"name": "tag",
											"source": 4,
											"value": "249"
										},
										{
											"begin": 6948,
											"end": 6964,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6941,
											"end": 6964,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6941,
											"end": 6964,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6859,
											"end": 6971,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3926,
											"end": 3933,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3963,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3964,
											"end": 3969,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3971,
											"end": 3978,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3945,
											"end": 3979,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3945,
											"end": 3979,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "tag",
											"source": 4,
											"value": "147"
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7093,
											"end": 7100,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7119,
											"end": 7164,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "252"
										},
										{
											"begin": 7136,
											"end": 7142,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7144,
											"end": 7163,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7119,
											"end": 7135,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "242"
										},
										{
											"begin": 7119,
											"end": 7164,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7119,
											"end": 7164,
											"name": "tag",
											"source": 4,
											"value": "252"
										},
										{
											"begin": 7119,
											"end": 7164,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7112,
											"end": 7164,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7112,
											"end": 7164,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7171,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "tag",
											"source": 4,
											"value": "164"
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10316,
											"end": 10323,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "254"
										},
										{
											"begin": 10372,
											"end": 10373,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 10356,
											"end": 10369,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "255"
										},
										{
											"begin": 10356,
											"end": 10367,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 10356,
											"end": 10369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10356,
											"end": 10369,
											"name": "tag",
											"source": 4,
											"value": "255"
										},
										{
											"begin": 10356,
											"end": 10369,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "256"
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "196"
										},
										{
											"begin": 10356,
											"end": 10373,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "tag",
											"source": 4,
											"value": "256"
										},
										{
											"begin": 10356,
											"end": 10373,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10397,
											"end": 10414,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "257"
										},
										{
											"begin": 10397,
											"end": 10412,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "185"
										},
										{
											"begin": 10397,
											"end": 10414,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10397,
											"end": 10414,
											"name": "tag",
											"source": 4,
											"value": "257"
										},
										{
											"begin": 10397,
											"end": 10414,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10391,
											"end": 10393,
											"name": "PUSH",
											"source": 4,
											"value": "A"
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "258"
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "259"
										},
										{
											"begin": 10391,
											"end": 10414,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "tag",
											"source": 4,
											"value": "258"
										},
										{
											"begin": 10391,
											"end": 10414,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10375,
											"end": 10388,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "260"
										},
										{
											"begin": 10375,
											"end": 10386,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 10375,
											"end": 10388,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10375,
											"end": 10388,
											"name": "tag",
											"source": 4,
											"value": "260"
										},
										{
											"begin": 10375,
											"end": 10388,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "261"
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "196"
										},
										{
											"begin": 10375,
											"end": 10414,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "tag",
											"source": 4,
											"value": "261"
										},
										{
											"begin": 10375,
											"end": 10414,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10416,
											"end": 10424,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 10342,
											"end": 10348,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 10342,
											"end": 10355,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "262"
										},
										{
											"begin": 10342,
											"end": 10355,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFF"
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10342,
											"end": 10425,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "tag",
											"source": 4,
											"value": "254"
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10335,
											"end": 10425,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10335,
											"end": 10425,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10219,
											"end": 10432,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 656,
											"end": 752,
											"name": "tag",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 656,
											"end": 752,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 709,
											"end": 716,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 728,
											"end": 745,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 728,
											"end": 745,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 656,
											"end": 752,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 656,
											"end": 752,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "tag",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "265"
										},
										{
											"begin": 9082,
											"end": 9087,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9089,
											"end": 9096,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9098,
											"end": 9103,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9105,
											"end": 9109,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 9073,
											"end": 9081,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "266"
										},
										{
											"begin": 9073,
											"end": 9110,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "tag",
											"source": 2,
											"value": "265"
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8989,
											"end": 9117,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "tag",
											"source": 4,
											"value": "172"
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7488,
											"end": 7495,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "268"
										},
										{
											"begin": 7531,
											"end": 7537,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7539,
											"end": 7557,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 7514,
											"end": 7530,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "242"
										},
										{
											"begin": 7514,
											"end": 7558,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "tag",
											"source": 4,
											"value": "268"
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7507,
											"end": 7558,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7507,
											"end": 7558,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7418,
											"end": 7565,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7418,
											"end": 7565,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "tag",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10762,
											"end": 10786,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10789,
											"end": 10814,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "270"
										},
										{
											"begin": 10799,
											"end": 10804,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10806,
											"end": 10813,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10789,
											"end": 10798,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 10789,
											"end": 10814,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10789,
											"end": 10814,
											"name": "tag",
											"source": 2,
											"value": "270"
										},
										{
											"begin": 10789,
											"end": 10814,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10762,
											"end": 10814,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10762,
											"end": 10814,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10848,
											"end": 10865,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10828,
											"end": 10844,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10828,
											"end": 10865,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "271"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10904,
											"end": 10909,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10885,
											"end": 10901,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10885,
											"end": 10909,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "272"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10963,
											"end": 10970,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10972,
											"end": 10988,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10990,
											"end": 10995,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 2,
											"value": "FB8F41B200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "273"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "203"
										},
										{
											"begin": 10936,
											"end": 10996,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "tag",
											"source": 2,
											"value": "273"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "tag",
											"source": 2,
											"value": "272"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "274"
										},
										{
											"begin": 11061,
											"end": 11066,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11068,
											"end": 11075,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11096,
											"end": 11101,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11077,
											"end": 11093,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11077,
											"end": 11101,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11103,
											"end": 11108,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11052,
											"end": 11060,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "266"
										},
										{
											"begin": 11052,
											"end": 11109,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "tag",
											"source": 2,
											"value": "274"
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "tag",
											"source": 2,
											"value": "271"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10752,
											"end": 11140,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10663,
											"end": 11140,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "tag",
											"source": 2,
											"value": "182"
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5755,
											"end": 5756,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5739,
											"end": 5743,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "276"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5807,
											"end": 5808,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 2,
											"value": "96C6FD1E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "277"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 5780,
											"end": 5810,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "tag",
											"source": 2,
											"value": "277"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "tag",
											"source": 2,
											"value": "276"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5848,
											"end": 5849,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5834,
											"end": 5836,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "278"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5902,
											"end": 5903,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 2,
											"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "279"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 5873,
											"end": 5905,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "tag",
											"source": 2,
											"value": "279"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "tag",
											"source": 2,
											"value": "278"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "280"
										},
										{
											"begin": 5933,
											"end": 5937,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5939,
											"end": 5941,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5943,
											"end": 5948,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5925,
											"end": 5932,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "281"
										},
										{
											"begin": 5925,
											"end": 5949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "tag",
											"source": 2,
											"value": "280"
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5656,
											"end": 5956,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12313,
											"end": 12403,
											"name": "tag",
											"source": 4,
											"value": "185"
										},
										{
											"begin": 12313,
											"end": 12403,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 12371,
											"end": 12376,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 12313,
											"end": 12403,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 12313,
											"end": 12403,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "tag",
											"source": 4,
											"value": "194"
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7884,
											"end": 7891,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7903,
											"end": 7920,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7923,
											"end": 7943,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "284"
										},
										{
											"begin": 7934,
											"end": 7942,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7923,
											"end": 7933,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 7923,
											"end": 7943,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7923,
											"end": 7943,
											"name": "tag",
											"source": 4,
											"value": "284"
										},
										{
											"begin": 7923,
											"end": 7943,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7903,
											"end": 7943,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7903,
											"end": 7943,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7966,
											"end": 7975,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7957,
											"end": 7963,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 7957,
											"end": 7975,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 7953,
											"end": 8063,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7953,
											"end": 8063,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "285"
										},
										{
											"begin": 7953,
											"end": 8063,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8024,
											"end": 8032,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8034,
											"end": 8040,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8042,
											"end": 8051,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "PUSH",
											"source": 4,
											"value": "79012FB200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "286"
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "203"
										},
										{
											"begin": 7998,
											"end": 8052,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "tag",
											"source": 4,
											"value": "286"
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7998,
											"end": 8052,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 7953,
											"end": 8063,
											"name": "tag",
											"source": 4,
											"value": "285"
										},
										{
											"begin": 7953,
											"end": 8063,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8073,
											"end": 8087,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8090,
											"end": 8112,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "287"
										},
										{
											"begin": 8105,
											"end": 8111,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 8090,
											"end": 8104,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "147"
										},
										{
											"begin": 8090,
											"end": 8112,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8090,
											"end": 8112,
											"name": "tag",
											"source": 4,
											"value": "287"
										},
										{
											"begin": 8090,
											"end": 8112,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8073,
											"end": 8112,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8073,
											"end": 8112,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8122,
											"end": 8170,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "288"
										},
										{
											"begin": 8131,
											"end": 8143,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "289"
										},
										{
											"begin": 8131,
											"end": 8141,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "167"
										},
										{
											"begin": 8131,
											"end": 8143,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8131,
											"end": 8143,
											"name": "tag",
											"source": 4,
											"value": "289"
										},
										{
											"begin": 8131,
											"end": 8143,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8145,
											"end": 8153,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 8155,
											"end": 8161,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 8163,
											"end": 8169,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8122,
											"end": 8130,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "207"
										},
										{
											"begin": 8122,
											"end": 8170,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8122,
											"end": 8170,
											"name": "tag",
											"source": 4,
											"value": "288"
										},
										{
											"begin": 8122,
											"end": 8170,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8188,
											"end": 8194,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8181,
											"end": 8194,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 8181,
											"end": 8194,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8181,
											"end": 8194,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8181,
											"end": 8194,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7809,
											"end": 8201,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7809,
											"end": 8201,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10496,
											"end": 11326,
											"name": "tag",
											"source": 4,
											"value": "207"
										},
										{
											"begin": 10496,
											"end": 11326,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 11164,
											"end": 11229,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "291"
										},
										{
											"begin": 11191,
											"end": 11197,
											"name": "PUSHIMMUTABLE",
											"source": 4,
											"value": "922"
										},
										{
											"begin": 11199,
											"end": 11205,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 11215,
											"end": 11219,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 11222,
											"end": 11228,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 11164,
											"end": 11190,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "292"
										},
										{
											"begin": 11164,
											"end": 11229,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 11164,
											"end": 11229,
											"name": "tag",
											"source": 4,
											"value": "291"
										},
										{
											"begin": 11164,
											"end": 11229,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 11239,
											"end": 11262,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "293"
										},
										{
											"begin": 11245,
											"end": 11253,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 11255,
											"end": 11261,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 11239,
											"end": 11244,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "294"
										},
										{
											"begin": 11239,
											"end": 11262,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 11239,
											"end": 11262,
											"name": "tag",
											"source": 4,
											"value": "293"
										},
										{
											"begin": 11239,
											"end": 11262,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 11294,
											"end": 11302,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 11286,
											"end": 11292,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "PUSH",
											"source": 4,
											"value": "DCBC1C05240F31FF3AD067EF1EE35CE4997762752E3A095284754544F4C709D7"
										},
										{
											"begin": 11304,
											"end": 11310,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 11312,
											"end": 11318,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "295"
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "296"
										},
										{
											"begin": 11278,
											"end": 11319,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "tag",
											"source": 4,
											"value": "295"
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "LOG3",
											"source": 4
										},
										{
											"begin": 10496,
											"end": 11326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10496,
											"end": 11326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10496,
											"end": 11326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10496,
											"end": 11326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10496,
											"end": 11326,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "tag",
											"source": 4,
											"value": "228"
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8986,
											"end": 8993,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 9005,
											"end": 9022,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9025,
											"end": 9043,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "298"
										},
										{
											"begin": 9037,
											"end": 9042,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 9025,
											"end": 9036,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 9025,
											"end": 9043,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9025,
											"end": 9043,
											"name": "tag",
											"source": 4,
											"value": "298"
										},
										{
											"begin": 9025,
											"end": 9043,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9005,
											"end": 9043,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9005,
											"end": 9043,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9066,
											"end": 9075,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9057,
											"end": 9063,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 9057,
											"end": 9075,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 9053,
											"end": 9161,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 9053,
											"end": 9161,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "299"
										},
										{
											"begin": 9053,
											"end": 9161,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 9125,
											"end": 9130,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 9132,
											"end": 9138,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 9140,
											"end": 9149,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "PUSH",
											"source": 4,
											"value": "FE9CCEEC00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "300"
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "203"
										},
										{
											"begin": 9098,
											"end": 9150,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "tag",
											"source": 4,
											"value": "300"
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 9053,
											"end": 9161,
											"name": "tag",
											"source": 4,
											"value": "299"
										},
										{
											"begin": 9053,
											"end": 9161,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9171,
											"end": 9185,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 9188,
											"end": 9211,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "301"
										},
										{
											"begin": 9204,
											"end": 9210,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 9188,
											"end": 9203,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "57"
										},
										{
											"begin": 9188,
											"end": 9211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9188,
											"end": 9211,
											"name": "tag",
											"source": 4,
											"value": "301"
										},
										{
											"begin": 9188,
											"end": 9211,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9171,
											"end": 9211,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9171,
											"end": 9211,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9221,
											"end": 9277,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "302"
										},
										{
											"begin": 9231,
											"end": 9243,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "303"
										},
										{
											"begin": 9231,
											"end": 9241,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "167"
										},
										{
											"begin": 9231,
											"end": 9243,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9231,
											"end": 9243,
											"name": "tag",
											"source": 4,
											"value": "303"
										},
										{
											"begin": 9231,
											"end": 9243,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9245,
											"end": 9253,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 9255,
											"end": 9260,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 9262,
											"end": 9268,
											"name": "DUP10",
											"source": 4
										},
										{
											"begin": 9270,
											"end": 9276,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 9221,
											"end": 9230,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "238"
										},
										{
											"begin": 9221,
											"end": 9277,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9221,
											"end": 9277,
											"name": "tag",
											"source": 4,
											"value": "302"
										},
										{
											"begin": 9221,
											"end": 9277,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9295,
											"end": 9301,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9288,
											"end": 9301,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 9288,
											"end": 9301,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9288,
											"end": 9301,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9288,
											"end": 9301,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8895,
											"end": 9308,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8895,
											"end": 9308,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "tag",
											"source": 4,
											"value": "238"
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 11580,
											"end": 11585,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 11570,
											"end": 11576,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "305"
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 11601,
											"end": 11639,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "306"
										},
										{
											"begin": 11617,
											"end": 11622,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 11624,
											"end": 11630,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 11632,
											"end": 11638,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 11601,
											"end": 11616,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "180"
										},
										{
											"begin": 11601,
											"end": 11639,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 11601,
											"end": 11639,
											"name": "tag",
											"source": 4,
											"value": "306"
										},
										{
											"begin": 11601,
											"end": 11639,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "tag",
											"source": 4,
											"value": "305"
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 12157,
											"end": 12177,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "307"
										},
										{
											"begin": 12163,
											"end": 12168,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 12170,
											"end": 12176,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 12157,
											"end": 12162,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "308"
										},
										{
											"begin": 12157,
											"end": 12177,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 12157,
											"end": 12177,
											"name": "tag",
											"source": 4,
											"value": "307"
										},
										{
											"begin": 12157,
											"end": 12177,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 12187,
											"end": 12235,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "309"
										},
										{
											"begin": 12210,
											"end": 12216,
											"name": "PUSHIMMUTABLE",
											"source": 4,
											"value": "922"
										},
										{
											"begin": 12218,
											"end": 12226,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 12228,
											"end": 12234,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 12187,
											"end": 12209,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "310"
										},
										{
											"begin": 12187,
											"end": 12235,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 12187,
											"end": 12235,
											"name": "tag",
											"source": 4,
											"value": "309"
										},
										{
											"begin": 12187,
											"end": 12235,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 12278,
											"end": 12283,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 12268,
											"end": 12276,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 12260,
											"end": 12266,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 4,
											"value": "FBDE797D201C681B91056529119E0B02407C7BB96A4A2C75C01FC9667232C8DB"
										},
										{
											"begin": 12285,
											"end": 12291,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 12293,
											"end": 12299,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "311"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "296"
										},
										{
											"begin": 12251,
											"end": 12300,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "tag",
											"source": 4,
											"value": "311"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "LOG4",
											"source": 4
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 11393,
											"end": 12307,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9882,
											"end": 10095,
											"name": "tag",
											"source": 4,
											"value": "242"
										},
										{
											"begin": 9882,
											"end": 10095,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9979,
											"end": 9986,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "313"
										},
										{
											"begin": 10041,
											"end": 10058,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "314"
										},
										{
											"begin": 10041,
											"end": 10056,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "185"
										},
										{
											"begin": 10041,
											"end": 10058,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10041,
											"end": 10058,
											"name": "tag",
											"source": 4,
											"value": "314"
										},
										{
											"begin": 10041,
											"end": 10058,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10035,
											"end": 10037,
											"name": "PUSH",
											"source": 4,
											"value": "A"
										},
										{
											"begin": 10035,
											"end": 10058,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "315"
										},
										{
											"begin": 10035,
											"end": 10058,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10035,
											"end": 10058,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10035,
											"end": 10058,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "259"
										},
										{
											"begin": 10035,
											"end": 10058,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10035,
											"end": 10058,
											"name": "tag",
											"source": 4,
											"value": "315"
										},
										{
											"begin": 10035,
											"end": 10058,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10019,
											"end": 10032,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "316"
										},
										{
											"begin": 10019,
											"end": 10030,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 10019,
											"end": 10032,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10019,
											"end": 10032,
											"name": "tag",
											"source": 4,
											"value": "316"
										},
										{
											"begin": 10019,
											"end": 10032,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10019,
											"end": 10058,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "317"
										},
										{
											"begin": 10019,
											"end": 10058,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10019,
											"end": 10058,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10019,
											"end": 10058,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "196"
										},
										{
											"begin": 10019,
											"end": 10058,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10019,
											"end": 10058,
											"name": "tag",
											"source": 4,
											"value": "317"
										},
										{
											"begin": 10019,
											"end": 10058,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10076,
											"end": 10077,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 10060,
											"end": 10073,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "318"
										},
										{
											"begin": 10060,
											"end": 10071,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 10060,
											"end": 10073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10060,
											"end": 10073,
											"name": "tag",
											"source": 4,
											"value": "318"
										},
										{
											"begin": 10060,
											"end": 10073,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10060,
											"end": 10077,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "319"
										},
										{
											"begin": 10060,
											"end": 10077,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10060,
											"end": 10077,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10060,
											"end": 10077,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "196"
										},
										{
											"begin": 10060,
											"end": 10077,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10060,
											"end": 10077,
											"name": "tag",
											"source": 4,
											"value": "319"
										},
										{
											"begin": 10060,
											"end": 10077,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10079,
											"end": 10087,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 10005,
											"end": 10011,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 10005,
											"end": 10018,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "262"
										},
										{
											"begin": 10005,
											"end": 10018,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFF"
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10005,
											"end": 10088,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "tag",
											"source": 4,
											"value": "313"
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9998,
											"end": 10088,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9998,
											"end": 10088,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9882,
											"end": 10095,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 9882,
											"end": 10095,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9882,
											"end": 10095,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9882,
											"end": 10095,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9882,
											"end": 10095,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "tag",
											"source": 4,
											"value": "245"
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6723,
											"end": 6730,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6749,
											"end": 6804,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "321"
										},
										{
											"begin": 6766,
											"end": 6782,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "322"
										},
										{
											"begin": 6776,
											"end": 6781,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6766,
											"end": 6775,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 6766,
											"end": 6782,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6766,
											"end": 6782,
											"name": "tag",
											"source": 4,
											"value": "322"
										},
										{
											"begin": 6766,
											"end": 6782,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6784,
											"end": 6803,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6749,
											"end": 6765,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "164"
										},
										{
											"begin": 6749,
											"end": 6804,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6749,
											"end": 6804,
											"name": "tag",
											"source": 4,
											"value": "321"
										},
										{
											"begin": 6749,
											"end": 6804,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6742,
											"end": 6804,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6742,
											"end": 6804,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6658,
											"end": 6811,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6658,
											"end": 6811,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "tag",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8152,
											"end": 8159,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8171,
											"end": 8185,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "324"
										},
										{
											"begin": 8195,
											"end": 8196,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 8198,
											"end": 8199,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 8201,
											"end": 8212,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 8188,
											"end": 8194,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "325"
										},
										{
											"begin": 8188,
											"end": 8213,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "tag",
											"source": 10,
											"value": "324"
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8171,
											"end": 8213,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8171,
											"end": 8213,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8227,
											"end": 8253,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "326"
										},
										{
											"begin": 8244,
											"end": 8252,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8227,
											"end": 8243,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "327"
										},
										{
											"begin": 8227,
											"end": 8253,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8227,
											"end": 8253,
											"name": "tag",
											"source": 10,
											"value": "326"
										},
										{
											"begin": 8227,
											"end": 8253,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "328"
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8285,
											"end": 8286,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8270,
											"end": 8281,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "329"
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "330"
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "331"
										},
										{
											"begin": 8257,
											"end": 8282,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "tag",
											"source": 10,
											"value": "330"
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "tag",
											"source": 10,
											"value": "329"
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8267,
											"end": 8268,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 8264,
											"end": 8265,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "MULMOD",
											"source": 10
										},
										{
											"begin": 8257,
											"end": 8286,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "tag",
											"source": 10,
											"value": "328"
										},
										{
											"begin": 8227,
											"end": 8286,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "332"
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8312,
											"end": 8313,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "333"
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 8302,
											"end": 8313,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "tag",
											"source": 10,
											"value": "333"
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8302,
											"end": 8313,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "tag",
											"source": 10,
											"value": "332"
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8340,
											"end": 8346,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8333,
											"end": 8346,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8333,
											"end": 8346,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8333,
											"end": 8346,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8051,
											"end": 8353,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "tag",
											"source": 2,
											"value": "266"
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10078,
											"end": 10079,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10061,
											"end": 10066,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "335"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10132,
											"end": 10133,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 2,
											"value": "E602DF0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "336"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 10103,
											"end": 10135,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "tag",
											"source": 2,
											"value": "336"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "tag",
											"source": 2,
											"value": "335"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10178,
											"end": 10179,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10159,
											"end": 10166,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "337"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10231,
											"end": 10232,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 2,
											"value": "94280D6200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "338"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 10203,
											"end": 10234,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "tag",
											"source": 2,
											"value": "338"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "tag",
											"source": 2,
											"value": "337"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10284,
											"end": 10289,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10265,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10266,
											"end": 10271,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10273,
											"end": 10280,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10303,
											"end": 10312,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "339"
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10349,
											"end": 10356,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10342,
											"end": 10347,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10358,
											"end": 10363,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "340"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 10333,
											"end": 10364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "tag",
											"source": 2,
											"value": "340"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "tag",
											"source": 2,
											"value": "339"
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9949,
											"end": 10381,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "tag",
											"source": 2,
											"value": "281"
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6376,
											"end": 6377,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6360,
											"end": 6364,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "342"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6512,
											"end": 6517,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "343"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 6496,
											"end": 6517,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "tag",
											"source": 2,
											"value": "343"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "344"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 2,
											"value": "342"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6548,
											"end": 6567,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6570,
											"end": 6579,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6580,
											"end": 6584,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 6548,
											"end": 6585,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6548,
											"end": 6585,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6617,
											"end": 6622,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6603,
											"end": 6614,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "345"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6674,
											"end": 6678,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6680,
											"end": 6691,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6693,
											"end": 6698,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 2,
											"value": "E450D38C00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "346"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "203"
										},
										{
											"begin": 6649,
											"end": 6699,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "tag",
											"source": 2,
											"value": "346"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "tag",
											"source": 2,
											"value": "345"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6866,
											"end": 6871,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6852,
											"end": 6863,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6843,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6844,
											"end": 6848,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6534,
											"end": 6896,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 2,
											"value": "344"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6924,
											"end": 6925,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6910,
											"end": 6912,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "347"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7089,
											"end": 7094,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7085,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 7073,
											"end": 7085,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "348"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 2,
											"value": "347"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7301,
											"end": 7306,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7293,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7294,
											"end": 7296,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 2,
											"value": "348"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7361,
											"end": 7363,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7355,
											"end": 7359,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7365,
											"end": 7370,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "349"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 7346,
											"end": 7371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "tag",
											"source": 2,
											"value": "349"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6271,
											"end": 7378,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "tag",
											"source": 7,
											"value": "292"
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1802,
											"end": 1883,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "351"
										},
										{
											"begin": 1822,
											"end": 1827,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1844,
											"end": 1849,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1844,
											"end": 1862,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1844,
											"end": 1862,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1844,
											"end": 1862,
											"name": "PUSH",
											"source": 7,
											"value": "23B872DD"
										},
										{
											"begin": 1865,
											"end": 1869,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1871,
											"end": 1873,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1875,
											"end": 1880,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "352"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "353"
										},
										{
											"begin": 1829,
											"end": 1882,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "tag",
											"source": 7,
											"value": "352"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1802,
											"end": 1821,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "354"
										},
										{
											"begin": 1802,
											"end": 1883,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1802,
											"end": 1883,
											"name": "tag",
											"source": 7,
											"value": "351"
										},
										{
											"begin": 1802,
											"end": 1883,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1702,
											"end": 1890,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "tag",
											"source": 2,
											"value": "294"
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7810,
											"end": 7811,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7791,
											"end": 7798,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "356"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7864,
											"end": 7865,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 2,
											"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "357"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 7835,
											"end": 7867,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "tag",
											"source": 2,
											"value": "357"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "tag",
											"source": 2,
											"value": "356"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "358"
										},
										{
											"begin": 7903,
											"end": 7904,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7907,
											"end": 7914,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7916,
											"end": 7921,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7887,
											"end": 7894,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "281"
										},
										{
											"begin": 7887,
											"end": 7922,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "tag",
											"source": 2,
											"value": "358"
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7721,
											"end": 7929,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "tag",
											"source": 2,
											"value": "308"
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8336,
											"end": 8337,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8317,
											"end": 8324,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "360"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8388,
											"end": 8389,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 2,
											"value": "96C6FD1E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "361"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 8361,
											"end": 8391,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "tag",
											"source": 2,
											"value": "361"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "tag",
											"source": 2,
											"value": "360"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "362"
										},
										{
											"begin": 8419,
											"end": 8426,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8436,
											"end": 8437,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8440,
											"end": 8445,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8411,
											"end": 8418,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "281"
										},
										{
											"begin": 8411,
											"end": 8446,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "tag",
											"source": 2,
											"value": "362"
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8247,
											"end": 8453,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1303,
											"end": 1463,
											"name": "tag",
											"source": 7,
											"value": "310"
										},
										{
											"begin": 1303,
											"end": 1463,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1385,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "364"
										},
										{
											"begin": 1405,
											"end": 1410,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1427,
											"end": 1432,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1427,
											"end": 1441,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1427,
											"end": 1441,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1427,
											"end": 1441,
											"name": "PUSH",
											"source": 7,
											"value": "A9059CBB"
										},
										{
											"begin": 1444,
											"end": 1446,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1448,
											"end": 1453,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "365"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "366"
										},
										{
											"begin": 1412,
											"end": 1455,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "tag",
											"source": 7,
											"value": "365"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1385,
											"end": 1404,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "354"
										},
										{
											"begin": 1385,
											"end": 1456,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1385,
											"end": 1456,
											"name": "tag",
											"source": 7,
											"value": "364"
										},
										{
											"begin": 1385,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1303,
											"end": 1463,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1303,
											"end": 1463,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1303,
											"end": 1463,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1303,
											"end": 1463,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "tag",
											"source": 10,
											"value": "325"
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3885,
											"end": 3899,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4232,
											"end": 4245,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4252,
											"end": 4253,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4248,
											"end": 4249,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4248,
											"end": 4253,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 4232,
											"end": 4253,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4232,
											"end": 4253,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4312,
											"end": 4325,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4437,
											"end": 4438,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4433,
											"end": 4439,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 4430,
											"end": 4431,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4427,
											"end": 4428,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 4420,
											"end": 4440,
											"name": "MULMOD",
											"source": 10
										},
										{
											"begin": 4493,
											"end": 4498,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4489,
											"end": 4491,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4486,
											"end": 4499,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 4478,
											"end": 4483,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4474,
											"end": 4476,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4470,
											"end": 4484,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4466,
											"end": 4500,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4457,
											"end": 4500,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4457,
											"end": 4500,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4392,
											"end": 4514,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4604,
											"end": 4605,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4595,
											"end": 4600,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4595,
											"end": 4605,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4591,
											"end": 4959,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "368"
										},
										{
											"begin": 4591,
											"end": 4959,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4933,
											"end": 4944,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4925,
											"end": 4930,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "369"
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "370"
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "331"
										},
										{
											"begin": 4925,
											"end": 4944,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "tag",
											"source": 10,
											"value": "370"
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "tag",
											"source": 10,
											"value": "369"
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4925,
											"end": 4944,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "367"
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4591,
											"end": 4959,
											"name": "tag",
											"source": 10,
											"value": "368"
										},
										{
											"begin": 4591,
											"end": 4959,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5080,
											"end": 5085,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5065,
											"end": 5076,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5065,
											"end": 5085,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 5061,
											"end": 5149,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "371"
										},
										{
											"begin": 5061,
											"end": 5149,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "PUSH",
											"source": 10,
											"value": "227BC15300000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 5061,
											"end": 5149,
											"name": "tag",
											"source": 10,
											"value": "371"
										},
										{
											"begin": 5061,
											"end": 5149,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5404,
											"end": 5421,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5539,
											"end": 5550,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5536,
											"end": 5537,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 5533,
											"end": 5534,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 5526,
											"end": 5551,
											"name": "MULMOD",
											"source": 10
										},
										{
											"begin": 5513,
											"end": 5551,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5513,
											"end": 5551,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5667,
											"end": 5672,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5665,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5653,
											"end": 5673,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 5646,
											"end": 5651,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5642,
											"end": 5674,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 5633,
											"end": 5674,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5633,
											"end": 5674,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5711,
											"end": 5720,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5704,
											"end": 5709,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5700,
											"end": 5721,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 5691,
											"end": 5721,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5691,
											"end": 5721,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5939,
											"end": 5951,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5973,
											"end": 5984,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5969,
											"end": 5970,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5969,
											"end": 5984,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 5954,
											"end": 5965,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 5954,
											"end": 5985,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5939,
											"end": 5985,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5939,
											"end": 5985,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6105,
											"end": 6109,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6092,
											"end": 6103,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 6088,
											"end": 6110,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 6073,
											"end": 6110,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 6073,
											"end": 6110,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6197,
											"end": 6201,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6190,
											"end": 6195,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6186,
											"end": 6202,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 6177,
											"end": 6202,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 6177,
											"end": 6202,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6354,
											"end": 6355,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 6347,
											"end": 6351,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6340,
											"end": 6344,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6337,
											"end": 6338,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6333,
											"end": 6345,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 6329,
											"end": 6352,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 6325,
											"end": 6356,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6317,
											"end": 6356,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6317,
											"end": 6356,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6453,
											"end": 6457,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6445,
											"end": 6450,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6445,
											"end": 6457,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 6436,
											"end": 6457,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6436,
											"end": 6457,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 6436,
											"end": 6457,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 6436,
											"end": 6457,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6775,
											"end": 6790,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6813,
											"end": 6814,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 6798,
											"end": 6809,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 6794,
											"end": 6795,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 6794,
											"end": 6809,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 6793,
											"end": 6814,
											"name": "XOR",
											"source": 10
										},
										{
											"begin": 6775,
											"end": 6814,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6775,
											"end": 6814,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7060,
											"end": 7067,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7046,
											"end": 7057,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 7046,
											"end": 7067,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 7042,
											"end": 7043,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7042,
											"end": 7067,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 7031,
											"end": 7067,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7031,
											"end": 7067,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 7031,
											"end": 7067,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7031,
											"end": 7067,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7129,
											"end": 7136,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7115,
											"end": 7126,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 7115,
											"end": 7136,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 7111,
											"end": 7112,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7111,
											"end": 7136,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 7100,
											"end": 7136,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7100,
											"end": 7136,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 7100,
											"end": 7136,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7100,
											"end": 7136,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7199,
											"end": 7206,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7185,
											"end": 7196,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 7185,
											"end": 7206,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 7181,
											"end": 7182,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7181,
											"end": 7206,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 7170,
											"end": 7206,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7170,
											"end": 7206,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 7170,
											"end": 7206,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7170,
											"end": 7206,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7269,
											"end": 7276,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7255,
											"end": 7266,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 7255,
											"end": 7276,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 7251,
											"end": 7252,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7251,
											"end": 7276,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7240,
											"end": 7276,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7339,
											"end": 7346,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7325,
											"end": 7336,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 7325,
											"end": 7346,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 7321,
											"end": 7322,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7321,
											"end": 7346,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 7310,
											"end": 7346,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7310,
											"end": 7346,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 7310,
											"end": 7346,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7310,
											"end": 7346,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7410,
											"end": 7417,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7396,
											"end": 7407,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 7396,
											"end": 7417,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 7392,
											"end": 7393,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7392,
											"end": 7417,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 7381,
											"end": 7417,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7381,
											"end": 7417,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 7381,
											"end": 7417,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7381,
											"end": 7417,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7868,
											"end": 7875,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7860,
											"end": 7865,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 7860,
											"end": 7875,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 7851,
											"end": 7875,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 7851,
											"end": 7875,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7889,
											"end": 7902,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7889,
											"end": 7902,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7889,
											"end": 7902,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7889,
											"end": 7902,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7889,
											"end": 7902,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "tag",
											"source": 10,
											"value": "367"
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3803,
											"end": 7919,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 14993,
											"end": 15115,
											"name": "tag",
											"source": 10,
											"value": "327"
										},
										{
											"begin": 14993,
											"end": 15115,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15061,
											"end": 15065,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15107,
											"end": 15108,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 15102,
											"end": 15103,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 15090,
											"end": 15098,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "373"
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "374"
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "375"
										},
										{
											"begin": 15084,
											"end": 15099,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "tag",
											"source": 10,
											"value": "374"
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "tag",
											"source": 10,
											"value": "373"
										},
										{
											"begin": 15084,
											"end": 15099,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "376"
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "377"
										},
										{
											"begin": 15084,
											"end": 15103,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "tag",
											"source": 10,
											"value": "376"
										},
										{
											"begin": 15084,
											"end": 15103,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15084,
											"end": 15108,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 15084,
											"end": 15108,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 15084,
											"end": 15108,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 15077,
											"end": 15108,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15077,
											"end": 15108,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14993,
											"end": 15115,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14993,
											"end": 15115,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14993,
											"end": 15115,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14993,
											"end": 15115,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "tag",
											"source": 7,
											"value": "354"
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4478,
											"end": 4501,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "379"
										},
										{
											"begin": 4532,
											"end": 4536,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4512,
											"end": 4517,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4504,
											"end": 4531,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4504,
											"end": 4531,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4504,
											"end": 4531,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "380"
										},
										{
											"begin": 4504,
											"end": 4531,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4504,
											"end": 4537,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "tag",
											"source": 7,
											"value": "379"
										},
										{
											"begin": 4504,
											"end": 4537,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4478,
											"end": 4537,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4478,
											"end": 4537,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4572,
											"end": 4573,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4551,
											"end": 4561,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4551,
											"end": 4568,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "381"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4589,
											"end": 4599,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "382"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "383"
										},
										{
											"begin": 4578,
											"end": 4608,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "tag",
											"source": 7,
											"value": "382"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4577,
											"end": 4608,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "tag",
											"source": 7,
											"value": "381"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "384"
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4664,
											"end": 4669,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 7,
											"value": "5274AFE700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "385"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "74"
										},
										{
											"begin": 4631,
											"end": 4671,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "tag",
											"source": 7,
											"value": "385"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "tag",
											"source": 7,
											"value": "384"
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4129,
											"end": 4688,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4059,
											"end": 4688,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "tag",
											"source": 8,
											"value": "380"
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2780,
											"end": 2792,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 2811,
											"end": 2849,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "387"
										},
										{
											"begin": 2833,
											"end": 2839,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2841,
											"end": 2845,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2847,
											"end": 2848,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2811,
											"end": 2832,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "388"
										},
										{
											"begin": 2811,
											"end": 2849,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2811,
											"end": 2849,
											"name": "tag",
											"source": 8,
											"value": "387"
										},
										{
											"begin": 2811,
											"end": 2849,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2804,
											"end": 2849,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2804,
											"end": 2849,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2705,
											"end": 2856,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2705,
											"end": 2856,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "tag",
											"source": 8,
											"value": "388"
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3279,
											"end": 3291,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3331,
											"end": 3336,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3307,
											"end": 3328,
											"name": "SELFBALANCE",
											"source": 8
										},
										{
											"begin": 3307,
											"end": 3336,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "390"
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3394,
											"end": 3398,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH",
											"source": 8,
											"value": "CD78605900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "391"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 3359,
											"end": 3400,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "tag",
											"source": 8,
											"value": "391"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3400,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "tag",
											"source": 8,
											"value": "390"
										},
										{
											"begin": 3303,
											"end": 3411,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3421,
											"end": 3433,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3435,
											"end": 3458,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3468,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3473,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3462,
											"end": 3473,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3481,
											"end": 3486,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3488,
											"end": 3492,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "392"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "393"
										},
										{
											"begin": 3462,
											"end": 3493,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "tag",
											"source": 8,
											"value": "392"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "396"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "3F"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "395"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "tag",
											"source": 8,
											"value": "396"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "tag",
											"source": 8,
											"value": "395"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3420,
											"end": 3493,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3420,
											"end": 3493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3420,
											"end": 3493,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3420,
											"end": 3493,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 3537,
											"end": 3543,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3545,
											"end": 3552,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3554,
											"end": 3564,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3510,
											"end": 3536,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "398"
										},
										{
											"begin": 3510,
											"end": 3565,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "tag",
											"source": 8,
											"value": "397"
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3503,
											"end": 3565,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3503,
											"end": 3565,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3503,
											"end": 3565,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3503,
											"end": 3565,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3180,
											"end": 3572,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3180,
											"end": 3572,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "tag",
											"source": 8,
											"value": "398"
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4769,
											"end": 4781,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 4798,
											"end": 4805,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "400"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4821,
											"end": 4840,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "401"
										},
										{
											"begin": 4829,
											"end": 4839,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4821,
											"end": 4828,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "402"
										},
										{
											"begin": 4821,
											"end": 4840,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4821,
											"end": 4840,
											"name": "tag",
											"source": 8,
											"value": "401"
										},
										{
											"begin": 4821,
											"end": 4840,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "403"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "tag",
											"source": 8,
											"value": "400"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5066,
											"end": 5067,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5045,
											"end": 5055,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5045,
											"end": 5062,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5045,
											"end": 5067,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "404"
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5093,
											"end": 5094,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5071,
											"end": 5077,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "EXTCODESIZE",
											"source": 8
										},
										{
											"begin": 5071,
											"end": 5094,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "tag",
											"source": 8,
											"value": "404"
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "405"
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5138,
											"end": 5144,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 8,
											"value": "9996B31500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "406"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 5121,
											"end": 5145,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "tag",
											"source": 8,
											"value": "406"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "tag",
											"source": 8,
											"value": "405"
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5180,
											"end": 5190,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "399"
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "tag",
											"source": 8,
											"value": "403"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "tag",
											"source": 8,
											"value": "399"
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 5207,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5743,
											"end": 6259,
											"name": "tag",
											"source": 8,
											"value": "402"
										},
										{
											"begin": 5743,
											"end": 6259,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5894,
											"end": 5895,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5874,
											"end": 5884,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5874,
											"end": 5891,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5874,
											"end": 5895,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "408"
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6102,
											"end": 6112,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6096,
											"end": 6113,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6158,
											"end": 6173,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6145,
											"end": 6155,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6141,
											"end": 6143,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6130,
											"end": 6174,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "tag",
											"source": 8,
											"value": "408"
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 8,
											"value": "1425EA4200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 7,
											"end": 84,
											"name": "tag",
											"source": 12,
											"value": "410"
										},
										{
											"begin": 7,
											"end": 84,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 44,
											"end": 51,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 73,
											"end": 78,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 62,
											"end": 78,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 62,
											"end": 78,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7,
											"end": 84,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7,
											"end": 84,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7,
											"end": 84,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7,
											"end": 84,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 90,
											"end": 208,
											"name": "tag",
											"source": 12,
											"value": "411"
										},
										{
											"begin": 90,
											"end": 208,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 177,
											"end": 201,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "449"
										},
										{
											"begin": 195,
											"end": 200,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 177,
											"end": 201,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "410"
										},
										{
											"begin": 177,
											"end": 201,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 177,
											"end": 201,
											"name": "tag",
											"source": 12,
											"value": "449"
										},
										{
											"begin": 177,
											"end": 201,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 172,
											"end": 175,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 165,
											"end": 202,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 90,
											"end": 208,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 90,
											"end": 208,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 90,
											"end": 208,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 214,
											"end": 436,
											"name": "tag",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 214,
											"end": 436,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 307,
											"end": 311,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 345,
											"end": 347,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 334,
											"end": 343,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 330,
											"end": 348,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 322,
											"end": 348,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 322,
											"end": 348,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 358,
											"end": 429,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "451"
										},
										{
											"begin": 426,
											"end": 427,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 415,
											"end": 424,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 411,
											"end": 428,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 402,
											"end": 408,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 358,
											"end": 429,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "411"
										},
										{
											"begin": 358,
											"end": 429,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 358,
											"end": 429,
											"name": "tag",
											"source": 12,
											"value": "451"
										},
										{
											"begin": 358,
											"end": 429,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 214,
											"end": 436,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 214,
											"end": 436,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 214,
											"end": 436,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 214,
											"end": 436,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 214,
											"end": 436,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 442,
											"end": 541,
											"name": "tag",
											"source": 12,
											"value": "412"
										},
										{
											"begin": 442,
											"end": 541,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 494,
											"end": 500,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 528,
											"end": 533,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 522,
											"end": 534,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 512,
											"end": 534,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 512,
											"end": 534,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 442,
											"end": 541,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 442,
											"end": 541,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 442,
											"end": 541,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 442,
											"end": 541,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 547,
											"end": 716,
											"name": "tag",
											"source": 12,
											"value": "413"
										},
										{
											"begin": 547,
											"end": 716,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 631,
											"end": 642,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 665,
											"end": 671,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 660,
											"end": 663,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 653,
											"end": 672,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 705,
											"end": 709,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 700,
											"end": 703,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 696,
											"end": 710,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 681,
											"end": 710,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 681,
											"end": 710,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 547,
											"end": 716,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 547,
											"end": 716,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 547,
											"end": 716,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 547,
											"end": 716,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 547,
											"end": 716,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 722,
											"end": 861,
											"name": "tag",
											"source": 12,
											"value": "414"
										},
										{
											"begin": 722,
											"end": 861,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 811,
											"end": 817,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 806,
											"end": 809,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 801,
											"end": 804,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 795,
											"end": 818,
											"name": "MCOPY",
											"source": 12
										},
										{
											"begin": 852,
											"end": 853,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 843,
											"end": 849,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 838,
											"end": 841,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 834,
											"end": 850,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 827,
											"end": 854,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 722,
											"end": 861,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 722,
											"end": 861,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 722,
											"end": 861,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 722,
											"end": 861,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 867,
											"end": 969,
											"name": "tag",
											"source": 12,
											"value": "415"
										},
										{
											"begin": 867,
											"end": 969,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 908,
											"end": 914,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 959,
											"end": 961,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 955,
											"end": 962,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 950,
											"end": 952,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 943,
											"end": 948,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 939,
											"end": 953,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 935,
											"end": 963,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 925,
											"end": 963,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 925,
											"end": 963,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 867,
											"end": 969,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 867,
											"end": 969,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 867,
											"end": 969,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 867,
											"end": 969,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "tag",
											"source": 12,
											"value": "416"
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1063,
											"end": 1066,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1091,
											"end": 1130,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "457"
										},
										{
											"begin": 1124,
											"end": 1129,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1091,
											"end": 1130,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "412"
										},
										{
											"begin": 1091,
											"end": 1130,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1091,
											"end": 1130,
											"name": "tag",
											"source": 12,
											"value": "457"
										},
										{
											"begin": 1091,
											"end": 1130,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1146,
											"end": 1217,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "458"
										},
										{
											"begin": 1210,
											"end": 1216,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1205,
											"end": 1208,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1146,
											"end": 1217,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "413"
										},
										{
											"begin": 1146,
											"end": 1217,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1146,
											"end": 1217,
											"name": "tag",
											"source": 12,
											"value": "458"
										},
										{
											"begin": 1146,
											"end": 1217,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1139,
											"end": 1217,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 1139,
											"end": 1217,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1226,
											"end": 1291,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "459"
										},
										{
											"begin": 1284,
											"end": 1290,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1279,
											"end": 1282,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1272,
											"end": 1276,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1265,
											"end": 1270,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 1261,
											"end": 1277,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1226,
											"end": 1291,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "414"
										},
										{
											"begin": 1226,
											"end": 1291,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1226,
											"end": 1291,
											"name": "tag",
											"source": 12,
											"value": "459"
										},
										{
											"begin": 1226,
											"end": 1291,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1316,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "460"
										},
										{
											"begin": 1338,
											"end": 1344,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1316,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "415"
										},
										{
											"begin": 1316,
											"end": 1345,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1316,
											"end": 1345,
											"name": "tag",
											"source": 12,
											"value": "460"
										},
										{
											"begin": 1316,
											"end": 1345,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1311,
											"end": 1314,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1307,
											"end": 1346,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1300,
											"end": 1346,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1300,
											"end": 1346,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1067,
											"end": 1352,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 975,
											"end": 1352,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 975,
											"end": 1352,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "tag",
											"source": 12,
											"value": "43"
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1471,
											"end": 1475,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1509,
											"end": 1511,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1498,
											"end": 1507,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1494,
											"end": 1512,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1486,
											"end": 1512,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1486,
											"end": 1512,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1558,
											"end": 1567,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1552,
											"end": 1556,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1548,
											"end": 1568,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1544,
											"end": 1545,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1533,
											"end": 1542,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1529,
											"end": 1546,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1522,
											"end": 1569,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1586,
											"end": 1664,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "462"
										},
										{
											"begin": 1659,
											"end": 1663,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1650,
											"end": 1656,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1586,
											"end": 1664,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "416"
										},
										{
											"begin": 1586,
											"end": 1664,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1586,
											"end": 1664,
											"name": "tag",
											"source": 12,
											"value": "462"
										},
										{
											"begin": 1586,
											"end": 1664,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1578,
											"end": 1664,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1578,
											"end": 1664,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1358,
											"end": 1671,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1358,
											"end": 1671,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1758,
											"end": 1875,
											"name": "tag",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 1758,
											"end": 1875,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1867,
											"end": 1868,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1864,
											"end": 1865,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1857,
											"end": 1869,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2004,
											"end": 2126,
											"name": "tag",
											"source": 12,
											"value": "420"
										},
										{
											"begin": 2004,
											"end": 2126,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2077,
											"end": 2101,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "467"
										},
										{
											"begin": 2095,
											"end": 2100,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2077,
											"end": 2101,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "410"
										},
										{
											"begin": 2077,
											"end": 2101,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2077,
											"end": 2101,
											"name": "tag",
											"source": 12,
											"value": "467"
										},
										{
											"begin": 2077,
											"end": 2101,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2070,
											"end": 2075,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2067,
											"end": 2102,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 2057,
											"end": 2120,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "468"
										},
										{
											"begin": 2057,
											"end": 2120,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2116,
											"end": 2117,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2113,
											"end": 2114,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2106,
											"end": 2118,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2057,
											"end": 2120,
											"name": "tag",
											"source": 12,
											"value": "468"
										},
										{
											"begin": 2057,
											"end": 2120,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2004,
											"end": 2126,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2004,
											"end": 2126,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "tag",
											"source": 12,
											"value": "421"
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2178,
											"end": 2183,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2216,
											"end": 2222,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2203,
											"end": 2223,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 2194,
											"end": 2223,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2194,
											"end": 2223,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2232,
											"end": 2265,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "470"
										},
										{
											"begin": 2259,
											"end": 2264,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2232,
											"end": 2265,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "420"
										},
										{
											"begin": 2232,
											"end": 2265,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2232,
											"end": 2265,
											"name": "tag",
											"source": 12,
											"value": "470"
										},
										{
											"begin": 2232,
											"end": 2265,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2132,
											"end": 2271,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2132,
											"end": 2271,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "tag",
											"source": 12,
											"value": "46"
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2336,
											"end": 2342,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2385,
											"end": 2387,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2373,
											"end": 2382,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2364,
											"end": 2371,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2360,
											"end": 2383,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2356,
											"end": 2388,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2472,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2472,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "472"
										},
										{
											"begin": 2353,
											"end": 2472,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2391,
											"end": 2470,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "473"
										},
										{
											"begin": 2391,
											"end": 2470,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 2391,
											"end": 2470,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2391,
											"end": 2470,
											"name": "tag",
											"source": 12,
											"value": "473"
										},
										{
											"begin": 2391,
											"end": 2470,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2472,
											"name": "tag",
											"source": 12,
											"value": "472"
										},
										{
											"begin": 2353,
											"end": 2472,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2511,
											"end": 2512,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2536,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "474"
										},
										{
											"begin": 2581,
											"end": 2588,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2572,
											"end": 2578,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2561,
											"end": 2570,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2557,
											"end": 2579,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2536,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "421"
										},
										{
											"begin": 2536,
											"end": 2589,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2536,
											"end": 2589,
											"name": "tag",
											"source": 12,
											"value": "474"
										},
										{
											"begin": 2536,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2526,
											"end": 2589,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2526,
											"end": 2589,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2482,
											"end": 2599,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2277,
											"end": 2606,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2277,
											"end": 2606,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2612,
											"end": 2738,
											"name": "tag",
											"source": 12,
											"value": "422"
										},
										{
											"begin": 2612,
											"end": 2738,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2649,
											"end": 2656,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2689,
											"end": 2731,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2682,
											"end": 2687,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2678,
											"end": 2732,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2667,
											"end": 2732,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2667,
											"end": 2732,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2612,
											"end": 2738,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2612,
											"end": 2738,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2612,
											"end": 2738,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2612,
											"end": 2738,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2744,
											"end": 2840,
											"name": "tag",
											"source": 12,
											"value": "423"
										},
										{
											"begin": 2744,
											"end": 2840,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2781,
											"end": 2788,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2810,
											"end": 2834,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "477"
										},
										{
											"begin": 2828,
											"end": 2833,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2810,
											"end": 2834,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "422"
										},
										{
											"begin": 2810,
											"end": 2834,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2810,
											"end": 2834,
											"name": "tag",
											"source": 12,
											"value": "477"
										},
										{
											"begin": 2810,
											"end": 2834,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2799,
											"end": 2834,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2799,
											"end": 2834,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2744,
											"end": 2840,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2744,
											"end": 2840,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2744,
											"end": 2840,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2744,
											"end": 2840,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2846,
											"end": 2968,
											"name": "tag",
											"source": 12,
											"value": "424"
										},
										{
											"begin": 2846,
											"end": 2968,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2919,
											"end": 2943,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "479"
										},
										{
											"begin": 2937,
											"end": 2942,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2919,
											"end": 2943,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "423"
										},
										{
											"begin": 2919,
											"end": 2943,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2919,
											"end": 2943,
											"name": "tag",
											"source": 12,
											"value": "479"
										},
										{
											"begin": 2919,
											"end": 2943,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2912,
											"end": 2917,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2909,
											"end": 2944,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 2899,
											"end": 2962,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "480"
										},
										{
											"begin": 2899,
											"end": 2962,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2958,
											"end": 2959,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2955,
											"end": 2956,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2948,
											"end": 2960,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2899,
											"end": 2962,
											"name": "tag",
											"source": 12,
											"value": "480"
										},
										{
											"begin": 2899,
											"end": 2962,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2846,
											"end": 2968,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2846,
											"end": 2968,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "tag",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3020,
											"end": 3025,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3058,
											"end": 3064,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3045,
											"end": 3065,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 3036,
											"end": 3065,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3036,
											"end": 3065,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3074,
											"end": 3107,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "482"
										},
										{
											"begin": 3101,
											"end": 3106,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3074,
											"end": 3107,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "424"
										},
										{
											"begin": 3074,
											"end": 3107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3074,
											"end": 3107,
											"name": "tag",
											"source": 12,
											"value": "482"
										},
										{
											"begin": 3074,
											"end": 3107,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2974,
											"end": 3113,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2974,
											"end": 3113,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "tag",
											"source": 12,
											"value": "51"
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3187,
											"end": 3193,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3195,
											"end": 3201,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3244,
											"end": 3246,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 3232,
											"end": 3241,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3223,
											"end": 3230,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3219,
											"end": 3242,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 3215,
											"end": 3247,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 3212,
											"end": 3331,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3212,
											"end": 3331,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "484"
										},
										{
											"begin": 3212,
											"end": 3331,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3250,
											"end": 3329,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "485"
										},
										{
											"begin": 3250,
											"end": 3329,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 3250,
											"end": 3329,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3250,
											"end": 3329,
											"name": "tag",
											"source": 12,
											"value": "485"
										},
										{
											"begin": 3250,
											"end": 3329,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3212,
											"end": 3331,
											"name": "tag",
											"source": 12,
											"value": "484"
										},
										{
											"begin": 3212,
											"end": 3331,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3370,
											"end": 3371,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3395,
											"end": 3448,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "486"
										},
										{
											"begin": 3440,
											"end": 3447,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3431,
											"end": 3437,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3420,
											"end": 3429,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 3416,
											"end": 3438,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3395,
											"end": 3448,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 3395,
											"end": 3448,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3395,
											"end": 3448,
											"name": "tag",
											"source": 12,
											"value": "486"
										},
										{
											"begin": 3395,
											"end": 3448,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3385,
											"end": 3448,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3385,
											"end": 3448,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3341,
											"end": 3458,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3497,
											"end": 3499,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "487"
										},
										{
											"begin": 3568,
											"end": 3575,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3559,
											"end": 3565,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3548,
											"end": 3557,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 3544,
											"end": 3566,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "421"
										},
										{
											"begin": 3523,
											"end": 3576,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "tag",
											"source": 12,
											"value": "487"
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3513,
											"end": 3576,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3513,
											"end": 3576,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3468,
											"end": 3586,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3119,
											"end": 3593,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3119,
											"end": 3593,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3689,
											"name": "tag",
											"source": 12,
											"value": "426"
										},
										{
											"begin": 3599,
											"end": 3689,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3633,
											"end": 3640,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3676,
											"end": 3681,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3669,
											"end": 3682,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3662,
											"end": 3683,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3651,
											"end": 3683,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3651,
											"end": 3683,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3689,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3689,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3689,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3689,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3695,
											"end": 3804,
											"name": "tag",
											"source": 12,
											"value": "427"
										},
										{
											"begin": 3695,
											"end": 3804,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3776,
											"end": 3797,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "490"
										},
										{
											"begin": 3791,
											"end": 3796,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3776,
											"end": 3797,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "426"
										},
										{
											"begin": 3776,
											"end": 3797,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3776,
											"end": 3797,
											"name": "tag",
											"source": 12,
											"value": "490"
										},
										{
											"begin": 3776,
											"end": 3797,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3771,
											"end": 3774,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3764,
											"end": 3798,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3695,
											"end": 3804,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3695,
											"end": 3804,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3695,
											"end": 3804,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "tag",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3897,
											"end": 3901,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3935,
											"end": 3937,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3924,
											"end": 3933,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3920,
											"end": 3938,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3912,
											"end": 3938,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3912,
											"end": 3938,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3948,
											"end": 4013,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "492"
										},
										{
											"begin": 4010,
											"end": 4011,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3999,
											"end": 4008,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 3995,
											"end": 4012,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3986,
											"end": 3992,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 3948,
											"end": 4013,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "427"
										},
										{
											"begin": 3948,
											"end": 4013,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3948,
											"end": 4013,
											"name": "tag",
											"source": 12,
											"value": "492"
										},
										{
											"begin": 3948,
											"end": 4013,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3810,
											"end": 4020,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3810,
											"end": 4020,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "tag",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4103,
											"end": 4109,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4111,
											"end": 4117,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4119,
											"end": 4125,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4168,
											"end": 4170,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 4156,
											"end": 4165,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4147,
											"end": 4154,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 4143,
											"end": 4166,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4139,
											"end": 4171,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 4136,
											"end": 4255,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4136,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "494"
										},
										{
											"begin": 4136,
											"end": 4255,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4174,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "495"
										},
										{
											"begin": 4174,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 4174,
											"end": 4253,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4174,
											"end": 4253,
											"name": "tag",
											"source": 12,
											"value": "495"
										},
										{
											"begin": 4174,
											"end": 4253,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4136,
											"end": 4255,
											"name": "tag",
											"source": 12,
											"value": "494"
										},
										{
											"begin": 4136,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4294,
											"end": 4295,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4319,
											"end": 4372,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "496"
										},
										{
											"begin": 4364,
											"end": 4371,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 4355,
											"end": 4361,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4344,
											"end": 4353,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 4340,
											"end": 4362,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4319,
											"end": 4372,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 4319,
											"end": 4372,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4319,
											"end": 4372,
											"name": "tag",
											"source": 12,
											"value": "496"
										},
										{
											"begin": 4319,
											"end": 4372,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4309,
											"end": 4372,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 4309,
											"end": 4372,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4265,
											"end": 4382,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4421,
											"end": 4423,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4447,
											"end": 4500,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "497"
										},
										{
											"begin": 4492,
											"end": 4499,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 4483,
											"end": 4489,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4472,
											"end": 4481,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 4468,
											"end": 4490,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4447,
											"end": 4500,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 4447,
											"end": 4500,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4447,
											"end": 4500,
											"name": "tag",
											"source": 12,
											"value": "497"
										},
										{
											"begin": 4447,
											"end": 4500,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4437,
											"end": 4500,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4437,
											"end": 4500,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4392,
											"end": 4510,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4549,
											"end": 4551,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4575,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "498"
										},
										{
											"begin": 4620,
											"end": 4627,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 4611,
											"end": 4617,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4600,
											"end": 4609,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 4596,
											"end": 4618,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4575,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "421"
										},
										{
											"begin": 4575,
											"end": 4628,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4575,
											"end": 4628,
											"name": "tag",
											"source": 12,
											"value": "498"
										},
										{
											"begin": 4575,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4565,
											"end": 4628,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4565,
											"end": 4628,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4520,
											"end": 4638,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4026,
											"end": 4645,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4026,
											"end": 4645,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4651,
											"end": 4737,
											"name": "tag",
											"source": 12,
											"value": "428"
										},
										{
											"begin": 4651,
											"end": 4737,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4686,
											"end": 4693,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4726,
											"end": 4730,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 4719,
											"end": 4724,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4715,
											"end": 4731,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4704,
											"end": 4731,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4704,
											"end": 4731,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4651,
											"end": 4737,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4651,
											"end": 4737,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4651,
											"end": 4737,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4651,
											"end": 4737,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4743,
											"end": 4855,
											"name": "tag",
											"source": 12,
											"value": "429"
										},
										{
											"begin": 4743,
											"end": 4855,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4826,
											"end": 4848,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "501"
										},
										{
											"begin": 4842,
											"end": 4847,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4826,
											"end": 4848,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "428"
										},
										{
											"begin": 4826,
											"end": 4848,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4826,
											"end": 4848,
											"name": "tag",
											"source": 12,
											"value": "501"
										},
										{
											"begin": 4826,
											"end": 4848,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4821,
											"end": 4824,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4814,
											"end": 4849,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4743,
											"end": 4855,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4743,
											"end": 4855,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4743,
											"end": 4855,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "tag",
											"source": 12,
											"value": "70"
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4950,
											"end": 4954,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4988,
											"end": 4990,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4977,
											"end": 4986,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4973,
											"end": 4991,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4965,
											"end": 4991,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4965,
											"end": 4991,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5001,
											"end": 5068,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "503"
										},
										{
											"begin": 5065,
											"end": 5066,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5054,
											"end": 5063,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 5050,
											"end": 5067,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5041,
											"end": 5047,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5001,
											"end": 5068,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "429"
										},
										{
											"begin": 5001,
											"end": 5068,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5001,
											"end": 5068,
											"name": "tag",
											"source": 12,
											"value": "503"
										},
										{
											"begin": 5001,
											"end": 5068,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4861,
											"end": 5075,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4861,
											"end": 5075,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5199,
											"name": "tag",
											"source": 12,
											"value": "430"
										},
										{
											"begin": 5081,
											"end": 5199,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5168,
											"end": 5192,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "505"
										},
										{
											"begin": 5186,
											"end": 5191,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5168,
											"end": 5192,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "423"
										},
										{
											"begin": 5168,
											"end": 5192,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5168,
											"end": 5192,
											"name": "tag",
											"source": 12,
											"value": "505"
										},
										{
											"begin": 5168,
											"end": 5192,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5163,
											"end": 5166,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5156,
											"end": 5193,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5199,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5199,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5081,
											"end": 5199,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "tag",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5298,
											"end": 5302,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5336,
											"end": 5338,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5325,
											"end": 5334,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5321,
											"end": 5339,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5313,
											"end": 5339,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5313,
											"end": 5339,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5349,
											"end": 5420,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "507"
										},
										{
											"begin": 5417,
											"end": 5418,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5406,
											"end": 5415,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 5402,
											"end": 5419,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5393,
											"end": 5399,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5349,
											"end": 5420,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "430"
										},
										{
											"begin": 5349,
											"end": 5420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5349,
											"end": 5420,
											"name": "tag",
											"source": 12,
											"value": "507"
										},
										{
											"begin": 5349,
											"end": 5420,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5205,
											"end": 5427,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5205,
											"end": 5427,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "tag",
											"source": 12,
											"value": "77"
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5492,
											"end": 5498,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5541,
											"end": 5543,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5529,
											"end": 5538,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5520,
											"end": 5527,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5516,
											"end": 5539,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 5512,
											"end": 5544,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 5509,
											"end": 5628,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5509,
											"end": 5628,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "509"
										},
										{
											"begin": 5509,
											"end": 5628,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5547,
											"end": 5626,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "510"
										},
										{
											"begin": 5547,
											"end": 5626,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 5547,
											"end": 5626,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5547,
											"end": 5626,
											"name": "tag",
											"source": 12,
											"value": "510"
										},
										{
											"begin": 5547,
											"end": 5626,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5509,
											"end": 5628,
											"name": "tag",
											"source": 12,
											"value": "509"
										},
										{
											"begin": 5509,
											"end": 5628,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5667,
											"end": 5668,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5692,
											"end": 5745,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "511"
										},
										{
											"begin": 5737,
											"end": 5744,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5728,
											"end": 5734,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5717,
											"end": 5726,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5713,
											"end": 5735,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5692,
											"end": 5745,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 5692,
											"end": 5745,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5692,
											"end": 5745,
											"name": "tag",
											"source": 12,
											"value": "511"
										},
										{
											"begin": 5692,
											"end": 5745,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5682,
											"end": 5745,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5682,
											"end": 5745,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5638,
											"end": 5755,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5433,
											"end": 5762,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5433,
											"end": 5762,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "tag",
											"source": 12,
											"value": "86"
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5836,
											"end": 5842,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5844,
											"end": 5850,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5893,
											"end": 5895,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5881,
											"end": 5890,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 5872,
											"end": 5879,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 5868,
											"end": 5891,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 5864,
											"end": 5896,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 5861,
											"end": 5980,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5861,
											"end": 5980,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "513"
										},
										{
											"begin": 5861,
											"end": 5980,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5899,
											"end": 5978,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "514"
										},
										{
											"begin": 5899,
											"end": 5978,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 5899,
											"end": 5978,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 5899,
											"end": 5978,
											"name": "tag",
											"source": 12,
											"value": "514"
										},
										{
											"begin": 5899,
											"end": 5978,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5861,
											"end": 5980,
											"name": "tag",
											"source": 12,
											"value": "513"
										},
										{
											"begin": 5861,
											"end": 5980,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6019,
											"end": 6020,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6044,
											"end": 6097,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "515"
										},
										{
											"begin": 6089,
											"end": 6096,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6080,
											"end": 6086,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6069,
											"end": 6078,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6065,
											"end": 6087,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6044,
											"end": 6097,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "421"
										},
										{
											"begin": 6044,
											"end": 6097,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6044,
											"end": 6097,
											"name": "tag",
											"source": 12,
											"value": "515"
										},
										{
											"begin": 6044,
											"end": 6097,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6034,
											"end": 6097,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6034,
											"end": 6097,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5990,
											"end": 6107,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6146,
											"end": 6148,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6172,
											"end": 6225,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "516"
										},
										{
											"begin": 6217,
											"end": 6224,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6208,
											"end": 6214,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6197,
											"end": 6206,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6193,
											"end": 6215,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6172,
											"end": 6225,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 6172,
											"end": 6225,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6172,
											"end": 6225,
											"name": "tag",
											"source": 12,
											"value": "516"
										},
										{
											"begin": 6172,
											"end": 6225,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6162,
											"end": 6225,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6162,
											"end": 6225,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6117,
											"end": 6235,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5768,
											"end": 6242,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5768,
											"end": 6242,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6248,
											"end": 6867,
											"name": "tag",
											"source": 12,
											"value": "117"
										},
										{
											"begin": 6248,
											"end": 6867,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6325,
											"end": 6331,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6333,
											"end": 6339,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6341,
											"end": 6347,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6390,
											"end": 6392,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 6378,
											"end": 6387,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6369,
											"end": 6376,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6365,
											"end": 6388,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6361,
											"end": 6393,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 6358,
											"end": 6477,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6358,
											"end": 6477,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "518"
										},
										{
											"begin": 6358,
											"end": 6477,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6396,
											"end": 6475,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "519"
										},
										{
											"begin": 6396,
											"end": 6475,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 6396,
											"end": 6475,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6396,
											"end": 6475,
											"name": "tag",
											"source": 12,
											"value": "519"
										},
										{
											"begin": 6396,
											"end": 6475,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6358,
											"end": 6477,
											"name": "tag",
											"source": 12,
											"value": "518"
										},
										{
											"begin": 6358,
											"end": 6477,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6516,
											"end": 6517,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6541,
											"end": 6594,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "520"
										},
										{
											"begin": 6586,
											"end": 6593,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6577,
											"end": 6583,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6566,
											"end": 6575,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 6562,
											"end": 6584,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6541,
											"end": 6594,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "421"
										},
										{
											"begin": 6541,
											"end": 6594,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6541,
											"end": 6594,
											"name": "tag",
											"source": 12,
											"value": "520"
										},
										{
											"begin": 6541,
											"end": 6594,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6531,
											"end": 6594,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 6531,
											"end": 6594,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6487,
											"end": 6604,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6643,
											"end": 6645,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6669,
											"end": 6722,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "521"
										},
										{
											"begin": 6714,
											"end": 6721,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6705,
											"end": 6711,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6694,
											"end": 6703,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 6690,
											"end": 6712,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6669,
											"end": 6722,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 6669,
											"end": 6722,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6669,
											"end": 6722,
											"name": "tag",
											"source": 12,
											"value": "521"
										},
										{
											"begin": 6669,
											"end": 6722,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6659,
											"end": 6722,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6659,
											"end": 6722,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6614,
											"end": 6732,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6771,
											"end": 6773,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6797,
											"end": 6850,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "522"
										},
										{
											"begin": 6842,
											"end": 6849,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6833,
											"end": 6839,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6822,
											"end": 6831,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 6818,
											"end": 6840,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6797,
											"end": 6850,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 6797,
											"end": 6850,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6797,
											"end": 6850,
											"name": "tag",
											"source": 12,
											"value": "522"
										},
										{
											"begin": 6797,
											"end": 6850,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6787,
											"end": 6850,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6787,
											"end": 6850,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6742,
											"end": 6860,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6248,
											"end": 6867,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6248,
											"end": 6867,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6248,
											"end": 6867,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6248,
											"end": 6867,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6248,
											"end": 6867,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6248,
											"end": 6867,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6873,
											"end": 7347,
											"name": "tag",
											"source": 12,
											"value": "142"
										},
										{
											"begin": 6873,
											"end": 7347,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6941,
											"end": 6947,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6949,
											"end": 6955,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6998,
											"end": 7000,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6986,
											"end": 6995,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6977,
											"end": 6984,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6973,
											"end": 6996,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6969,
											"end": 7001,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 6966,
											"end": 7085,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6966,
											"end": 7085,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "524"
										},
										{
											"begin": 6966,
											"end": 7085,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7004,
											"end": 7083,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "525"
										},
										{
											"begin": 7004,
											"end": 7083,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 7004,
											"end": 7083,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7004,
											"end": 7083,
											"name": "tag",
											"source": 12,
											"value": "525"
										},
										{
											"begin": 7004,
											"end": 7083,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6966,
											"end": 7085,
											"name": "tag",
											"source": 12,
											"value": "524"
										},
										{
											"begin": 6966,
											"end": 7085,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7124,
											"end": 7125,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7149,
											"end": 7202,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "526"
										},
										{
											"begin": 7194,
											"end": 7201,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 7185,
											"end": 7191,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7174,
											"end": 7183,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 7170,
											"end": 7192,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7149,
											"end": 7202,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 7149,
											"end": 7202,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7149,
											"end": 7202,
											"name": "tag",
											"source": 12,
											"value": "526"
										},
										{
											"begin": 7149,
											"end": 7202,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7139,
											"end": 7202,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7139,
											"end": 7202,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7095,
											"end": 7212,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7251,
											"end": 7253,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7277,
											"end": 7330,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "527"
										},
										{
											"begin": 7322,
											"end": 7329,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 7313,
											"end": 7319,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7302,
											"end": 7311,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 7298,
											"end": 7320,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7277,
											"end": 7330,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "425"
										},
										{
											"begin": 7277,
											"end": 7330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7277,
											"end": 7330,
											"name": "tag",
											"source": 12,
											"value": "527"
										},
										{
											"begin": 7277,
											"end": 7330,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7267,
											"end": 7330,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7267,
											"end": 7330,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7222,
											"end": 7340,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6873,
											"end": 7347,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6873,
											"end": 7347,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6873,
											"end": 7347,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6873,
											"end": 7347,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6873,
											"end": 7347,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6873,
											"end": 7347,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7353,
											"end": 7496,
											"name": "tag",
											"source": 12,
											"value": "431"
										},
										{
											"begin": 7353,
											"end": 7496,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7410,
											"end": 7415,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7441,
											"end": 7447,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7435,
											"end": 7448,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7426,
											"end": 7448,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7426,
											"end": 7448,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7457,
											"end": 7490,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "529"
										},
										{
											"begin": 7484,
											"end": 7489,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7457,
											"end": 7490,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "420"
										},
										{
											"begin": 7457,
											"end": 7490,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7457,
											"end": 7490,
											"name": "tag",
											"source": 12,
											"value": "529"
										},
										{
											"begin": 7457,
											"end": 7490,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7353,
											"end": 7496,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7353,
											"end": 7496,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7353,
											"end": 7496,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7353,
											"end": 7496,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7353,
											"end": 7496,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7502,
											"end": 7853,
											"name": "tag",
											"source": 12,
											"value": "154"
										},
										{
											"begin": 7502,
											"end": 7853,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7572,
											"end": 7578,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7621,
											"end": 7623,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 7609,
											"end": 7618,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7600,
											"end": 7607,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7596,
											"end": 7619,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 7592,
											"end": 7624,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 7589,
											"end": 7708,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7589,
											"end": 7708,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "531"
										},
										{
											"begin": 7589,
											"end": 7708,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7627,
											"end": 7706,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "532"
										},
										{
											"begin": 7627,
											"end": 7706,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 7627,
											"end": 7706,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7627,
											"end": 7706,
											"name": "tag",
											"source": 12,
											"value": "532"
										},
										{
											"begin": 7627,
											"end": 7706,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7589,
											"end": 7708,
											"name": "tag",
											"source": 12,
											"value": "531"
										},
										{
											"begin": 7589,
											"end": 7708,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7747,
											"end": 7748,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7772,
											"end": 7836,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "533"
										},
										{
											"begin": 7828,
											"end": 7835,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 7819,
											"end": 7825,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7808,
											"end": 7817,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 7804,
											"end": 7826,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7772,
											"end": 7836,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "431"
										},
										{
											"begin": 7772,
											"end": 7836,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7772,
											"end": 7836,
											"name": "tag",
											"source": 12,
											"value": "533"
										},
										{
											"begin": 7772,
											"end": 7836,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7762,
											"end": 7836,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7762,
											"end": 7836,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7718,
											"end": 7846,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7502,
											"end": 7853,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 7502,
											"end": 7853,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7502,
											"end": 7853,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7502,
											"end": 7853,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7502,
											"end": 7853,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7859,
											"end": 8039,
											"name": "tag",
											"source": 12,
											"value": "432"
										},
										{
											"begin": 7859,
											"end": 8039,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7907,
											"end": 7984,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7904,
											"end": 7905,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7897,
											"end": 7985,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8004,
											"end": 8008,
											"name": "PUSH",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 8001,
											"end": 8002,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7994,
											"end": 8009,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8028,
											"end": 8032,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 8025,
											"end": 8026,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8018,
											"end": 8033,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8045,
											"end": 8365,
											"name": "tag",
											"source": 12,
											"value": "157"
										},
										{
											"begin": 8045,
											"end": 8365,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8089,
											"end": 8095,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8126,
											"end": 8127,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 8120,
											"end": 8124,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8116,
											"end": 8128,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 8106,
											"end": 8128,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8106,
											"end": 8128,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8173,
											"end": 8174,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 8167,
											"end": 8171,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8163,
											"end": 8175,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8194,
											"end": 8212,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8265,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "536"
										},
										{
											"begin": 8184,
											"end": 8265,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8250,
											"end": 8254,
											"name": "PUSH",
											"source": 12,
											"value": "7F"
										},
										{
											"begin": 8242,
											"end": 8248,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8238,
											"end": 8255,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 8228,
											"end": 8255,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8228,
											"end": 8255,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8184,
											"end": 8265,
											"name": "tag",
											"source": 12,
											"value": "536"
										},
										{
											"begin": 8184,
											"end": 8265,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8312,
											"end": 8314,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8304,
											"end": 8310,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8301,
											"end": 8315,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 8281,
											"end": 8299,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8278,
											"end": 8316,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8275,
											"end": 8359,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "537"
										},
										{
											"begin": 8275,
											"end": 8359,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8331,
											"end": 8349,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "538"
										},
										{
											"begin": 8331,
											"end": 8349,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "432"
										},
										{
											"begin": 8331,
											"end": 8349,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8331,
											"end": 8349,
											"name": "tag",
											"source": 12,
											"value": "538"
										},
										{
											"begin": 8331,
											"end": 8349,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8275,
											"end": 8359,
											"name": "tag",
											"source": 12,
											"value": "537"
										},
										{
											"begin": 8275,
											"end": 8359,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8096,
											"end": 8365,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8045,
											"end": 8365,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8045,
											"end": 8365,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8045,
											"end": 8365,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8045,
											"end": 8365,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8371,
											"end": 8551,
											"name": "tag",
											"source": 12,
											"value": "433"
										},
										{
											"begin": 8371,
											"end": 8551,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8419,
											"end": 8496,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8416,
											"end": 8417,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8409,
											"end": 8497,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8516,
											"end": 8520,
											"name": "PUSH",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 8513,
											"end": 8514,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8506,
											"end": 8521,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8540,
											"end": 8544,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 8537,
											"end": 8538,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8530,
											"end": 8545,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 8557,
											"end": 8751,
											"name": "tag",
											"source": 12,
											"value": "175"
										},
										{
											"begin": 8557,
											"end": 8751,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8597,
											"end": 8601,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8617,
											"end": 8637,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "541"
										},
										{
											"begin": 8635,
											"end": 8636,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8617,
											"end": 8637,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "410"
										},
										{
											"begin": 8617,
											"end": 8637,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8617,
											"end": 8637,
											"name": "tag",
											"source": 12,
											"value": "541"
										},
										{
											"begin": 8617,
											"end": 8637,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8612,
											"end": 8637,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8612,
											"end": 8637,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8651,
											"end": 8671,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "542"
										},
										{
											"begin": 8669,
											"end": 8670,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8651,
											"end": 8671,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "410"
										},
										{
											"begin": 8651,
											"end": 8671,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8651,
											"end": 8671,
											"name": "tag",
											"source": 12,
											"value": "542"
										},
										{
											"begin": 8651,
											"end": 8671,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8646,
											"end": 8671,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8646,
											"end": 8671,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8695,
											"end": 8696,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8692,
											"end": 8693,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8688,
											"end": 8697,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 8680,
											"end": 8697,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8680,
											"end": 8697,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8719,
											"end": 8720,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8713,
											"end": 8717,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8710,
											"end": 8721,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 8707,
											"end": 8744,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8707,
											"end": 8744,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "543"
										},
										{
											"begin": 8707,
											"end": 8744,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8724,
											"end": 8742,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "544"
										},
										{
											"begin": 8724,
											"end": 8742,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "433"
										},
										{
											"begin": 8724,
											"end": 8742,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8724,
											"end": 8742,
											"name": "tag",
											"source": 12,
											"value": "544"
										},
										{
											"begin": 8724,
											"end": 8742,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8707,
											"end": 8744,
											"name": "tag",
											"source": 12,
											"value": "543"
										},
										{
											"begin": 8707,
											"end": 8744,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8557,
											"end": 8751,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8557,
											"end": 8751,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8557,
											"end": 8751,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8557,
											"end": 8751,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8557,
											"end": 8751,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8757,
											"end": 8945,
											"name": "tag",
											"source": 12,
											"value": "187"
										},
										{
											"begin": 8757,
											"end": 8945,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8795,
											"end": 8798,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8814,
											"end": 8832,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "546"
										},
										{
											"begin": 8830,
											"end": 8831,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8832,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "428"
										},
										{
											"begin": 8814,
											"end": 8832,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8814,
											"end": 8832,
											"name": "tag",
											"source": 12,
											"value": "546"
										},
										{
											"begin": 8814,
											"end": 8832,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8809,
											"end": 8832,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8809,
											"end": 8832,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8846,
											"end": 8864,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "547"
										},
										{
											"begin": 8862,
											"end": 8863,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8846,
											"end": 8864,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "428"
										},
										{
											"begin": 8846,
											"end": 8864,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8846,
											"end": 8864,
											"name": "tag",
											"source": 12,
											"value": "547"
										},
										{
											"begin": 8846,
											"end": 8864,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8841,
											"end": 8864,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8841,
											"end": 8864,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8887,
											"end": 8888,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8884,
											"end": 8885,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8880,
											"end": 8889,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8873,
											"end": 8889,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8873,
											"end": 8889,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8910,
											"end": 8914,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 8905,
											"end": 8908,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8902,
											"end": 8915,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 8899,
											"end": 8938,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8899,
											"end": 8938,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "548"
										},
										{
											"begin": 8899,
											"end": 8938,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8918,
											"end": 8936,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "549"
										},
										{
											"begin": 8918,
											"end": 8936,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "433"
										},
										{
											"begin": 8918,
											"end": 8936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8918,
											"end": 8936,
											"name": "tag",
											"source": 12,
											"value": "549"
										},
										{
											"begin": 8918,
											"end": 8936,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8899,
											"end": 8938,
											"name": "tag",
											"source": 12,
											"value": "548"
										},
										{
											"begin": 8899,
											"end": 8938,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8757,
											"end": 8945,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8757,
											"end": 8945,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8757,
											"end": 8945,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8757,
											"end": 8945,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8757,
											"end": 8945,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8951,
											"end": 9142,
											"name": "tag",
											"source": 12,
											"value": "196"
										},
										{
											"begin": 8951,
											"end": 9142,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8991,
											"end": 8994,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9010,
											"end": 9030,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "551"
										},
										{
											"begin": 9028,
											"end": 9029,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9010,
											"end": 9030,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "410"
										},
										{
											"begin": 9010,
											"end": 9030,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9010,
											"end": 9030,
											"name": "tag",
											"source": 12,
											"value": "551"
										},
										{
											"begin": 9010,
											"end": 9030,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9005,
											"end": 9030,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9005,
											"end": 9030,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9044,
											"end": 9064,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "552"
										},
										{
											"begin": 9062,
											"end": 9063,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9044,
											"end": 9064,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "410"
										},
										{
											"begin": 9044,
											"end": 9064,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9044,
											"end": 9064,
											"name": "tag",
											"source": 12,
											"value": "552"
										},
										{
											"begin": 9044,
											"end": 9064,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9039,
											"end": 9064,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 9039,
											"end": 9064,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9087,
											"end": 9088,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9084,
											"end": 9085,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9080,
											"end": 9089,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9073,
											"end": 9089,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9073,
											"end": 9089,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9108,
											"end": 9111,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9105,
											"end": 9106,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9102,
											"end": 9112,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 9099,
											"end": 9135,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9099,
											"end": 9135,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "553"
										},
										{
											"begin": 9099,
											"end": 9135,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9115,
											"end": 9133,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "554"
										},
										{
											"begin": 9115,
											"end": 9133,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "433"
										},
										{
											"begin": 9115,
											"end": 9133,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9115,
											"end": 9133,
											"name": "tag",
											"source": 12,
											"value": "554"
										},
										{
											"begin": 9115,
											"end": 9133,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9099,
											"end": 9135,
											"name": "tag",
											"source": 12,
											"value": "553"
										},
										{
											"begin": 9099,
											"end": 9135,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8951,
											"end": 9142,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8951,
											"end": 9142,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8951,
											"end": 9142,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8951,
											"end": 9142,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8951,
											"end": 9142,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9148,
											"end": 9590,
											"name": "tag",
											"source": 12,
											"value": "203"
										},
										{
											"begin": 9148,
											"end": 9590,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9297,
											"end": 9301,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9335,
											"end": 9337,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 9324,
											"end": 9333,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9320,
											"end": 9338,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9312,
											"end": 9338,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9312,
											"end": 9338,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9348,
											"end": 9419,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "556"
										},
										{
											"begin": 9416,
											"end": 9417,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9405,
											"end": 9414,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9401,
											"end": 9418,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9392,
											"end": 9398,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 9348,
											"end": 9419,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "430"
										},
										{
											"begin": 9348,
											"end": 9419,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9348,
											"end": 9419,
											"name": "tag",
											"source": 12,
											"value": "556"
										},
										{
											"begin": 9348,
											"end": 9419,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9429,
											"end": 9501,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "557"
										},
										{
											"begin": 9497,
											"end": 9499,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9486,
											"end": 9495,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9482,
											"end": 9500,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9473,
											"end": 9479,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 9429,
											"end": 9501,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "411"
										},
										{
											"begin": 9429,
											"end": 9501,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9429,
											"end": 9501,
											"name": "tag",
											"source": 12,
											"value": "557"
										},
										{
											"begin": 9429,
											"end": 9501,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9511,
											"end": 9583,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "558"
										},
										{
											"begin": 9579,
											"end": 9581,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9568,
											"end": 9577,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9564,
											"end": 9582,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9555,
											"end": 9561,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 9511,
											"end": 9583,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "411"
										},
										{
											"begin": 9511,
											"end": 9583,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9511,
											"end": 9583,
											"name": "tag",
											"source": 12,
											"value": "558"
										},
										{
											"begin": 9511,
											"end": 9583,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9148,
											"end": 9590,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 9148,
											"end": 9590,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 9148,
											"end": 9590,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9148,
											"end": 9590,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9148,
											"end": 9590,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9148,
											"end": 9590,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9148,
											"end": 9590,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9596,
											"end": 9773,
											"name": "tag",
											"source": 12,
											"value": "434"
										},
										{
											"begin": 9596,
											"end": 9773,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9736,
											"end": 9765,
											"name": "PUSH",
											"source": 12,
											"value": "45786365656473206D617820776974686472617720616D6F756E740000000000"
										},
										{
											"begin": 9732,
											"end": 9733,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9724,
											"end": 9730,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9720,
											"end": 9734,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9713,
											"end": 9766,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 9596,
											"end": 9773,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9596,
											"end": 9773,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9779,
											"end": 10145,
											"name": "tag",
											"source": 12,
											"value": "435"
										},
										{
											"begin": 9779,
											"end": 10145,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9921,
											"end": 9924,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9942,
											"end": 10009,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "561"
										},
										{
											"begin": 10006,
											"end": 10008,
											"name": "PUSH",
											"source": 12,
											"value": "1B"
										},
										{
											"begin": 10001,
											"end": 10004,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 9942,
											"end": 10009,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "413"
										},
										{
											"begin": 9942,
											"end": 10009,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 9942,
											"end": 10009,
											"name": "tag",
											"source": 12,
											"value": "561"
										},
										{
											"begin": 9942,
											"end": 10009,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9935,
											"end": 10009,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9935,
											"end": 10009,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10018,
											"end": 10111,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "562"
										},
										{
											"begin": 10107,
											"end": 10110,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10018,
											"end": 10111,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "434"
										},
										{
											"begin": 10018,
											"end": 10111,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10018,
											"end": 10111,
											"name": "tag",
											"source": 12,
											"value": "562"
										},
										{
											"begin": 10018,
											"end": 10111,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10136,
											"end": 10138,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10131,
											"end": 10134,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10127,
											"end": 10139,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10120,
											"end": 10139,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10120,
											"end": 10139,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9779,
											"end": 10145,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9779,
											"end": 10145,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 9779,
											"end": 10145,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9779,
											"end": 10145,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10151,
											"end": 10570,
											"name": "tag",
											"source": 12,
											"value": "223"
										},
										{
											"begin": 10151,
											"end": 10570,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10317,
											"end": 10321,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10355,
											"end": 10357,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10344,
											"end": 10353,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10340,
											"end": 10358,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10332,
											"end": 10358,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10332,
											"end": 10358,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10404,
											"end": 10413,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10398,
											"end": 10402,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10394,
											"end": 10414,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 10390,
											"end": 10391,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10379,
											"end": 10388,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10375,
											"end": 10392,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10368,
											"end": 10415,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10432,
											"end": 10563,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "564"
										},
										{
											"begin": 10558,
											"end": 10562,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10432,
											"end": 10563,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "435"
										},
										{
											"begin": 10432,
											"end": 10563,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10432,
											"end": 10563,
											"name": "tag",
											"source": 12,
											"value": "564"
										},
										{
											"begin": 10432,
											"end": 10563,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10424,
											"end": 10563,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10424,
											"end": 10563,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10151,
											"end": 10570,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10151,
											"end": 10570,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10151,
											"end": 10570,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10151,
											"end": 10570,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10576,
											"end": 10796,
											"name": "tag",
											"source": 12,
											"value": "436"
										},
										{
											"begin": 10576,
											"end": 10796,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10716,
											"end": 10750,
											"name": "PUSH",
											"source": 12,
											"value": "43616E6E6F74207769746864726177206C6F636B656420636F6C6C6174657261"
										},
										{
											"begin": 10712,
											"end": 10713,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10704,
											"end": 10710,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10700,
											"end": 10714,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10693,
											"end": 10751,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10785,
											"end": 10788,
											"name": "PUSH",
											"source": 12,
											"value": "6C00000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10780,
											"end": 10782,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10772,
											"end": 10778,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10768,
											"end": 10783,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10761,
											"end": 10789,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10576,
											"end": 10796,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10576,
											"end": 10796,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10802,
											"end": 11168,
											"name": "tag",
											"source": 12,
											"value": "437"
										},
										{
											"begin": 10802,
											"end": 11168,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10944,
											"end": 10947,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10965,
											"end": 11032,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "567"
										},
										{
											"begin": 11029,
											"end": 11031,
											"name": "PUSH",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 11024,
											"end": 11027,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10965,
											"end": 11032,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "413"
										},
										{
											"begin": 10965,
											"end": 11032,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 10965,
											"end": 11032,
											"name": "tag",
											"source": 12,
											"value": "567"
										},
										{
											"begin": 10965,
											"end": 11032,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10958,
											"end": 11032,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10958,
											"end": 11032,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11041,
											"end": 11134,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "568"
										},
										{
											"begin": 11130,
											"end": 11133,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11041,
											"end": 11134,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "436"
										},
										{
											"begin": 11041,
											"end": 11134,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11041,
											"end": 11134,
											"name": "tag",
											"source": 12,
											"value": "568"
										},
										{
											"begin": 11041,
											"end": 11134,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11159,
											"end": 11161,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 11154,
											"end": 11157,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11150,
											"end": 11162,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11143,
											"end": 11162,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11143,
											"end": 11162,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10802,
											"end": 11168,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10802,
											"end": 11168,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10802,
											"end": 11168,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10802,
											"end": 11168,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11174,
											"end": 11593,
											"name": "tag",
											"source": 12,
											"value": "226"
										},
										{
											"begin": 11174,
											"end": 11593,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11340,
											"end": 11344,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11378,
											"end": 11380,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 11367,
											"end": 11376,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11363,
											"end": 11381,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11355,
											"end": 11381,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11355,
											"end": 11381,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11427,
											"end": 11436,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11421,
											"end": 11425,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11417,
											"end": 11437,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 11413,
											"end": 11414,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11402,
											"end": 11411,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 11398,
											"end": 11415,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11391,
											"end": 11438,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 11455,
											"end": 11586,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "570"
										},
										{
											"begin": 11581,
											"end": 11585,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11455,
											"end": 11586,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "437"
										},
										{
											"begin": 11455,
											"end": 11586,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11455,
											"end": 11586,
											"name": "tag",
											"source": 12,
											"value": "570"
										},
										{
											"begin": 11455,
											"end": 11586,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11447,
											"end": 11586,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11447,
											"end": 11586,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11174,
											"end": 11593,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 11174,
											"end": 11593,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11174,
											"end": 11593,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11174,
											"end": 11593,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11599,
											"end": 11701,
											"name": "tag",
											"source": 12,
											"value": "438"
										},
										{
											"begin": 11599,
											"end": 11701,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11641,
											"end": 11649,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11688,
											"end": 11693,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11685,
											"end": 11686,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 11681,
											"end": 11694,
											"name": "SHR",
											"source": 12
										},
										{
											"begin": 11660,
											"end": 11694,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11660,
											"end": 11694,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11599,
											"end": 11701,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 11599,
											"end": 11701,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11599,
											"end": 11701,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11599,
											"end": 11701,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11707,
											"end": 12555,
											"name": "tag",
											"source": 12,
											"value": "439"
										},
										{
											"begin": 11707,
											"end": 12555,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11768,
											"end": 11773,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11775,
											"end": 11779,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11799,
											"end": 11805,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11790,
											"end": 11805,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 11790,
											"end": 11805,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11823,
											"end": 11828,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 11814,
											"end": 11828,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11814,
											"end": 11828,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11837,
											"end": 12549,
											"name": "tag",
											"source": 12,
											"value": "573"
										},
										{
											"begin": 11837,
											"end": 12549,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11858,
											"end": 11859,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 11848,
											"end": 11856,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 11845,
											"end": 11860,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 11837,
											"end": 12549,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11837,
											"end": 12549,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "575"
										},
										{
											"begin": 11837,
											"end": 12549,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 11953,
											"end": 11957,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11948,
											"end": 11951,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 11944,
											"end": 11958,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 11938,
											"end": 11942,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11935,
											"end": 11959,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 11932,
											"end": 11982,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11932,
											"end": 11982,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "576"
										},
										{
											"begin": 11932,
											"end": 11982,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 11962,
											"end": 11980,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "577"
										},
										{
											"begin": 11962,
											"end": 11980,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "433"
										},
										{
											"begin": 11962,
											"end": 11980,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11962,
											"end": 11980,
											"name": "tag",
											"source": 12,
											"value": "577"
										},
										{
											"begin": 11962,
											"end": 11980,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11932,
											"end": 11982,
											"name": "tag",
											"source": 12,
											"value": "576"
										},
										{
											"begin": 11932,
											"end": 11982,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12012,
											"end": 12013,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 12002,
											"end": 12010,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 11998,
											"end": 12014,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 11995,
											"end": 12446,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 11995,
											"end": 12446,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "578"
										},
										{
											"begin": 11995,
											"end": 12446,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 12427,
											"end": 12431,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 12420,
											"end": 12425,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12416,
											"end": 12432,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 12407,
											"end": 12432,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12407,
											"end": 12432,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11995,
											"end": 12446,
											"name": "tag",
											"source": 12,
											"value": "578"
										},
										{
											"begin": 11995,
											"end": 12446,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12477,
											"end": 12481,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 12471,
											"end": 12475,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12467,
											"end": 12482,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 12459,
											"end": 12482,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12459,
											"end": 12482,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12507,
											"end": 12539,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "579"
										},
										{
											"begin": 12530,
											"end": 12538,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 12507,
											"end": 12539,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "438"
										},
										{
											"begin": 12507,
											"end": 12539,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 12507,
											"end": 12539,
											"name": "tag",
											"source": 12,
											"value": "579"
										},
										{
											"begin": 12507,
											"end": 12539,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12495,
											"end": 12539,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 12495,
											"end": 12539,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11837,
											"end": 12549,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "573"
										},
										{
											"begin": 11837,
											"end": 12549,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 11837,
											"end": 12549,
											"name": "tag",
											"source": 12,
											"value": "575"
										},
										{
											"begin": 11837,
											"end": 12549,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11707,
											"end": 12555,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 11707,
											"end": 12555,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11707,
											"end": 12555,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 11707,
											"end": 12555,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 11707,
											"end": 12555,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11707,
											"end": 12555,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11707,
											"end": 12555,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11707,
											"end": 12555,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 12561,
											"end": 13634,
											"name": "tag",
											"source": 12,
											"value": "440"
										},
										{
											"begin": 12561,
											"end": 13634,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12615,
											"end": 12620,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12806,
											"end": 12814,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12796,
											"end": 12836,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "581"
										},
										{
											"begin": 12796,
											"end": 12836,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 12827,
											"end": 12828,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 12818,
											"end": 12828,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12818,
											"end": 12828,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12829,
											"end": 12834,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "580"
										},
										{
											"begin": 12829,
											"end": 12834,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 12796,
											"end": 12836,
											"name": "tag",
											"source": 12,
											"value": "581"
										},
										{
											"begin": 12796,
											"end": 12836,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12855,
											"end": 12859,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12845,
											"end": 12881,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "582"
										},
										{
											"begin": 12845,
											"end": 12881,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 12872,
											"end": 12873,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12863,
											"end": 12873,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12863,
											"end": 12873,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12874,
											"end": 12879,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "580"
										},
										{
											"begin": 12874,
											"end": 12879,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 12845,
											"end": 12881,
											"name": "tag",
											"source": 12,
											"value": "582"
										},
										{
											"begin": 12845,
											"end": 12881,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12941,
											"end": 12945,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12989,
											"end": 12990,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 12984,
											"end": 13011,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12984,
											"end": 13011,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 12984,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "584"
										},
										{
											"begin": 12984,
											"end": 13011,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 13025,
											"end": 13026,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 13020,
											"end": 13211,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13020,
											"end": 13211,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 13020,
											"end": 13211,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "585"
										},
										{
											"begin": 13020,
											"end": 13211,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 12934,
											"end": 13211,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "583"
										},
										{
											"begin": 12934,
											"end": 13211,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 12984,
											"end": 13011,
											"name": "tag",
											"source": 12,
											"value": "584"
										},
										{
											"begin": 12984,
											"end": 13011,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13002,
											"end": 13003,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 12993,
											"end": 13003,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12993,
											"end": 13003,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13004,
											"end": 13009,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13004,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "580"
										},
										{
											"begin": 13004,
											"end": 13009,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13020,
											"end": 13211,
											"name": "tag",
											"source": 12,
											"value": "585"
										},
										{
											"begin": 13020,
											"end": 13211,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13065,
											"end": 13068,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 13055,
											"end": 13063,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 13052,
											"end": 13069,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 13049,
											"end": 13092,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 13049,
											"end": 13092,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "586"
										},
										{
											"begin": 13049,
											"end": 13092,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 13072,
											"end": 13090,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "587"
										},
										{
											"begin": 13072,
											"end": 13090,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "433"
										},
										{
											"begin": 13072,
											"end": 13090,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13072,
											"end": 13090,
											"name": "tag",
											"source": 12,
											"value": "587"
										},
										{
											"begin": 13072,
											"end": 13090,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13049,
											"end": 13092,
											"name": "tag",
											"source": 12,
											"value": "586"
										},
										{
											"begin": 13049,
											"end": 13092,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13121,
											"end": 13129,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 13118,
											"end": 13119,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 13114,
											"end": 13130,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 13105,
											"end": 13130,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13105,
											"end": 13130,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13156,
											"end": 13159,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 13149,
											"end": 13154,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13146,
											"end": 13160,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 13143,
											"end": 13183,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 13143,
											"end": 13183,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "588"
										},
										{
											"begin": 13143,
											"end": 13183,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 13163,
											"end": 13181,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "589"
										},
										{
											"begin": 13163,
											"end": 13181,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "433"
										},
										{
											"begin": 13163,
											"end": 13181,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13163,
											"end": 13181,
											"name": "tag",
											"source": 12,
											"value": "589"
										},
										{
											"begin": 13163,
											"end": 13181,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13143,
											"end": 13183,
											"name": "tag",
											"source": 12,
											"value": "588"
										},
										{
											"begin": 13143,
											"end": 13183,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13196,
											"end": 13201,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13196,
											"end": 13201,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "580"
										},
										{
											"begin": 13196,
											"end": 13201,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 12934,
											"end": 13211,
											"name": "tag",
											"source": 12,
											"value": "583"
										},
										{
											"begin": 12934,
											"end": 13211,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12934,
											"end": 13211,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13320,
											"end": 13322,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 13310,
											"end": 13318,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 13307,
											"end": 13323,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 13301,
											"end": 13304,
											"name": "PUSH",
											"source": 12,
											"value": "133"
										},
										{
											"begin": 13295,
											"end": 13299,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 13292,
											"end": 13305,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 13288,
											"end": 13324,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 13270,
											"end": 13272,
											"name": "PUSH",
											"source": 12,
											"value": "4E"
										},
										{
											"begin": 13260,
											"end": 13268,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 13257,
											"end": 13273,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 13252,
											"end": 13254,
											"name": "PUSH",
											"source": 12,
											"value": "B"
										},
										{
											"begin": 13246,
											"end": 13250,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 13243,
											"end": 13255,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 13239,
											"end": 13274,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 13223,
											"end": 13334,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 13220,
											"end": 13466,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 13220,
											"end": 13466,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "590"
										},
										{
											"begin": 13220,
											"end": 13466,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 13376,
											"end": 13384,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13370,
											"end": 13374,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13366,
											"end": 13385,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 13357,
											"end": 13385,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13357,
											"end": 13385,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13411,
											"end": 13414,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 13404,
											"end": 13409,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13401,
											"end": 13415,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 13398,
											"end": 13438,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 13398,
											"end": 13438,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "591"
										},
										{
											"begin": 13398,
											"end": 13438,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 13418,
											"end": 13436,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "592"
										},
										{
											"begin": 13418,
											"end": 13436,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "433"
										},
										{
											"begin": 13418,
											"end": 13436,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13418,
											"end": 13436,
											"name": "tag",
											"source": 12,
											"value": "592"
										},
										{
											"begin": 13418,
											"end": 13436,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13398,
											"end": 13438,
											"name": "tag",
											"source": 12,
											"value": "591"
										},
										{
											"begin": 13398,
											"end": 13438,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13451,
											"end": 13456,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "580"
										},
										{
											"begin": 13451,
											"end": 13456,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13220,
											"end": 13466,
											"name": "tag",
											"source": 12,
											"value": "590"
										},
										{
											"begin": 13220,
											"end": 13466,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13491,
											"end": 13533,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "593"
										},
										{
											"begin": 13529,
											"end": 13532,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 13519,
											"end": 13527,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 13513,
											"end": 13517,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 13510,
											"end": 13511,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 13491,
											"end": 13533,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "439"
										},
										{
											"begin": 13491,
											"end": 13533,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13491,
											"end": 13533,
											"name": "tag",
											"source": 12,
											"value": "593"
										},
										{
											"begin": 13491,
											"end": 13533,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13476,
											"end": 13533,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 13476,
											"end": 13533,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13476,
											"end": 13533,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13476,
											"end": 13533,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13565,
											"end": 13569,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13560,
											"end": 13563,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 13556,
											"end": 13570,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 13549,
											"end": 13554,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13546,
											"end": 13571,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 13543,
											"end": 13594,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 13543,
											"end": 13594,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "594"
										},
										{
											"begin": 13543,
											"end": 13594,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 13574,
											"end": 13592,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "595"
										},
										{
											"begin": 13574,
											"end": 13592,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "433"
										},
										{
											"begin": 13574,
											"end": 13592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13574,
											"end": 13592,
											"name": "tag",
											"source": 12,
											"value": "595"
										},
										{
											"begin": 13574,
											"end": 13592,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13543,
											"end": 13594,
											"name": "tag",
											"source": 12,
											"value": "594"
										},
										{
											"begin": 13543,
											"end": 13594,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13623,
											"end": 13627,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13616,
											"end": 13621,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13612,
											"end": 13628,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 13603,
											"end": 13628,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13603,
											"end": 13628,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12561,
											"end": 13634,
											"name": "tag",
											"source": 12,
											"value": "580"
										},
										{
											"begin": 12561,
											"end": 13634,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12561,
											"end": 13634,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 12561,
											"end": 13634,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 12561,
											"end": 13634,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12561,
											"end": 13634,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12561,
											"end": 13634,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12561,
											"end": 13634,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13640,
											"end": 13921,
											"name": "tag",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 13640,
											"end": 13921,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13698,
											"end": 13703,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13722,
											"end": 13745,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "597"
										},
										{
											"begin": 13740,
											"end": 13744,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13722,
											"end": 13745,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "410"
										},
										{
											"begin": 13722,
											"end": 13745,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13722,
											"end": 13745,
											"name": "tag",
											"source": 12,
											"value": "597"
										},
										{
											"begin": 13722,
											"end": 13745,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13714,
											"end": 13745,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13714,
											"end": 13745,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13766,
											"end": 13791,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "598"
										},
										{
											"begin": 13782,
											"end": 13790,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 13766,
											"end": 13791,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "428"
										},
										{
											"begin": 13766,
											"end": 13791,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13766,
											"end": 13791,
											"name": "tag",
											"source": 12,
											"value": "598"
										},
										{
											"begin": 13766,
											"end": 13791,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13754,
											"end": 13791,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 13754,
											"end": 13791,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13810,
											"end": 13914,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "599"
										},
										{
											"begin": 13847,
											"end": 13913,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13837,
											"end": 13845,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 13831,
											"end": 13835,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 13810,
											"end": 13914,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "440"
										},
										{
											"begin": 13810,
											"end": 13914,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13810,
											"end": 13914,
											"name": "tag",
											"source": 12,
											"value": "599"
										},
										{
											"begin": 13810,
											"end": 13914,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13801,
											"end": 13914,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13801,
											"end": 13914,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13640,
											"end": 13921,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 13640,
											"end": 13921,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13640,
											"end": 13921,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13640,
											"end": 13921,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13640,
											"end": 13921,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 13927,
											"end": 14259,
											"name": "tag",
											"source": 12,
											"value": "296"
										},
										{
											"begin": 13927,
											"end": 14259,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14048,
											"end": 14052,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14086,
											"end": 14088,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14075,
											"end": 14084,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 14071,
											"end": 14089,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14063,
											"end": 14089,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14063,
											"end": 14089,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14099,
											"end": 14170,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "601"
										},
										{
											"begin": 14167,
											"end": 14168,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14156,
											"end": 14165,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 14152,
											"end": 14169,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14143,
											"end": 14149,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 14099,
											"end": 14170,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "411"
										},
										{
											"begin": 14099,
											"end": 14170,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14099,
											"end": 14170,
											"name": "tag",
											"source": 12,
											"value": "601"
										},
										{
											"begin": 14099,
											"end": 14170,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14180,
											"end": 14252,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "602"
										},
										{
											"begin": 14248,
											"end": 14250,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 14237,
											"end": 14246,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 14233,
											"end": 14251,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14224,
											"end": 14230,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 14180,
											"end": 14252,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "411"
										},
										{
											"begin": 14180,
											"end": 14252,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14180,
											"end": 14252,
											"name": "tag",
											"source": 12,
											"value": "602"
										},
										{
											"begin": 14180,
											"end": 14252,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13927,
											"end": 14259,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 13927,
											"end": 14259,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 13927,
											"end": 14259,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13927,
											"end": 14259,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13927,
											"end": 14259,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13927,
											"end": 14259,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14265,
											"end": 14445,
											"name": "tag",
											"source": 12,
											"value": "331"
										},
										{
											"begin": 14265,
											"end": 14445,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14313,
											"end": 14390,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 14310,
											"end": 14311,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14303,
											"end": 14391,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 14410,
											"end": 14414,
											"name": "PUSH",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 14407,
											"end": 14408,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 14400,
											"end": 14415,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 14434,
											"end": 14438,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 14431,
											"end": 14432,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14424,
											"end": 14439,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 14451,
											"end": 14893,
											"name": "tag",
											"source": 12,
											"value": "353"
										},
										{
											"begin": 14451,
											"end": 14893,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14600,
											"end": 14604,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14638,
											"end": 14640,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 14627,
											"end": 14636,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 14623,
											"end": 14641,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14615,
											"end": 14641,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14615,
											"end": 14641,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14651,
											"end": 14722,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "605"
										},
										{
											"begin": 14719,
											"end": 14720,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14708,
											"end": 14717,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 14704,
											"end": 14721,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14695,
											"end": 14701,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 14651,
											"end": 14722,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "430"
										},
										{
											"begin": 14651,
											"end": 14722,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14651,
											"end": 14722,
											"name": "tag",
											"source": 12,
											"value": "605"
										},
										{
											"begin": 14651,
											"end": 14722,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14732,
											"end": 14804,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "606"
										},
										{
											"begin": 14800,
											"end": 14802,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 14789,
											"end": 14798,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 14785,
											"end": 14803,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14776,
											"end": 14782,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 14732,
											"end": 14804,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "430"
										},
										{
											"begin": 14732,
											"end": 14804,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14732,
											"end": 14804,
											"name": "tag",
											"source": 12,
											"value": "606"
										},
										{
											"begin": 14732,
											"end": 14804,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14814,
											"end": 14886,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "607"
										},
										{
											"begin": 14882,
											"end": 14884,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14871,
											"end": 14880,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 14867,
											"end": 14885,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14858,
											"end": 14864,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 14814,
											"end": 14886,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "411"
										},
										{
											"begin": 14814,
											"end": 14886,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14814,
											"end": 14886,
											"name": "tag",
											"source": 12,
											"value": "607"
										},
										{
											"begin": 14814,
											"end": 14886,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14451,
											"end": 14893,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 14451,
											"end": 14893,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 14451,
											"end": 14893,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14451,
											"end": 14893,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14451,
											"end": 14893,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14451,
											"end": 14893,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14451,
											"end": 14893,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 14899,
											"end": 15231,
											"name": "tag",
											"source": 12,
											"value": "366"
										},
										{
											"begin": 14899,
											"end": 15231,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15020,
											"end": 15024,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15058,
											"end": 15060,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 15047,
											"end": 15056,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15043,
											"end": 15061,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15035,
											"end": 15061,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15035,
											"end": 15061,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15071,
											"end": 15142,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "609"
										},
										{
											"begin": 15139,
											"end": 15140,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15128,
											"end": 15137,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15124,
											"end": 15141,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15115,
											"end": 15121,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 15071,
											"end": 15142,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "430"
										},
										{
											"begin": 15071,
											"end": 15142,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 15071,
											"end": 15142,
											"name": "tag",
											"source": 12,
											"value": "609"
										},
										{
											"begin": 15071,
											"end": 15142,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15152,
											"end": 15224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "610"
										},
										{
											"begin": 15220,
											"end": 15222,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 15209,
											"end": 15218,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15205,
											"end": 15223,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15196,
											"end": 15202,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15152,
											"end": 15224,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "411"
										},
										{
											"begin": 15152,
											"end": 15224,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 15152,
											"end": 15224,
											"name": "tag",
											"source": 12,
											"value": "610"
										},
										{
											"begin": 15152,
											"end": 15224,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14899,
											"end": 15231,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 14899,
											"end": 15231,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 14899,
											"end": 15231,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14899,
											"end": 15231,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14899,
											"end": 15231,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14899,
											"end": 15231,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 15237,
											"end": 15417,
											"name": "tag",
											"source": 12,
											"value": "375"
										},
										{
											"begin": 15237,
											"end": 15417,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15285,
											"end": 15362,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 15282,
											"end": 15283,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15275,
											"end": 15363,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15382,
											"end": 15386,
											"name": "PUSH",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 15379,
											"end": 15380,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 15372,
											"end": 15387,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15406,
											"end": 15410,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 15403,
											"end": 15404,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15396,
											"end": 15411,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 15423,
											"end": 15593,
											"name": "tag",
											"source": 12,
											"value": "377"
										},
										{
											"begin": 15423,
											"end": 15593,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15453,
											"end": 15454,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15470,
											"end": 15488,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "613"
										},
										{
											"begin": 15486,
											"end": 15487,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15470,
											"end": 15488,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "428"
										},
										{
											"begin": 15470,
											"end": 15488,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 15470,
											"end": 15488,
											"name": "tag",
											"source": 12,
											"value": "613"
										},
										{
											"begin": 15470,
											"end": 15488,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15465,
											"end": 15488,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15465,
											"end": 15488,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15502,
											"end": 15520,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "614"
										},
										{
											"begin": 15518,
											"end": 15519,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15502,
											"end": 15520,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "428"
										},
										{
											"begin": 15502,
											"end": 15520,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 15502,
											"end": 15520,
											"name": "tag",
											"source": 12,
											"value": "614"
										},
										{
											"begin": 15502,
											"end": 15520,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15497,
											"end": 15520,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15497,
											"end": 15520,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15539,
											"end": 15540,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15529,
											"end": 15564,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "615"
										},
										{
											"begin": 15529,
											"end": 15564,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 15544,
											"end": 15562,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "616"
										},
										{
											"begin": 15544,
											"end": 15562,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "331"
										},
										{
											"begin": 15544,
											"end": 15562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 15544,
											"end": 15562,
											"name": "tag",
											"source": 12,
											"value": "616"
										},
										{
											"begin": 15544,
											"end": 15562,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15529,
											"end": 15564,
											"name": "tag",
											"source": 12,
											"value": "615"
										},
										{
											"begin": 15529,
											"end": 15564,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15585,
											"end": 15586,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15582,
											"end": 15583,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15578,
											"end": 15587,
											"name": "MOD",
											"source": 12
										},
										{
											"begin": 15573,
											"end": 15587,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15573,
											"end": 15587,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15423,
											"end": 15593,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15423,
											"end": 15593,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15423,
											"end": 15593,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15423,
											"end": 15593,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15423,
											"end": 15593,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 15599,
											"end": 15715,
											"name": "tag",
											"source": 12,
											"value": "441"
										},
										{
											"begin": 15599,
											"end": 15715,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15669,
											"end": 15690,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "618"
										},
										{
											"begin": 15684,
											"end": 15689,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15669,
											"end": 15690,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "426"
										},
										{
											"begin": 15669,
											"end": 15690,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 15669,
											"end": 15690,
											"name": "tag",
											"source": 12,
											"value": "618"
										},
										{
											"begin": 15669,
											"end": 15690,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15662,
											"end": 15667,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15659,
											"end": 15691,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 15649,
											"end": 15709,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "619"
										},
										{
											"begin": 15649,
											"end": 15709,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 15705,
											"end": 15706,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15702,
											"end": 15703,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 15695,
											"end": 15707,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 15649,
											"end": 15709,
											"name": "tag",
											"source": 12,
											"value": "619"
										},
										{
											"begin": 15649,
											"end": 15709,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15599,
											"end": 15715,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15599,
											"end": 15715,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 15721,
											"end": 15858,
											"name": "tag",
											"source": 12,
											"value": "442"
										},
										{
											"begin": 15721,
											"end": 15858,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15775,
											"end": 15780,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15806,
											"end": 15812,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15800,
											"end": 15813,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 15791,
											"end": 15813,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15791,
											"end": 15813,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15822,
											"end": 15852,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "621"
										},
										{
											"begin": 15846,
											"end": 15851,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 15822,
											"end": 15852,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "441"
										},
										{
											"begin": 15822,
											"end": 15852,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 15822,
											"end": 15852,
											"name": "tag",
											"source": 12,
											"value": "621"
										},
										{
											"begin": 15822,
											"end": 15852,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15721,
											"end": 15858,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15721,
											"end": 15858,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15721,
											"end": 15858,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15721,
											"end": 15858,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15721,
											"end": 15858,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 15864,
											"end": 16209,
											"name": "tag",
											"source": 12,
											"value": "383"
										},
										{
											"begin": 15864,
											"end": 16209,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15931,
											"end": 15937,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15980,
											"end": 15982,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 15968,
											"end": 15977,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15959,
											"end": 15966,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 15955,
											"end": 15978,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 15951,
											"end": 15983,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 15948,
											"end": 16067,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 15948,
											"end": 16067,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "623"
										},
										{
											"begin": 15948,
											"end": 16067,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 15986,
											"end": 16065,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "624"
										},
										{
											"begin": 15986,
											"end": 16065,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 15986,
											"end": 16065,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 15986,
											"end": 16065,
											"name": "tag",
											"source": 12,
											"value": "624"
										},
										{
											"begin": 15986,
											"end": 16065,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15948,
											"end": 16067,
											"name": "tag",
											"source": 12,
											"value": "623"
										},
										{
											"begin": 15948,
											"end": 16067,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16106,
											"end": 16107,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 16131,
											"end": 16192,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "625"
										},
										{
											"begin": 16184,
											"end": 16191,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 16175,
											"end": 16181,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16164,
											"end": 16173,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 16160,
											"end": 16182,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 16131,
											"end": 16192,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "442"
										},
										{
											"begin": 16131,
											"end": 16192,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 16131,
											"end": 16192,
											"name": "tag",
											"source": 12,
											"value": "625"
										},
										{
											"begin": 16131,
											"end": 16192,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16121,
											"end": 16192,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16121,
											"end": 16192,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16077,
											"end": 16202,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15864,
											"end": 16209,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15864,
											"end": 16209,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15864,
											"end": 16209,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15864,
											"end": 16209,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15864,
											"end": 16209,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 16215,
											"end": 16313,
											"name": "tag",
											"source": 12,
											"value": "443"
										},
										{
											"begin": 16215,
											"end": 16313,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16266,
											"end": 16272,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 16300,
											"end": 16305,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 16294,
											"end": 16306,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 16284,
											"end": 16306,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16284,
											"end": 16306,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16215,
											"end": 16313,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16215,
											"end": 16313,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16215,
											"end": 16313,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16215,
											"end": 16313,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 16319,
											"end": 16466,
											"name": "tag",
											"source": 12,
											"value": "444"
										},
										{
											"begin": 16319,
											"end": 16466,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16420,
											"end": 16431,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 16457,
											"end": 16460,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 16442,
											"end": 16460,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 16442,
											"end": 16460,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16319,
											"end": 16466,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 16319,
											"end": 16466,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16319,
											"end": 16466,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16319,
											"end": 16466,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16319,
											"end": 16466,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 16472,
											"end": 16858,
											"name": "tag",
											"source": 12,
											"value": "445"
										},
										{
											"begin": 16472,
											"end": 16858,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16576,
											"end": 16579,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 16604,
											"end": 16642,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "629"
										},
										{
											"begin": 16636,
											"end": 16641,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 16604,
											"end": 16642,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "443"
										},
										{
											"begin": 16604,
											"end": 16642,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 16604,
											"end": 16642,
											"name": "tag",
											"source": 12,
											"value": "629"
										},
										{
											"begin": 16604,
											"end": 16642,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16658,
											"end": 16746,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "630"
										},
										{
											"begin": 16739,
											"end": 16745,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 16734,
											"end": 16737,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 16658,
											"end": 16746,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "444"
										},
										{
											"begin": 16658,
											"end": 16746,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 16658,
											"end": 16746,
											"name": "tag",
											"source": 12,
											"value": "630"
										},
										{
											"begin": 16658,
											"end": 16746,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16651,
											"end": 16746,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 16651,
											"end": 16746,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16755,
											"end": 16820,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "631"
										},
										{
											"begin": 16813,
											"end": 16819,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 16808,
											"end": 16811,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 16801,
											"end": 16805,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 16794,
											"end": 16799,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 16790,
											"end": 16806,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 16755,
											"end": 16820,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "414"
										},
										{
											"begin": 16755,
											"end": 16820,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 16755,
											"end": 16820,
											"name": "tag",
											"source": 12,
											"value": "631"
										},
										{
											"begin": 16755,
											"end": 16820,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16845,
											"end": 16851,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 16840,
											"end": 16843,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 16836,
											"end": 16852,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 16829,
											"end": 16852,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16829,
											"end": 16852,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16580,
											"end": 16858,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16472,
											"end": 16858,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 16472,
											"end": 16858,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16472,
											"end": 16858,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16472,
											"end": 16858,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16472,
											"end": 16858,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 16864,
											"end": 17135,
											"name": "tag",
											"source": 12,
											"value": "393"
										},
										{
											"begin": 16864,
											"end": 17135,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 16994,
											"end": 16997,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 17016,
											"end": 17109,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "633"
										},
										{
											"begin": 17105,
											"end": 17108,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 17096,
											"end": 17102,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 17016,
											"end": 17109,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "445"
										},
										{
											"begin": 17016,
											"end": 17109,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 17016,
											"end": 17109,
											"name": "tag",
											"source": 12,
											"value": "633"
										},
										{
											"begin": 17016,
											"end": 17109,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 17009,
											"end": 17109,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 17009,
											"end": 17109,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 17126,
											"end": 17129,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 17119,
											"end": 17129,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 17119,
											"end": 17129,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16864,
											"end": 17135,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 16864,
											"end": 17135,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 16864,
											"end": 17135,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16864,
											"end": 17135,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 16864,
											"end": 17135,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC4626.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"contracts/Vault.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"asset()": "38d52e0f",
							"balanceOf(address)": "70a08231",
							"convertToAssets(uint256)": "07a2d13a",
							"convertToShares(uint256)": "c6e6f592",
							"decimals()": "313ce567",
							"deposit(uint256,address)": "6e553f65",
							"lockedCollateral(address)": "92bdf9ba",
							"maxDeposit(address)": "402d267d",
							"maxMint(address)": "c63d75b6",
							"maxRedeem(address)": "d905777e",
							"maxWithdraw(address)": "ce96cb77",
							"mint(uint256,address)": "94bf804d",
							"name()": "06fdde03",
							"previewDeposit(uint256)": "ef8b30f7",
							"previewMint(uint256)": "b3d7f6b9",
							"previewRedeem(uint256)": "4cdad506",
							"previewWithdraw(uint256)": "0a28a477",
							"redeem(uint256,address,address)": "ba087652",
							"symbol()": "95d89b41",
							"tokenAddress()": "9d76ea58",
							"totalAssets()": "01e1d114",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256,address,address)": "b460af94"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC4626ExceededMaxDeposit(address,uint256,uint256)\":[{\"details\":\"Attempted to deposit more assets than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxMint(address,uint256,uint256)\":[{\"details\":\"Attempted to mint more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxRedeem(address,uint256,uint256)\":[{\"details\":\"Attempted to redeem more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxWithdraw(address,uint256,uint256)\":[{\"details\":\"Attempted to withdraw more assets than the max amount for `receiver`.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"See {IERC4626-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4626-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4626-convertToShares}. \"},\"decimals()\":{\"details\":\"Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}.\"},\"deposit(uint256,address)\":{\"details\":\"See {IERC4626-deposit}. \"},\"maxDeposit(address)\":{\"details\":\"See {IERC4626-maxDeposit}. \"},\"maxMint(address)\":{\"details\":\"See {IERC4626-maxMint}. \"},\"maxRedeem(address)\":{\"details\":\"See {IERC4626-maxRedeem}. \"},\"maxWithdraw(address)\":{\"details\":\"See {IERC4626-maxWithdraw}. \"},\"mint(uint256,address)\":{\"details\":\"See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"See {IERC4626-previewDeposit}. \"},\"previewMint(uint256)\":{\"details\":\"See {IERC4626-previewMint}. \"},\"previewRedeem(uint256)\":{\"details\":\"See {IERC4626-previewRedeem}. \"},\"previewWithdraw(uint256)\":{\"details\":\"See {IERC4626-previewWithdraw}. \"},\"redeem(uint256,address,address)\":{\"details\":\"See {IERC4626-redeem}. \"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"See {IERC4626-totalAssets}. \"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"withdraw(uint256,address,address)\":{\"details\":\"See {IERC4626-withdraw}. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"LiquidityVault\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"keccak256\":\"0x1837547e04d5fe5334eeb77a345683c22995f1e7aa033020757ddf83a80fc72d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40d6031bc0e6f70edceb4e63fd624fe6be09dc48f5201c7a9078c26e6a9ef95f\",\"dweb:/ipfs/QmPTEBH7dmU3NgE6vtjMy7xEK54as9VHSgf9ojupwnvoke\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"contracts/Vault.sol\":{\"keccak256\":\"0x6b695e3e51074c481dad9197d3a618be5014668a63f6336a565a92a7c35d2c86\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f2b160959f08d4ae9c7548554fbf7db0b47dd54eb36e9ceecb4bd6afedf5036\",\"dweb:/ipfs/QmWk5iNnSZeqvXq6pzE9cFwCgZfk5a5HR9KthGBT7oC6Wq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 329,
								"contract": "contracts/Vault.sol:LiquidityVault",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 335,
								"contract": "contracts/Vault.sol:LiquidityVault",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 337,
								"contract": "contracts/Vault.sol:LiquidityVault",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 339,
								"contract": "contracts/Vault.sol:LiquidityVault",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 341,
								"contract": "contracts/Vault.sol:LiquidityVault",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 3283,
								"contract": "contracts/Vault.sol:LiquidityVault",
								"label": "lockedCollateral",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 3285,
								"contract": "contracts/Vault.sol:LiquidityVault",
								"label": "tokenAddress",
								"offset": 0,
								"slot": "6",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/interfaces/IERC4626.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC4626.sol",
					"exportedSymbols": {
						"IERC20": [
							899
						],
						"IERC20Metadata": [
							1610
						],
						"IERC4626": [
							169
						]
					},
					"id": 170,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../token/ERC20/IERC20.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 170,
							"sourceUnit": 900,
							"src": "133:49:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 899,
										"src": "141:6:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "../token/ERC20/extensions/IERC20Metadata.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 170,
							"sourceUnit": 1611,
							"src": "183:76:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1610,
										"src": "191:14:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 7,
										"name": "IERC20",
										"nameLocations": [
											"420:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 899,
										"src": "420:6:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "420:6:0"
								},
								{
									"baseName": {
										"id": 9,
										"name": "IERC20Metadata",
										"nameLocations": [
											"428:14:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1610,
										"src": "428:14:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "428:14:0"
								}
							],
							"canonicalName": "IERC4626",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "261:136:0",
								"text": " @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n https://eips.ethereum.org/EIPS/eip-4626[ERC-4626]."
							},
							"fullyImplemented": false,
							"id": 169,
							"linearizedBaseContracts": [
								169,
								1610,
								899
							],
							"name": "IERC4626",
							"nameLocation": "408:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "dcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7",
									"id": 20,
									"name": "Deposit",
									"nameLocation": "455:7:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "479:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "463:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "463:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "503:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "487:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "487:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": false,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "518:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "510:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 15,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "510:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "534:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "526:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "526:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "462:79:0"
									},
									"src": "449:93:0"
								},
								{
									"anonymous": false,
									"eventSelector": "fbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db",
									"id": 32,
									"name": "Withdraw",
									"nameLocation": "554:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "588:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "572:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "572:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 24,
												"indexed": true,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "620:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "604:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 23,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "604:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 26,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "654:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "638:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 25,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "638:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 28,
												"indexed": false,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "677:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "669:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 27,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "669:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 30,
												"indexed": false,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "701:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "693:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 29,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "562:151:0"
									},
									"src": "548:166:0"
								},
								{
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "720:207:0",
										"text": " @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n - MUST be an ERC-20 token contract.\n - MUST NOT revert."
									},
									"functionSelector": "38d52e0f",
									"id": 38,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "asset",
									"nameLocation": "941:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "946:2:0"
									},
									"returnParameters": {
										"id": 37,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 36,
												"mutability": "mutable",
												"name": "assetTokenAddress",
												"nameLocation": "980:17:0",
												"nodeType": "VariableDeclaration",
												"scope": 38,
												"src": "972:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 35,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "972:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "971:27:0"
									},
									"scope": 169,
									"src": "932:67:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 39,
										"nodeType": "StructuredDocumentation",
										"src": "1005:286:0",
										"text": " @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n - SHOULD include any compounding that occurs from yield.\n - MUST be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT revert."
									},
									"functionSelector": "01e1d114",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalAssets",
									"nameLocation": "1305:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1316:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "totalManagedAssets",
												"nameLocation": "1350:18:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1342:26:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 41,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1342:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1341:28:0"
									},
									"scope": 169,
									"src": "1296:74:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1376:720:0",
										"text": " @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n scenario where all the conditions are met.\n - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT show any variations depending on the caller.\n - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n - MUST NOT revert.\n NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n from."
									},
									"functionSelector": "c6e6f592",
									"id": 52,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "convertToShares",
									"nameLocation": "2110:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "2134:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "2126:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 46,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2126:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2125:16:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "2173:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "2165:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 49,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2165:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2164:16:0"
									},
									"scope": 169,
									"src": "2101:80:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "2187:720:0",
										"text": " @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n scenario where all the conditions are met.\n - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT show any variations depending on the caller.\n - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n - MUST NOT revert.\n NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n from."
									},
									"functionSelector": "07a2d13a",
									"id": 60,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "convertToAssets",
									"nameLocation": "2921:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "2945:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "2937:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2937:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2936:16:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "2984:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "2976:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 57,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2976:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2975:16:0"
									},
									"scope": 169,
									"src": "2912:80:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "2998:386:0",
										"text": " @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n through a deposit call.\n - MUST return a limited value if receiver is subject to some deposit limit.\n - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n - MUST NOT revert."
									},
									"functionSelector": "402d267d",
									"id": 68,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxDeposit",
									"nameLocation": "3398:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3417:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3409:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3409:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3408:18:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 66,
												"mutability": "mutable",
												"name": "maxAssets",
												"nameLocation": "3458:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3450:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 65,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3450:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3449:19:0"
									},
									"scope": 169,
									"src": "3389:80:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "3475:1012:0",
										"text": " @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n current on-chain conditions.\n - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n   in the same transaction.\n - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by depositing."
									},
									"functionSelector": "ef8b30f7",
									"id": 76,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewDeposit",
									"nameLocation": "4501:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "4524:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "4516:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4516:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4515:16:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "4563:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "4555:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 73,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4555:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4554:16:0"
									},
									"scope": 169,
									"src": "4492:79:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 77,
										"nodeType": "StructuredDocumentation",
										"src": "4577:651:0",
										"text": " @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n - MUST emit the Deposit event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   deposit execution, and are accounted for during deposit.\n - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n   approving enough underlying tokens to the Vault contract, etc).\n NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
									},
									"functionSelector": "6e553f65",
									"id": 86,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "5242:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "5258:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "5250:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 78,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5250:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5274:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "5266:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 80,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5266:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5249:34:0"
									},
									"returnParameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "5310:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "5302:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 83,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5302:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5301:16:0"
									},
									"scope": 169,
									"src": "5233:85:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 87,
										"nodeType": "StructuredDocumentation",
										"src": "5324:341:0",
										"text": " @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n - MUST return a limited value if receiver is subject to some mint limit.\n - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n - MUST NOT revert."
									},
									"functionSelector": "c63d75b6",
									"id": 94,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxMint",
									"nameLocation": "5679:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5695:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "5687:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 88,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5687:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5686:18:0"
									},
									"returnParameters": {
										"id": 93,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 92,
												"mutability": "mutable",
												"name": "maxShares",
												"nameLocation": "5736:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "5728:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 91,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5728:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5727:19:0"
									},
									"scope": 169,
									"src": "5670:77:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 95,
										"nodeType": "StructuredDocumentation",
										"src": "5753:984:0",
										"text": " @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n current on-chain conditions.\n - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n   same transaction.\n - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n   would be accepted, regardless if the user has enough tokens approved, etc.\n - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by minting."
									},
									"functionSelector": "b3d7f6b9",
									"id": 102,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewMint",
									"nameLocation": "6751:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "6771:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "6763:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6763:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6762:16:0"
									},
									"returnParameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "6810:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "6802:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 99,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6802:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6801:16:0"
									},
									"scope": 169,
									"src": "6742:76:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 103,
										"nodeType": "StructuredDocumentation",
										"src": "6824:642:0",
										"text": " @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n - MUST emit the Deposit event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n   execution, and are accounted for during mint.\n - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n   approving enough underlying tokens to the Vault contract, etc).\n NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
									},
									"functionSelector": "94bf804d",
									"id": 112,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "7480:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 105,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "7493:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "7485:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 104,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7485:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "7509:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "7501:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7501:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7484:34:0"
									},
									"returnParameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "7545:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "7537:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 109,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7537:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7536:16:0"
									},
									"scope": 169,
									"src": "7471:82:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 113,
										"nodeType": "StructuredDocumentation",
										"src": "7559:293:0",
										"text": " @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n Vault, through a withdraw call.\n - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n - MUST NOT revert."
									},
									"functionSelector": "ce96cb77",
									"id": 120,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxWithdraw",
									"nameLocation": "7866:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 115,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "7886:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "7878:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 114,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7878:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7877:15:0"
									},
									"returnParameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "maxAssets",
												"nameLocation": "7924:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "7916:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7916:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7915:19:0"
									},
									"scope": 169,
									"src": "7857:78:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 121,
										"nodeType": "StructuredDocumentation",
										"src": "7941:1034:0",
										"text": " @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n given current on-chain conditions.\n - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n   called\n   in the same transaction.\n - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by depositing."
									},
									"functionSelector": "0a28a477",
									"id": 128,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewWithdraw",
									"nameLocation": "8989:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "9013:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "9005:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9005:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9004:16:0"
									},
									"returnParameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "9052:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "9044:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 125,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9044:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9043:16:0"
									},
									"scope": 169,
									"src": "8980:80:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 129,
										"nodeType": "StructuredDocumentation",
										"src": "9066:670:0",
										"text": " @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n - MUST emit the Withdraw event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   withdraw execution, and are accounted for during withdraw.\n - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n   not having enough shares, etc).\n Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n Those methods should be performed separately."
									},
									"functionSelector": "b460af94",
									"id": 140,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "9750:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "9767:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "9759:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9759:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "9783:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "9775:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 132,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9775:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9801:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "9793:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 134,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9793:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9758:49:0"
									},
									"returnParameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "9834:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "9826:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 137,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9826:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9825:16:0"
									},
									"scope": 169,
									"src": "9741:101:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 141,
										"nodeType": "StructuredDocumentation",
										"src": "9848:381:0",
										"text": " @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n through a redeem call.\n - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n - MUST NOT revert."
									},
									"functionSelector": "d905777e",
									"id": 148,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxRedeem",
									"nameLocation": "10243:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10261:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "10253:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 142,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10253:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10252:15:0"
									},
									"returnParameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "maxShares",
												"nameLocation": "10299:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "10291:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10291:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10290:19:0"
									},
									"scope": 169,
									"src": "10234:76:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 149,
										"nodeType": "StructuredDocumentation",
										"src": "10316:1010:0",
										"text": " @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n given current on-chain conditions.\n - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n   same transaction.\n - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n   redemption would be accepted, regardless if the user has enough shares, etc.\n - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by redeeming."
									},
									"functionSelector": "4cdad506",
									"id": 156,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewRedeem",
									"nameLocation": "11340:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "11362:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "11354:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11354:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11353:16:0"
									},
									"returnParameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "11401:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "11393:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 153,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11393:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11392:16:0"
									},
									"scope": 169,
									"src": "11331:78:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 157,
										"nodeType": "StructuredDocumentation",
										"src": "11415:661:0",
										"text": " @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n - MUST emit the Withdraw event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   redeem execution, and are accounted for during redeem.\n - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n   not having enough shares, etc).\n NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n Those methods should be performed separately."
									},
									"functionSelector": "ba087652",
									"id": 168,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "redeem",
									"nameLocation": "12090:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "12105:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "12097:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12097:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "12121:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "12113:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12113:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "12139:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "12131:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 162,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12131:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12096:49:0"
									},
									"returnParameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "12172:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "12164:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12164:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12163:16:0"
									},
									"scope": 169,
									"src": "12081:99:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 170,
							"src": "398:11784:0",
							"usedErrors": [],
							"usedEvents": [
								20,
								32,
								833,
								842
							]
						}
					],
					"src": "107:12076:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							306
						],
						"IERC20Errors": [
							211
						],
						"IERC721Errors": [
							259
						]
					},
					"id": 307,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 171,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 172,
								"nodeType": "StructuredDocumentation",
								"src": "138:139:1",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 211,
							"linearizedBaseContracts": [
								211
							],
							"name": "IERC20Errors",
							"nameLocation": "288:12:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 173,
										"nodeType": "StructuredDocumentation",
										"src": "307:309:1",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 181,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "627:24:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "660:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "652:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 174,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "676:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "668:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 176,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "693:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "685:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:49:1"
									},
									"src": "621:80:1"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "707:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 186,
									"name": "ERC20InvalidSender",
									"nameLocation": "870:18:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "897:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "889:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "889:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "888:16:1"
									},
									"src": "864:41:1"
								},
								{
									"documentation": {
										"id": 187,
										"nodeType": "StructuredDocumentation",
										"src": "911:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 191,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1081:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1110:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1102:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 188,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:18:1"
									},
									"src": "1075:45:1"
								},
								{
									"documentation": {
										"id": 192,
										"nodeType": "StructuredDocumentation",
										"src": "1126:345:1",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 200,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1482:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1517:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "1509:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1509:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1534:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "1526:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1526:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1553:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "1545:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1545:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1508:52:1"
									},
									"src": "1476:85:1"
								},
								{
									"documentation": {
										"id": 201,
										"nodeType": "StructuredDocumentation",
										"src": "1567:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 205,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1752:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1781:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "1773:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 202,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:18:1"
									},
									"src": "1746:45:1"
								},
								{
									"documentation": {
										"id": 206,
										"nodeType": "StructuredDocumentation",
										"src": "1797:195:1",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 210,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2003:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2031:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 210,
												"src": "2023:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2022:17:1"
									},
									"src": "1997:43:1"
								}
							],
							"scope": 307,
							"src": "278:1764:1",
							"usedErrors": [
								181,
								186,
								191,
								200,
								205,
								210
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 212,
								"nodeType": "StructuredDocumentation",
								"src": "2044:141:1",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 259,
							"linearizedBaseContracts": [
								259
							],
							"name": "IERC721Errors",
							"nameLocation": "2196:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "2216:219:1",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 217,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2446:18:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2473:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "2465:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2465:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:1"
									},
									"src": "2440:40:1"
								},
								{
									"documentation": {
										"id": 218,
										"nodeType": "StructuredDocumentation",
										"src": "2486:132:1",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 222,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2629:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2660:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 222,
												"src": "2652:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 219,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:17:1"
									},
									"src": "2623:46:1"
								},
								{
									"documentation": {
										"id": 223,
										"nodeType": "StructuredDocumentation",
										"src": "2675:289:1",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 231,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2975:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3004:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "2996:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 224,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2996:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3020:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "3012:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3012:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3037:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "3029:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3029:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2995:48:1"
									},
									"src": "2969:75:1"
								},
								{
									"documentation": {
										"id": 232,
										"nodeType": "StructuredDocumentation",
										"src": "3050:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 236,
									"name": "ERC721InvalidSender",
									"nameLocation": "3213:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3241:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3233:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 233,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:1"
									},
									"src": "3207:42:1"
								},
								{
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "3255:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 241,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3425:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3455:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "3447:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3447:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3446:18:1"
									},
									"src": "3419:46:1"
								},
								{
									"documentation": {
										"id": 242,
										"nodeType": "StructuredDocumentation",
										"src": "3471:247:1",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 248,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3729:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 244,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3764:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 248,
												"src": "3756:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 243,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3756:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 246,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3782:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 248,
												"src": "3774:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3755:35:1"
									},
									"src": "3723:68:1"
								},
								{
									"documentation": {
										"id": 249,
										"nodeType": "StructuredDocumentation",
										"src": "3797:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 253,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3982:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 251,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4012:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "4004:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 250,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4004:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:18:1"
									},
									"src": "3976:46:1"
								},
								{
									"documentation": {
										"id": 254,
										"nodeType": "StructuredDocumentation",
										"src": "4028:197:1",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 258,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4236:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4266:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "4258:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 255,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4258:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4257:18:1"
									},
									"src": "4230:46:1"
								}
							],
							"scope": 307,
							"src": "2186:2092:1",
							"usedErrors": [
								217,
								222,
								231,
								236,
								241,
								248,
								253,
								258
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 260,
								"nodeType": "StructuredDocumentation",
								"src": "4280:143:1",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 306,
							"linearizedBaseContracts": [
								306
							],
							"name": "IERC1155Errors",
							"nameLocation": "4434:14:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 261,
										"nodeType": "StructuredDocumentation",
										"src": "4455:361:1",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 271,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4827:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4862:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4854:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4854:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4878:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4870:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 264,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4895:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4887:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4887:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4911:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4903:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 268,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4903:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4853:66:1"
									},
									"src": "4821:99:1"
								},
								{
									"documentation": {
										"id": 272,
										"nodeType": "StructuredDocumentation",
										"src": "4926:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 276,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5089:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5118:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "5110:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 273,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5110:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5109:16:1"
									},
									"src": "5083:43:1"
								},
								{
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "5132:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 281,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5302:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5333:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "5325:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 278,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5325:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5324:18:1"
									},
									"src": "5296:47:1"
								},
								{
									"documentation": {
										"id": 282,
										"nodeType": "StructuredDocumentation",
										"src": "5349:256:1",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 288,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5616:28:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5653:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "5645:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 283,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5645:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5671:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "5663:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5644:33:1"
									},
									"src": "5610:68:1"
								},
								{
									"documentation": {
										"id": 289,
										"nodeType": "StructuredDocumentation",
										"src": "5684:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 293,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5869:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5900:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "5892:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 290,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5892:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5891:18:1"
									},
									"src": "5863:47:1"
								},
								{
									"documentation": {
										"id": 294,
										"nodeType": "StructuredDocumentation",
										"src": "5916:197:1",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 298,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6124:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6155:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "6147:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 295,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6147:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:18:1"
									},
									"src": "6118:47:1"
								},
								{
									"documentation": {
										"id": 299,
										"nodeType": "StructuredDocumentation",
										"src": "6171:280:1",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 305,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6462:25:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6496:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "6488:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 300,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6488:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6515:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "6507:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6507:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6487:41:1"
									},
									"src": "6456:73:1"
								}
							],
							"scope": 307,
							"src": "4424:2107:1",
							"usedErrors": [
								271,
								276,
								281,
								288,
								293,
								298,
								305
							],
							"usedEvents": []
						}
					],
					"src": "112:6420:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							2219
						],
						"ERC20": [
							821
						],
						"IERC20": [
							899
						],
						"IERC20Errors": [
							211
						],
						"IERC20Metadata": [
							1610
						]
					},
					"id": 822,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 308,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 310,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 822,
							"sourceUnit": 900,
							"src": "131:36:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 309,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 899,
										"src": "139:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 312,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 822,
							"sourceUnit": 1611,
							"src": "168:63:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 311,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1610,
										"src": "176:14:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 314,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 822,
							"sourceUnit": 2220,
							"src": "232:48:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 313,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2219,
										"src": "240:7:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 316,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 822,
							"sourceUnit": 307,
							"src": "281:65:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 315,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 211,
										"src": "289:12:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 318,
										"name": "Context",
										"nameLocations": [
											"1428:7:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2219,
										"src": "1428:7:2"
									},
									"id": 319,
									"nodeType": "InheritanceSpecifier",
									"src": "1428:7:2"
								},
								{
									"baseName": {
										"id": 320,
										"name": "IERC20",
										"nameLocations": [
											"1437:6:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 899,
										"src": "1437:6:2"
									},
									"id": 321,
									"nodeType": "InheritanceSpecifier",
									"src": "1437:6:2"
								},
								{
									"baseName": {
										"id": 322,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1445:14:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1610,
										"src": "1445:14:2"
									},
									"id": 323,
									"nodeType": "InheritanceSpecifier",
									"src": "1445:14:2"
								},
								{
									"baseName": {
										"id": 324,
										"name": "IERC20Errors",
										"nameLocations": [
											"1461:12:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 211,
										"src": "1461:12:2"
									},
									"id": 325,
									"nodeType": "InheritanceSpecifier",
									"src": "1461:12:2"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 317,
								"nodeType": "StructuredDocumentation",
								"src": "348:1052:2",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 821,
							"linearizedBaseContracts": [
								821,
								211,
								1610,
								899,
								2219
							],
							"name": "ERC20",
							"nameLocation": "1419:5:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 329,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1524:9:2",
									"nodeType": "VariableDeclaration",
									"scope": 821,
									"src": "1480:53:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 328,
										"keyName": "account",
										"keyNameLocation": "1496:7:2",
										"keyType": {
											"id": 326,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1488:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1480:35:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 327,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1507:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 335,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1612:11:2",
									"nodeType": "VariableDeclaration",
									"scope": 821,
									"src": "1540:83:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 334,
										"keyName": "account",
										"keyNameLocation": "1556:7:2",
										"keyType": {
											"id": 330,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1548:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1540:63:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 333,
											"keyName": "spender",
											"keyNameLocation": "1583:7:2",
											"keyType": {
												"id": 331,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1575:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1567:35:2",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 332,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1594:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 337,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1646:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 821,
									"src": "1630:28:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 336,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1630:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 339,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1680:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 821,
									"src": "1665:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 338,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1665:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 341,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1706:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 821,
									"src": "1691:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 340,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1691:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 357,
										"nodeType": "Block",
										"src": "1952:57:2",
										"statements": [
											{
												"expression": {
													"id": 351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 349,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 339,
														"src": "1962:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 350,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 344,
														"src": "1970:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1962:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 352,
												"nodeType": "ExpressionStatement",
												"src": "1962:13:2"
											},
											{
												"expression": {
													"id": 355,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 353,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 341,
														"src": "1985:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 354,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "1995:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1985:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 356,
												"nodeType": "ExpressionStatement",
												"src": "1985:17:2"
											}
										]
									},
									"documentation": {
										"id": 342,
										"nodeType": "StructuredDocumentation",
										"src": "1720:171:2",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 358,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1922:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 358,
												"src": "1908:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 343,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1908:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1943:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 358,
												"src": "1929:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 345,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1929:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1907:44:2"
									},
									"returnParameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1952:0:2"
									},
									"scope": 821,
									"src": "1896:113:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1597
									],
									"body": {
										"id": 366,
										"nodeType": "Block",
										"src": "2134:29:2",
										"statements": [
											{
												"expression": {
													"id": 364,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 339,
													"src": "2151:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 363,
												"id": 365,
												"nodeType": "Return",
												"src": "2144:12:2"
											}
										]
									},
									"documentation": {
										"id": 359,
										"nodeType": "StructuredDocumentation",
										"src": "2015:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 367,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2083:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 360,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2087:2:2"
									},
									"returnParameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "2119:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 361,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2119:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2118:15:2"
									},
									"scope": 821,
									"src": "2074:89:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1603
									],
									"body": {
										"id": 375,
										"nodeType": "Block",
										"src": "2338:31:2",
										"statements": [
											{
												"expression": {
													"id": 373,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 341,
													"src": "2355:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 372,
												"id": 374,
												"nodeType": "Return",
												"src": "2348:14:2"
											}
										]
									},
									"documentation": {
										"id": 368,
										"nodeType": "StructuredDocumentation",
										"src": "2169:102:2",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 376,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2285:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 369,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2291:2:2"
									},
									"returnParameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 376,
												"src": "2323:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 370,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2323:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2322:15:2"
									},
									"scope": 821,
									"src": "2276:93:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1609
									],
									"body": {
										"id": 384,
										"nodeType": "Block",
										"src": "3058:26:2",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 382,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3075:2:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 381,
												"id": 383,
												"nodeType": "Return",
												"src": "3068:9:2"
											}
										]
									},
									"documentation": {
										"id": 377,
										"nodeType": "StructuredDocumentation",
										"src": "2375:622:2",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 385,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3011:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 378,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3019:2:2"
									},
									"returnParameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 380,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "3051:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 379,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3051:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3050:7:2"
									},
									"scope": 821,
									"src": "3002:82:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										848
									],
									"body": {
										"id": 393,
										"nodeType": "Block",
										"src": "3205:36:2",
										"statements": [
											{
												"expression": {
													"id": 391,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 337,
													"src": "3222:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 390,
												"id": 392,
												"nodeType": "Return",
												"src": "3215:19:2"
											}
										]
									},
									"documentation": {
										"id": 386,
										"nodeType": "StructuredDocumentation",
										"src": "3090:49:2",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 394,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3153:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3164:2:2"
									},
									"returnParameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 394,
												"src": "3196:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 388,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3196:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3195:9:2"
									},
									"scope": 821,
									"src": "3144:97:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										856
									],
									"body": {
										"id": 406,
										"nodeType": "Block",
										"src": "3373:42:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 402,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 329,
														"src": "3390:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 404,
													"indexExpression": {
														"id": 403,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 397,
														"src": "3400:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3390:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 401,
												"id": 405,
												"nodeType": "Return",
												"src": "3383:25:2"
											}
										]
									},
									"documentation": {
										"id": 395,
										"nodeType": "StructuredDocumentation",
										"src": "3247:47:2",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 407,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3308:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 397,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3326:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "3318:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 396,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3318:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:17:2"
									},
									"returnParameters": {
										"id": 401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "3364:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 399,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3363:9:2"
									},
									"scope": 821,
									"src": "3299:116:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										866
									],
									"body": {
										"id": 430,
										"nodeType": "Block",
										"src": "3685:103:2",
										"statements": [
											{
												"assignments": [
													418
												],
												"declarations": [
													{
														"constant": false,
														"id": 418,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3703:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 430,
														"src": "3695:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 417,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3695:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 421,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 419,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2201,
														"src": "3711:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3711:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3695:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 423,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 418,
															"src": "3743:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 424,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 410,
															"src": "3750:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 425,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 412,
															"src": "3754:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 422,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 551,
														"src": "3733:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 426,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3733:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 427,
												"nodeType": "ExpressionStatement",
												"src": "3733:27:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 428,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3777:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 416,
												"id": 429,
												"nodeType": "Return",
												"src": "3770:11:2"
											}
										]
									},
									"documentation": {
										"id": 408,
										"nodeType": "StructuredDocumentation",
										"src": "3421:184:2",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 431,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3619:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 413,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 410,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3636:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 431,
												"src": "3628:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 409,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 412,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3648:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 431,
												"src": "3640:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 411,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3640:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3627:27:2"
									},
									"returnParameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 431,
												"src": "3679:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 414,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3679:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3678:6:2"
									},
									"scope": 821,
									"src": "3610:178:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										876
									],
									"body": {
										"id": 447,
										"nodeType": "Block",
										"src": "3935:51:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 441,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 335,
															"src": "3952:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 443,
														"indexExpression": {
															"id": 442,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 434,
															"src": "3964:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3952:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 445,
													"indexExpression": {
														"id": 444,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 436,
														"src": "3971:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3952:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 440,
												"id": 446,
												"nodeType": "Return",
												"src": "3945:34:2"
											}
										]
									},
									"documentation": {
										"id": 432,
										"nodeType": "StructuredDocumentation",
										"src": "3794:47:2",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 448,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3855:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 437,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3873:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 448,
												"src": "3865:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 433,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3865:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 436,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3888:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 448,
												"src": "3880:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 435,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3880:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3864:32:2"
									},
									"returnParameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 448,
												"src": "3926:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 438,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3926:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3925:9:2"
									},
									"scope": 821,
									"src": "3846:140:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										886
									],
									"body": {
										"id": 471,
										"nodeType": "Block",
										"src": "4372:107:2",
										"statements": [
											{
												"assignments": [
													459
												],
												"declarations": [
													{
														"constant": false,
														"id": 459,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4390:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 471,
														"src": "4382:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 458,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4382:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 462,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 460,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2201,
														"src": "4398:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4398:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4382:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 464,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 459,
															"src": "4429:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 465,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 451,
															"src": "4436:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 466,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 453,
															"src": "4445:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 463,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															712,
															772
														],
														"referencedDeclaration": 712,
														"src": "4420:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 467,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4420:31:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 468,
												"nodeType": "ExpressionStatement",
												"src": "4420:31:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 469,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4468:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 457,
												"id": 470,
												"nodeType": "Return",
												"src": "4461:11:2"
											}
										]
									},
									"documentation": {
										"id": 449,
										"nodeType": "StructuredDocumentation",
										"src": "3992:296:2",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 472,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4302:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 454,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 451,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4318:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "4310:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 450,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4310:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4335:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "4327:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 452,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4327:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4309:32:2"
									},
									"returnParameters": {
										"id": 457,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 456,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "4366:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 455,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4366:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:6:2"
									},
									"scope": 821,
									"src": "4293:186:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										898
									],
									"body": {
										"id": 503,
										"nodeType": "Block",
										"src": "5132:151:2",
										"statements": [
											{
												"assignments": [
													485
												],
												"declarations": [
													{
														"constant": false,
														"id": 485,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5150:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 503,
														"src": "5142:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 484,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5142:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 488,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 486,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2201,
														"src": "5160:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 487,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5160:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5142:30:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 490,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 475,
															"src": "5198:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 491,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 485,
															"src": "5204:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 492,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "5213:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 489,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 820,
														"src": "5182:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 493,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5182:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 494,
												"nodeType": "ExpressionStatement",
												"src": "5182:37:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 496,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 475,
															"src": "5239:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 497,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "5245:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 498,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "5249:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 495,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 551,
														"src": "5229:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 499,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5229:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 500,
												"nodeType": "ExpressionStatement",
												"src": "5229:26:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 501,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5272:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 483,
												"id": 502,
												"nodeType": "Return",
												"src": "5265:11:2"
											}
										]
									},
									"documentation": {
										"id": 473,
										"nodeType": "StructuredDocumentation",
										"src": "4485:549:2",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 504,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5048:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5069:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 504,
												"src": "5061:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 474,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5083:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 504,
												"src": "5075:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 476,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5095:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 504,
												"src": "5087:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 478,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5087:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:41:2"
									},
									"returnParameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 504,
												"src": "5126:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 481,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5126:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5125:6:2"
									},
									"scope": 821,
									"src": "5039:244:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 550,
										"nodeType": "Block",
										"src": "5725:231:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 519,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 514,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 507,
														"src": "5739:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 517,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5755:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 516,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5747:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 515,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5747:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 518,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5747:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5739:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 528,
												"nodeType": "IfStatement",
												"src": "5735:86:2",
												"trueBody": {
													"id": 527,
													"nodeType": "Block",
													"src": "5759:62:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 523,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5807:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 522,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5799:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 521,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5799:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 524,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5799:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 520,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 186,
																	"src": "5780:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 525,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5780:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 526,
															"nodeType": "RevertStatement",
															"src": "5773:37:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 534,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 529,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 509,
														"src": "5834:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 532,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5848:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 531,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5840:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 530,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5840:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 533,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5840:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5834:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 543,
												"nodeType": "IfStatement",
												"src": "5830:86:2",
												"trueBody": {
													"id": 542,
													"nodeType": "Block",
													"src": "5852:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 538,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5902:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 537,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5894:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 536,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5894:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 539,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5894:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 535,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 191,
																	"src": "5873:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 540,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5873:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 541,
															"nodeType": "RevertStatement",
															"src": "5866:39:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 545,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 507,
															"src": "5933:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 546,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 509,
															"src": "5939:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 547,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 511,
															"src": "5943:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 544,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 628,
														"src": "5925:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 548,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5925:24:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 549,
												"nodeType": "ExpressionStatement",
												"src": "5925:24:2"
											}
										]
									},
									"documentation": {
										"id": 505,
										"nodeType": "StructuredDocumentation",
										"src": "5289:362:2",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 551,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5665:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 512,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 507,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5683:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "5675:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 506,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5675:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 509,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5697:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "5689:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 508,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5689:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 511,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5709:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "5701:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 510,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5674:41:2"
									},
									"returnParameters": {
										"id": 513,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5725:0:2"
									},
									"scope": 821,
									"src": "5656:300:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 627,
										"nodeType": "Block",
										"src": "6346:1032:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 566,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 561,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 554,
														"src": "6360:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 564,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6376:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 563,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6368:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 562,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6368:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 565,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6368:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6360:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 598,
													"nodeType": "Block",
													"src": "6534:362:2",
													"statements": [
														{
															"assignments": [
																573
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 573,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6556:11:2",
																	"nodeType": "VariableDeclaration",
																	"scope": 598,
																	"src": "6548:19:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 572,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6548:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 577,
															"initialValue": {
																"baseExpression": {
																	"id": 574,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 329,
																	"src": "6570:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 576,
																"indexExpression": {
																	"id": 575,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 554,
																	"src": "6580:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6570:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6548:37:2"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 580,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 578,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 573,
																	"src": "6603:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 579,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 558,
																	"src": "6617:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6603:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 588,
															"nodeType": "IfStatement",
															"src": "6599:115:2",
															"trueBody": {
																"id": 587,
																"nodeType": "Block",
																"src": "6624:90:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 582,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 554,
																					"src": "6674:4:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 583,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 573,
																					"src": "6680:11:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 584,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 558,
																					"src": "6693:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 581,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 181,
																				"src": "6649:24:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 585,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6649:50:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 586,
																		"nodeType": "RevertStatement",
																		"src": "6642:57:2"
																	}
																]
															}
														},
														{
															"id": 597,
															"nodeType": "UncheckedBlock",
															"src": "6727:159:2",
															"statements": [
																{
																	"expression": {
																		"id": 595,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 589,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 329,
																				"src": "6834:9:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 591,
																			"indexExpression": {
																				"id": 590,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 554,
																				"src": "6844:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6834:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 594,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 592,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 573,
																				"src": "6852:11:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 593,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 558,
																				"src": "6866:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6852:19:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6834:37:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 596,
																	"nodeType": "ExpressionStatement",
																	"src": "6834:37:2"
																}
															]
														}
													]
												},
												"id": 599,
												"nodeType": "IfStatement",
												"src": "6356:540:2",
												"trueBody": {
													"id": 571,
													"nodeType": "Block",
													"src": "6380:148:2",
													"statements": [
														{
															"expression": {
																"id": 569,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 567,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 337,
																	"src": "6496:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 568,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 558,
																	"src": "6512:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6496:21:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 570,
															"nodeType": "ExpressionStatement",
															"src": "6496:21:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 600,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 556,
														"src": "6910:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 603,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6924:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 602,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6916:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 601,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6916:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 604,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6916:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6910:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 619,
													"nodeType": "Block",
													"src": "7125:206:2",
													"statements": [
														{
															"id": 618,
															"nodeType": "UncheckedBlock",
															"src": "7139:182:2",
															"statements": [
																{
																	"expression": {
																		"id": 616,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 612,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 329,
																				"src": "7284:9:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 614,
																			"indexExpression": {
																				"id": 613,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 556,
																				"src": "7294:2:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7284:13:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 615,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 558,
																			"src": "7301:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7284:22:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 617,
																	"nodeType": "ExpressionStatement",
																	"src": "7284:22:2"
																}
															]
														}
													]
												},
												"id": 620,
												"nodeType": "IfStatement",
												"src": "6906:425:2",
												"trueBody": {
													"id": 611,
													"nodeType": "Block",
													"src": "6928:191:2",
													"statements": [
														{
															"id": 610,
															"nodeType": "UncheckedBlock",
															"src": "6942:167:2",
															"statements": [
																{
																	"expression": {
																		"id": 608,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 606,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 337,
																			"src": "7073:12:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 607,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 558,
																			"src": "7089:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7073:21:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 609,
																	"nodeType": "ExpressionStatement",
																	"src": "7073:21:2"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 622,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 554,
															"src": "7355:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 623,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 556,
															"src": "7361:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 624,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 558,
															"src": "7365:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 621,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 833,
														"src": "7346:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 625,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7346:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 626,
												"nodeType": "EmitStatement",
												"src": "7341:30:2"
											}
										]
									},
									"documentation": {
										"id": 552,
										"nodeType": "StructuredDocumentation",
										"src": "5962:304:2",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 628,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6280:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6296:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 628,
												"src": "6288:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 553,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6288:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 556,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6310:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 628,
												"src": "6302:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 555,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6302:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6322:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 628,
												"src": "6314:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 557,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6287:41:2"
									},
									"returnParameters": {
										"id": 560,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6346:0:2"
									},
									"scope": 821,
									"src": "6271:1107:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 660,
										"nodeType": "Block",
										"src": "7777:152:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 641,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 636,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 631,
														"src": "7791:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 639,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7810:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 638,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7802:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 637,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7802:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 640,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7802:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7791:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 650,
												"nodeType": "IfStatement",
												"src": "7787:91:2",
												"trueBody": {
													"id": 649,
													"nodeType": "Block",
													"src": "7814:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 645,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7864:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 644,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7856:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 643,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7856:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 646,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7856:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 642,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 191,
																	"src": "7835:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 647,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7835:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 648,
															"nodeType": "RevertStatement",
															"src": "7828:39:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 654,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7903:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 653,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7895:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 652,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7895:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 655,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7895:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 656,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 631,
															"src": "7907:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 657,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 633,
															"src": "7916:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 651,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 628,
														"src": "7887:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 658,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7887:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 659,
												"nodeType": "ExpressionStatement",
												"src": "7887:35:2"
											}
										]
									},
									"documentation": {
										"id": 629,
										"nodeType": "StructuredDocumentation",
										"src": "7384:332:2",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 661,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7730:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 634,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 631,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7744:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 661,
												"src": "7736:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 630,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7736:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 633,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7761:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 661,
												"src": "7753:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 632,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7753:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7735:32:2"
									},
									"returnParameters": {
										"id": 635,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7777:0:2"
									},
									"scope": 821,
									"src": "7721:208:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 693,
										"nodeType": "Block",
										"src": "8303:150:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 674,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 669,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 664,
														"src": "8317:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 672,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8336:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 671,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8328:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 670,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8328:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 673,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8328:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8317:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 683,
												"nodeType": "IfStatement",
												"src": "8313:89:2",
												"trueBody": {
													"id": 682,
													"nodeType": "Block",
													"src": "8340:62:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 678,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8388:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 677,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8380:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 676,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8380:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 679,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8380:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 675,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 186,
																	"src": "8361:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 680,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8361:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 681,
															"nodeType": "RevertStatement",
															"src": "8354:37:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 685,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 664,
															"src": "8419:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 688,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8436:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 687,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8428:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 686,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8428:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 689,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8428:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 690,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 666,
															"src": "8440:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 684,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 628,
														"src": "8411:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8411:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 692,
												"nodeType": "ExpressionStatement",
												"src": "8411:35:2"
											}
										]
									},
									"documentation": {
										"id": 662,
										"nodeType": "StructuredDocumentation",
										"src": "7935:307:2",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 694,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "8256:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 664,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8270:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 694,
												"src": "8262:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 663,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8262:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 666,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8287:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 694,
												"src": "8279:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 665,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8279:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8261:32:2"
									},
									"returnParameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8303:0:2"
									},
									"scope": 821,
									"src": "8247:206:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 711,
										"nodeType": "Block",
										"src": "9063:54:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 705,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 697,
															"src": "9082:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 706,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 699,
															"src": "9089:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 707,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 701,
															"src": "9098:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 708,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9105:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 704,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															712,
															772
														],
														"referencedDeclaration": 772,
														"src": "9073:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 709,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9073:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 710,
												"nodeType": "ExpressionStatement",
												"src": "9073:37:2"
											}
										]
									},
									"documentation": {
										"id": 695,
										"nodeType": "StructuredDocumentation",
										"src": "8459:525:2",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 712,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8998:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 702,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 697,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9015:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 712,
												"src": "9007:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 696,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9007:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9030:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 712,
												"src": "9022:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 698,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9022:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9047:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 712,
												"src": "9039:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 700,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9039:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9006:47:2"
									},
									"returnParameters": {
										"id": 703,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9063:0:2"
									},
									"scope": 821,
									"src": "8989:128:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 771,
										"nodeType": "Block",
										"src": "10047:334:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 729,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 724,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 715,
														"src": "10061:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 727,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10078:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 726,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10070:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 725,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10070:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 728,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10070:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10061:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 738,
												"nodeType": "IfStatement",
												"src": "10057:89:2",
												"trueBody": {
													"id": 737,
													"nodeType": "Block",
													"src": "10082:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 733,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10132:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 732,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10124:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 731,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10124:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 734,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10124:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 730,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 205,
																	"src": "10103:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 735,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10103:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 736,
															"nodeType": "RevertStatement",
															"src": "10096:39:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 744,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 739,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 717,
														"src": "10159:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 742,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10178:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 741,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10170:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 740,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10170:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 743,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10170:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10159:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 753,
												"nodeType": "IfStatement",
												"src": "10155:90:2",
												"trueBody": {
													"id": 752,
													"nodeType": "Block",
													"src": "10182:63:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 748,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10231:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 747,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10223:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 746,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10223:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 749,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10223:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 745,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 210,
																	"src": "10203:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 750,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10203:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 751,
															"nodeType": "RevertStatement",
															"src": "10196:38:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 760,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 754,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 335,
																"src": "10254:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 757,
															"indexExpression": {
																"id": 755,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 715,
																"src": "10266:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10254:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 758,
														"indexExpression": {
															"id": 756,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 717,
															"src": "10273:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10254:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 759,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 719,
														"src": "10284:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10254:35:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 761,
												"nodeType": "ExpressionStatement",
												"src": "10254:35:2"
											},
											{
												"condition": {
													"id": 762,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 721,
													"src": "10303:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 770,
												"nodeType": "IfStatement",
												"src": "10299:76:2",
												"trueBody": {
													"id": 769,
													"nodeType": "Block",
													"src": "10314:61:2",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 764,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 715,
																		"src": "10342:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 765,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 717,
																		"src": "10349:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 766,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 719,
																		"src": "10358:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 763,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 842,
																	"src": "10333:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 767,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10333:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 768,
															"nodeType": "EmitStatement",
															"src": "10328:36:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 713,
										"nodeType": "StructuredDocumentation",
										"src": "9123:821:2",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 772,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9958:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 722,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 715,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9975:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "9967:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 714,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9967:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 717,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9990:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "9982:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 716,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9982:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10007:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "9999:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 718,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9999:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 721,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "10019:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "10014:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 720,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10014:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9966:63:2"
									},
									"returnParameters": {
										"id": 723,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10047:0:2"
									},
									"scope": 821,
									"src": "9949:432:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 819,
										"nodeType": "Block",
										"src": "10752:388:2",
										"statements": [
											{
												"assignments": [
													783
												],
												"declarations": [
													{
														"constant": false,
														"id": 783,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10770:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 819,
														"src": "10762:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 782,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10762:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 788,
												"initialValue": {
													"arguments": [
														{
															"id": 785,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 775,
															"src": "10799:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 786,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 777,
															"src": "10806:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 784,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 448,
														"src": "10789:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 787,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10789:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10762:52:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 795,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 789,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 783,
														"src": "10828:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 792,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10853:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 791,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10853:7:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 790,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10848:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 793,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10848:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 794,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10862:3:2",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10848:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10828:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 818,
												"nodeType": "IfStatement",
												"src": "10824:310:2",
												"trueBody": {
													"id": 817,
													"nodeType": "Block",
													"src": "10867:267:2",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 798,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 796,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 783,
																	"src": "10885:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 797,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 779,
																	"src": "10904:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10885:24:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 806,
															"nodeType": "IfStatement",
															"src": "10881:130:2",
															"trueBody": {
																"id": 805,
																"nodeType": "Block",
																"src": "10911:100:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 800,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 777,
																					"src": "10963:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 801,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 783,
																					"src": "10972:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 802,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 779,
																					"src": "10990:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 799,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 200,
																				"src": "10936:26:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 803,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10936:60:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 804,
																		"nodeType": "RevertStatement",
																		"src": "10929:67:2"
																	}
																]
															}
														},
														{
															"id": 816,
															"nodeType": "UncheckedBlock",
															"src": "11024:100:2",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 808,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 775,
																				"src": "11061:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 809,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 777,
																				"src": "11068:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 812,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 810,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 783,
																					"src": "11077:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 811,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 779,
																					"src": "11096:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11077:24:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 813,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11103:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 807,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				712,
																				772
																			],
																			"referencedDeclaration": 772,
																			"src": "11052:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 814,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11052:57:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 815,
																	"nodeType": "ExpressionStatement",
																	"src": "11052:57:2"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 773,
										"nodeType": "StructuredDocumentation",
										"src": "10387:271:2",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 820,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10672:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 780,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 775,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10696:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "10688:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 774,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10688:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 777,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10711:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "10703:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 776,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10703:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 779,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10728:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "10720:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 778,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10720:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10687:47:2"
									},
									"returnParameters": {
										"id": 781,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10752:0:2"
									},
									"scope": 821,
									"src": "10663:477:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 822,
							"src": "1401:9741:2",
							"usedErrors": [
								181,
								186,
								191,
								200,
								205,
								210
							],
							"usedEvents": [
								833,
								842
							]
						}
					],
					"src": "105:11038:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							899
						]
					},
					"id": 900,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 823,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 824,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 899,
							"linearizedBaseContracts": [
								899
							],
							"name": "IERC20",
							"nameLocation": "213:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 825,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 833,
									"name": "Transfer",
									"nameLocation": "395:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 832,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 827,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 833,
												"src": "404:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 826,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 829,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 833,
												"src": "426:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 828,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 831,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 833,
												"src": "446:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 830,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:3"
									},
									"src": "389:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 834,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 842,
									"name": "Approval",
									"nameLocation": "626:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 841,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 836,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 842,
												"src": "635:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 835,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 838,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 842,
												"src": "658:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 837,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 840,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 842,
												"src": "683:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 839,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:3"
									},
									"src": "620:78:3"
								},
								{
									"documentation": {
										"id": 843,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:3",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 848,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 844,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:3"
									},
									"returnParameters": {
										"id": 847,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 846,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 848,
												"src": "820:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 845,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:3"
									},
									"scope": 899,
									"src": "774:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 849,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:3",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 856,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 852,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 851,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 856,
												"src": "930:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 850,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:3"
									},
									"returnParameters": {
										"id": 855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 854,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 856,
												"src": "970:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 853,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:3"
									},
									"scope": 899,
									"src": "911:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 857,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:3",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 866,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 862,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "1221:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 858,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 861,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "1233:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 860,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:3"
									},
									"returnParameters": {
										"id": 865,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 864,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "1266:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 863,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:3"
									},
									"scope": 899,
									"src": "1203:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 867,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 876,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 869,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "1566:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 868,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "1581:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 870,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:3"
									},
									"returnParameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "1621:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 873,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:3"
									},
									"scope": 899,
									"src": "1547:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 877,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:3",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 886,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 882,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 879,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "2325:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 878,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 881,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "2342:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 880,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:3"
									},
									"returnParameters": {
										"id": 885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 884,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "2375:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 883,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:3"
									},
									"scope": 899,
									"src": "2308:73:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 887,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 898,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 894,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 889,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 898,
												"src": "2711:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 888,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 898,
												"src": "2725:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 890,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 893,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 898,
												"src": "2737:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 892,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:3"
									},
									"returnParameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 898,
												"src": "2770:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 895,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:3"
									},
									"scope": 899,
									"src": "2689:87:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 900,
							"src": "203:2575:3",
							"usedErrors": [],
							"usedEvents": [
								833,
								842
							]
						}
					],
					"src": "106:2673:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
					"exportedSymbols": {
						"ERC20": [
							821
						],
						"ERC4626": [
							1584
						],
						"IERC20": [
							899
						],
						"IERC20Metadata": [
							1610
						],
						"IERC4626": [
							169
						],
						"Math": [
							3273
						],
						"SafeERC20": [
							1936
						]
					},
					"id": 1585,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 901,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "118:24:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 905,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1585,
							"sourceUnit": 822,
							"src": "144:59:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 902,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 899,
										"src": "152:6:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 903,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1610,
										"src": "160:14:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 904,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 821,
										"src": "176:5:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "../utils/SafeERC20.sol",
							"id": 907,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1585,
							"sourceUnit": 1937,
							"src": "204:49:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 906,
										"name": "SafeERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1936,
										"src": "212:9:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC4626.sol",
							"file": "../../../interfaces/IERC4626.sol",
							"id": 909,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1585,
							"sourceUnit": 170,
							"src": "254:58:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 908,
										"name": "IERC4626",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 169,
										"src": "262:8:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
							"file": "../../../utils/math/Math.sol",
							"id": 911,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1585,
							"sourceUnit": 3274,
							"src": "313:50:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 910,
										"name": "Math",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3273,
										"src": "321:4:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 913,
										"name": "ERC20",
										"nameLocations": [
											"3187:5:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 821,
										"src": "3187:5:4"
									},
									"id": 914,
									"nodeType": "InheritanceSpecifier",
									"src": "3187:5:4"
								},
								{
									"baseName": {
										"id": 915,
										"name": "IERC4626",
										"nameLocations": [
											"3194:8:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 169,
										"src": "3194:8:4"
									},
									"id": 916,
									"nodeType": "InheritanceSpecifier",
									"src": "3194:8:4"
								}
							],
							"canonicalName": "ERC4626",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 912,
								"nodeType": "StructuredDocumentation",
								"src": "365:2792:4",
								"text": " @dev Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in\n https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\n This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for\n underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n contract and not the \"assets\" token which is an independent contract.\n [CAUTION]\n ====\n In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\n with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\n attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\n deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\n similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\n verifying the amount received is as expected, using a wrapper that performs these checks such as\n https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\n corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\n decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\n determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\n (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\n donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\n expensive than it is profitable. More details about the underlying math can be found\n xref:erc4626.adoc#inflation-attack[here].\n The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\n to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\n will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\n bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\n `_convertToShares` and `_convertToAssets` functions.\n To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\n ===="
							},
							"fullyImplemented": true,
							"id": 1584,
							"linearizedBaseContracts": [
								1584,
								169,
								821,
								211,
								1610,
								899,
								2219
							],
							"name": "ERC4626",
							"nameLocation": "3176:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 919,
									"libraryName": {
										"id": 917,
										"name": "Math",
										"nameLocations": [
											"3215:4:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3273,
										"src": "3215:4:4"
									},
									"nodeType": "UsingForDirective",
									"src": "3209:23:4",
									"typeName": {
										"id": 918,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "3224:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 922,
									"mutability": "immutable",
									"name": "_asset",
									"nameLocation": "3263:6:4",
									"nodeType": "VariableDeclaration",
									"scope": 1584,
									"src": "3238:31:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$899",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 921,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 920,
											"name": "IERC20",
											"nameLocations": [
												"3238:6:4"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 899,
											"src": "3238:6:4"
										},
										"referencedDeclaration": 899,
										"src": "3238:6:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$899",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 924,
									"mutability": "immutable",
									"name": "_underlyingDecimals",
									"nameLocation": "3299:19:4",
									"nodeType": "VariableDeclaration",
									"scope": 1584,
									"src": "3275:43:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 923,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "3275:5:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 925,
										"nodeType": "StructuredDocumentation",
										"src": "3325:92:4",
										"text": " @dev Attempted to deposit more assets than the max amount for `receiver`."
									},
									"errorSelector": "79012fb2",
									"id": 933,
									"name": "ERC4626ExceededMaxDeposit",
									"nameLocation": "3428:25:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3462:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "3454:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 926,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3454:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 929,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "3480:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "3472:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 928,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3472:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "max",
												"nameLocation": "3496:3:4",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "3488:11:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 930,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3453:47:4"
									},
									"src": "3422:79:4"
								},
								{
									"documentation": {
										"id": 934,
										"nodeType": "StructuredDocumentation",
										"src": "3507:89:4",
										"text": " @dev Attempted to mint more shares than the max amount for `receiver`."
									},
									"errorSelector": "284ff667",
									"id": 942,
									"name": "ERC4626ExceededMaxMint",
									"nameLocation": "3607:22:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 941,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3638:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 942,
												"src": "3630:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 935,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3630:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 938,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "3656:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 942,
												"src": "3648:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 937,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3648:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 940,
												"mutability": "mutable",
												"name": "max",
												"nameLocation": "3672:3:4",
												"nodeType": "VariableDeclaration",
												"scope": 942,
												"src": "3664:11:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 939,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3664:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3629:47:4"
									},
									"src": "3601:76:4"
								},
								{
									"documentation": {
										"id": 943,
										"nodeType": "StructuredDocumentation",
										"src": "3683:93:4",
										"text": " @dev Attempted to withdraw more assets than the max amount for `receiver`."
									},
									"errorSelector": "fe9cceec",
									"id": 951,
									"name": "ERC4626ExceededMaxWithdraw",
									"nameLocation": "3787:26:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 950,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 945,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3822:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 951,
												"src": "3814:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 944,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3814:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 947,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "3837:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 951,
												"src": "3829:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 946,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3829:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "max",
												"nameLocation": "3853:3:4",
												"nodeType": "VariableDeclaration",
												"scope": 951,
												"src": "3845:11:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 948,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3845:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3813:44:4"
									},
									"src": "3781:77:4"
								},
								{
									"documentation": {
										"id": 952,
										"nodeType": "StructuredDocumentation",
										"src": "3864:91:4",
										"text": " @dev Attempted to redeem more shares than the max amount for `receiver`."
									},
									"errorSelector": "b94abeec",
									"id": 960,
									"name": "ERC4626ExceededMaxRedeem",
									"nameLocation": "3966:24:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 959,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 954,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3999:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 960,
												"src": "3991:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 953,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3991:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 956,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "4014:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 960,
												"src": "4006:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 955,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4006:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 958,
												"mutability": "mutable",
												"name": "max",
												"nameLocation": "4030:3:4",
												"nodeType": "VariableDeclaration",
												"scope": 960,
												"src": "4022:11:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 957,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4022:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3990:44:4"
									},
									"src": "3960:75:4"
								},
								{
									"body": {
										"id": 986,
										"nodeType": "Block",
										"src": "4192:168:4",
										"statements": [
											{
												"assignments": [
													968,
													970
												],
												"declarations": [
													{
														"constant": false,
														"id": 968,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4208:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 986,
														"src": "4203:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 967,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4203:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 970,
														"mutability": "mutable",
														"name": "assetDecimals",
														"nameLocation": "4223:13:4",
														"nodeType": "VariableDeclaration",
														"scope": 986,
														"src": "4217:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 969,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "4217:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 974,
												"initialValue": {
													"arguments": [
														{
															"id": 972,
															"name": "asset_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 964,
															"src": "4261:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$899",
																"typeString": "contract IERC20"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$899",
																"typeString": "contract IERC20"
															}
														],
														"id": 971,
														"name": "_tryGetAssetDecimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1054,
														"src": "4240:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_contract$_IERC20_$899_$returns$_t_bool_$_t_uint8_$",
															"typeString": "function (contract IERC20) view returns (bool,uint8)"
														}
													},
													"id": 973,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4240:28:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint8_$",
														"typeString": "tuple(bool,uint8)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4202:66:4"
											},
											{
												"expression": {
													"id": 980,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 975,
														"name": "_underlyingDecimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 924,
														"src": "4278:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"id": 976,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 968,
															"src": "4300:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"hexValue": "3138",
															"id": 978,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4326:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_18_by_1",
																"typeString": "int_const 18"
															},
															"value": "18"
														},
														"id": 979,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "4300:28:4",
														"trueExpression": {
															"id": 977,
															"name": "assetDecimals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 970,
															"src": "4310:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4278:50:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 981,
												"nodeType": "ExpressionStatement",
												"src": "4278:50:4"
											},
											{
												"expression": {
													"id": 984,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 982,
														"name": "_asset",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 922,
														"src": "4338:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$899",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 983,
														"name": "asset_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 964,
														"src": "4347:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$899",
															"typeString": "contract IERC20"
														}
													},
													"src": "4338:15:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$899",
														"typeString": "contract IERC20"
													}
												},
												"id": 985,
												"nodeType": "ExpressionStatement",
												"src": "4338:15:4"
											}
										]
									},
									"documentation": {
										"id": 961,
										"nodeType": "StructuredDocumentation",
										"src": "4041:119:4",
										"text": " @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777)."
									},
									"id": 987,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 965,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 964,
												"mutability": "mutable",
												"name": "asset_",
												"nameLocation": "4184:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 987,
												"src": "4177:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$899",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 963,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 962,
														"name": "IERC20",
														"nameLocations": [
															"4177:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 899,
														"src": "4177:6:4"
													},
													"referencedDeclaration": 899,
													"src": "4177:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$899",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4176:15:4"
									},
									"returnParameters": {
										"id": 966,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4192:0:4"
									},
									"scope": 1584,
									"src": "4165:195:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1053,
										"nodeType": "Block",
										"src": "4583:453:4",
										"statements": [
											{
												"assignments": [
													999,
													1001
												],
												"declarations": [
													{
														"constant": false,
														"id": 999,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4599:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 1053,
														"src": "4594:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 998,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4594:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1001,
														"mutability": "mutable",
														"name": "encodedDecimals",
														"nameLocation": "4621:15:4",
														"nodeType": "VariableDeclaration",
														"scope": 1053,
														"src": "4608:28:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1000,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4608:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1014,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1009,
																		"name": "IERC20Metadata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1610,
																		"src": "4695:14:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IERC20Metadata_$1610_$",
																			"typeString": "type(contract IERC20Metadata)"
																		}
																	},
																	"id": 1010,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "4710:8:4",
																	"memberName": "decimals",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1609,
																	"src": "4695:23:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_declaration_view$__$returns$_t_uint8_$",
																		"typeString": "function IERC20Metadata.decimals() view returns (uint8)"
																	}
																},
																{
																	"components": [],
																	"id": 1011,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4720:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_declaration_view$__$returns$_t_uint8_$",
																		"typeString": "function IERC20Metadata.decimals() view returns (uint8)"
																	},
																	{
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																],
																"expression": {
																	"id": 1007,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4680:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1008,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4684:10:4",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "4680:14:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1012,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4680:43:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1004,
																	"name": "asset_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 991,
																	"src": "4648:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$899",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$899",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1003,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4640:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1002,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4640:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 1005,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4640:15:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1006,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4656:10:4",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "4640:26:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1013,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4640:93:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4593:140:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1020,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1015,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 999,
														"src": "4747:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1019,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 1016,
																"name": "encodedDecimals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1001,
																"src": "4758:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1017,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4774:6:4",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4758:22:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"hexValue": "3332",
															"id": 1018,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4784:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														},
														"src": "4758:28:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4747:39:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1048,
												"nodeType": "IfStatement",
												"src": "4743:260:4",
												"trueBody": {
													"id": 1047,
													"nodeType": "Block",
													"src": "4788:215:4",
													"statements": [
														{
															"assignments": [
																1022
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1022,
																	"mutability": "mutable",
																	"name": "returnedDecimals",
																	"nameLocation": "4810:16:4",
																	"nodeType": "VariableDeclaration",
																	"scope": 1047,
																	"src": "4802:24:4",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1021,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "4802:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1030,
															"initialValue": {
																"arguments": [
																	{
																		"id": 1025,
																		"name": "encodedDecimals",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1001,
																		"src": "4840:15:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"components": [
																			{
																				"id": 1027,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "4858:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint256_$",
																					"typeString": "type(uint256)"
																				},
																				"typeName": {
																					"id": 1026,
																					"name": "uint256",
																					"nodeType": "ElementaryTypeName",
																					"src": "4858:7:4",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"id": 1028,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4857:9:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		}
																	],
																	"expression": {
																		"id": 1023,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "4829:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1024,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "4833:6:4",
																	"memberName": "decode",
																	"nodeType": "MemberAccess",
																	"src": "4829:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1029,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4829:38:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4802:65:4"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1037,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1031,
																	"name": "returnedDecimals",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1022,
																	"src": "4885:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 1034,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "4910:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 1033,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "4910:5:4",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				}
																			],
																			"id": 1032,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "4905:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 1035,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4905:11:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint8",
																			"typeString": "type(uint8)"
																		}
																	},
																	"id": 1036,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "4917:3:4",
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "4905:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "4885:35:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1046,
															"nodeType": "IfStatement",
															"src": "4881:112:4",
															"trueBody": {
																"id": 1045,
																"nodeType": "Block",
																"src": "4922:71:4",
																"statements": [
																	{
																		"expression": {
																			"components": [
																				{
																					"hexValue": "74727565",
																					"id": 1038,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "bool",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4948:4:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					"value": "true"
																				},
																				{
																					"arguments": [
																						{
																							"id": 1041,
																							"name": "returnedDecimals",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1022,
																							"src": "4960:16:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"id": 1040,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4954:5:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint8_$",
																							"typeString": "type(uint8)"
																						},
																						"typeName": {
																							"id": 1039,
																							"name": "uint8",
																							"nodeType": "ElementaryTypeName",
																							"src": "4954:5:4",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 1042,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4954:23:4",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				}
																			],
																			"id": 1043,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "4947:31:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$_t_bool_$_t_uint8_$",
																				"typeString": "tuple(bool,uint8)"
																			}
																		},
																		"functionReturnParameters": 997,
																		"id": 1044,
																		"nodeType": "Return",
																		"src": "4940:38:4"
																	}
																]
															}
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "66616c7365",
															"id": 1049,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5020:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														},
														{
															"hexValue": "30",
															"id": 1050,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5027:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"id": 1051,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5019:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
														"typeString": "tuple(bool,int_const 0)"
													}
												},
												"functionReturnParameters": 997,
												"id": 1052,
												"nodeType": "Return",
												"src": "5012:17:4"
											}
										]
									},
									"documentation": {
										"id": 988,
										"nodeType": "StructuredDocumentation",
										"src": "4366:132:4",
										"text": " @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way."
									},
									"id": 1054,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_tryGetAssetDecimals",
									"nameLocation": "4512:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 991,
												"mutability": "mutable",
												"name": "asset_",
												"nameLocation": "4540:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1054,
												"src": "4533:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$899",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 990,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 989,
														"name": "IERC20",
														"nameLocations": [
															"4533:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 899,
														"src": "4533:6:4"
													},
													"referencedDeclaration": 899,
													"src": "4533:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$899",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4532:15:4"
									},
									"returnParameters": {
										"id": 997,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 994,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1054,
												"src": "4570:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 993,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4570:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 996,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1054,
												"src": "4576:5:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 995,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4576:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4569:13:4"
									},
									"scope": 1584,
									"src": "4503:533:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"baseFunctions": [
										385,
										1609
									],
									"body": {
										"id": 1068,
										"nodeType": "Block",
										"src": "5529:63:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 1066,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1063,
														"name": "_underlyingDecimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 924,
														"src": "5546:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1064,
															"name": "_decimalsOffset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1583,
															"src": "5568:15:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																"typeString": "function () view returns (uint8)"
															}
														},
														"id": 1065,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5568:17:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "5546:39:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 1062,
												"id": 1067,
												"nodeType": "Return",
												"src": "5539:46:4"
											}
										]
									},
									"documentation": {
										"id": 1055,
										"nodeType": "StructuredDocumentation",
										"src": "5042:394:4",
										"text": " @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\n \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\n See {IERC20Metadata-decimals}."
									},
									"functionSelector": "313ce567",
									"id": 1069,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "5450:8:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1059,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1057,
												"name": "IERC20Metadata",
												"nameLocations": [
													"5490:14:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1610,
												"src": "5490:14:4"
											},
											{
												"id": 1058,
												"name": "ERC20",
												"nameLocations": [
													"5506:5:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 821,
												"src": "5506:5:4"
											}
										],
										"src": "5481:31:4"
									},
									"parameters": {
										"id": 1056,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5458:2:4"
									},
									"returnParameters": {
										"id": 1062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1061,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1069,
												"src": "5522:5:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1060,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5522:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5521:7:4"
									},
									"scope": 1584,
									"src": "5441:151:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										38
									],
									"body": {
										"id": 1080,
										"nodeType": "Block",
										"src": "5691:39:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1077,
															"name": "_asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 922,
															"src": "5716:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$899",
																"typeString": "contract IERC20"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$899",
																"typeString": "contract IERC20"
															}
														],
														"id": 1076,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "5708:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 1075,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5708:7:4",
															"typeDescriptions": {}
														}
													},
													"id": 1078,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5708:15:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1074,
												"id": 1079,
												"nodeType": "Return",
												"src": "5701:22:4"
											}
										]
									},
									"documentation": {
										"id": 1070,
										"nodeType": "StructuredDocumentation",
										"src": "5598:33:4",
										"text": "@dev See {IERC4626-asset}. "
									},
									"functionSelector": "38d52e0f",
									"id": 1081,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "asset",
									"nameLocation": "5645:5:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1071,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5650:2:4"
									},
									"returnParameters": {
										"id": 1074,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1073,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1081,
												"src": "5682:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1072,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5682:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5681:9:4"
									},
									"scope": 1584,
									"src": "5636:94:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										44
									],
									"body": {
										"id": 1095,
										"nodeType": "Block",
										"src": "5841:55:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1091,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5883:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC4626_$1584",
																		"typeString": "contract ERC4626"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC4626_$1584",
																		"typeString": "contract ERC4626"
																	}
																],
																"id": 1090,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5875:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1089,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5875:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 1092,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5875:13:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1087,
															"name": "_asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 922,
															"src": "5858:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$899",
																"typeString": "contract IERC20"
															}
														},
														"id": 1088,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5865:9:4",
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 856,
														"src": "5858:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1093,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5858:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1086,
												"id": 1094,
												"nodeType": "Return",
												"src": "5851:38:4"
											}
										]
									},
									"documentation": {
										"id": 1082,
										"nodeType": "StructuredDocumentation",
										"src": "5736:39:4",
										"text": "@dev See {IERC4626-totalAssets}. "
									},
									"functionSelector": "01e1d114",
									"id": 1096,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalAssets",
									"nameLocation": "5789:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1083,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5800:2:4"
									},
									"returnParameters": {
										"id": 1086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1085,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1096,
												"src": "5832:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1084,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5832:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5831:9:4"
									},
									"scope": 1584,
									"src": "5780:116:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										52
									],
									"body": {
										"id": 1111,
										"nodeType": "Block",
										"src": "6029:69:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1105,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1099,
															"src": "6063:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1106,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3273,
																	"src": "6071:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3273_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1107,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6076:8:4",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2230,
																"src": "6071:13:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2230_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6085:5:4",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2226,
															"src": "6071:19:4",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1104,
														"name": "_convertToShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1463,
														"src": "6046:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2230_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6046:45:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1103,
												"id": 1110,
												"nodeType": "Return",
												"src": "6039:52:4"
											}
										]
									},
									"documentation": {
										"id": 1097,
										"nodeType": "StructuredDocumentation",
										"src": "5902:43:4",
										"text": "@dev See {IERC4626-convertToShares}. "
									},
									"functionSelector": "c6e6f592",
									"id": 1112,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "convertToShares",
									"nameLocation": "5959:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1099,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "5983:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "5975:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1098,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5975:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5974:16:4"
									},
									"returnParameters": {
										"id": 1103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1102,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "6020:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1101,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6020:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6019:9:4"
									},
									"scope": 1584,
									"src": "5950:148:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										60
									],
									"body": {
										"id": 1127,
										"nodeType": "Block",
										"src": "6231:69:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1121,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1115,
															"src": "6265:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1122,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3273,
																	"src": "6273:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3273_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1123,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6278:8:4",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2230,
																"src": "6273:13:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2230_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1124,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6287:5:4",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2226,
															"src": "6273:19:4",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1120,
														"name": "_convertToAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1491,
														"src": "6248:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2230_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6248:45:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1119,
												"id": 1126,
												"nodeType": "Return",
												"src": "6241:52:4"
											}
										]
									},
									"documentation": {
										"id": 1113,
										"nodeType": "StructuredDocumentation",
										"src": "6104:43:4",
										"text": "@dev See {IERC4626-convertToAssets}. "
									},
									"functionSelector": "07a2d13a",
									"id": 1128,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "convertToAssets",
									"nameLocation": "6161:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1115,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "6185:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1128,
												"src": "6177:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1114,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6177:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6176:16:4"
									},
									"returnParameters": {
										"id": 1119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1118,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1128,
												"src": "6222:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6222:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6221:9:4"
									},
									"scope": 1584,
									"src": "6152:148:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										68
									],
									"body": {
										"id": 1142,
										"nodeType": "Block",
										"src": "6416:41:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 1138,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6438:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1137,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6438:7:4",
																	"typeDescriptions": {}
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																}
															],
															"id": 1136,
															"name": "type",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967269,
															"src": "6433:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1139,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6433:13:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_magic_meta_type_t_uint256",
															"typeString": "type(uint256)"
														}
													},
													"id": 1140,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"memberLocation": "6447:3:4",
													"memberName": "max",
													"nodeType": "MemberAccess",
													"src": "6433:17:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1135,
												"id": 1141,
												"nodeType": "Return",
												"src": "6426:24:4"
											}
										]
									},
									"documentation": {
										"id": 1129,
										"nodeType": "StructuredDocumentation",
										"src": "6306:38:4",
										"text": "@dev See {IERC4626-maxDeposit}. "
									},
									"functionSelector": "402d267d",
									"id": 1143,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxDeposit",
									"nameLocation": "6358:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1143,
												"src": "6369:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1130,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6369:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6368:9:4"
									},
									"returnParameters": {
										"id": 1135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1134,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1143,
												"src": "6407:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1133,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6407:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6406:9:4"
									},
									"scope": 1584,
									"src": "6349:108:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										94
									],
									"body": {
										"id": 1157,
										"nodeType": "Block",
										"src": "6567:41:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 1153,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6589:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1152,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6589:7:4",
																	"typeDescriptions": {}
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																}
															],
															"id": 1151,
															"name": "type",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967269,
															"src": "6584:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1154,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6584:13:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_magic_meta_type_t_uint256",
															"typeString": "type(uint256)"
														}
													},
													"id": 1155,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"memberLocation": "6598:3:4",
													"memberName": "max",
													"nodeType": "MemberAccess",
													"src": "6584:17:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1150,
												"id": 1156,
												"nodeType": "Return",
												"src": "6577:24:4"
											}
										]
									},
									"documentation": {
										"id": 1144,
										"nodeType": "StructuredDocumentation",
										"src": "6463:35:4",
										"text": "@dev See {IERC4626-maxMint}. "
									},
									"functionSelector": "c63d75b6",
									"id": 1158,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxMint",
									"nameLocation": "6512:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1146,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1158,
												"src": "6520:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1145,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6520:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6519:9:4"
									},
									"returnParameters": {
										"id": 1150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1149,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1158,
												"src": "6558:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1148,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6558:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6557:9:4"
									},
									"scope": 1584,
									"src": "6503:105:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										120
									],
									"body": {
										"id": 1175,
										"nodeType": "Block",
										"src": "6732:79:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1168,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1161,
																	"src": "6776:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1167,
																"name": "balanceOf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 407,
																"src": "6766:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address) view returns (uint256)"
																}
															},
															"id": 1169,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6766:16:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1170,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3273,
																	"src": "6784:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3273_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1171,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6789:8:4",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2230,
																"src": "6784:13:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2230_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1172,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6798:5:4",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2226,
															"src": "6784:19:4",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1166,
														"name": "_convertToAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1491,
														"src": "6749:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2230_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1173,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6749:55:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1165,
												"id": 1174,
												"nodeType": "Return",
												"src": "6742:62:4"
											}
										]
									},
									"documentation": {
										"id": 1159,
										"nodeType": "StructuredDocumentation",
										"src": "6614:39:4",
										"text": "@dev See {IERC4626-maxWithdraw}. "
									},
									"functionSelector": "ce96cb77",
									"id": 1176,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxWithdraw",
									"nameLocation": "6667:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1161,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6687:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "6679:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6679:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6678:15:4"
									},
									"returnParameters": {
										"id": 1165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1164,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "6723:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6723:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6722:9:4"
									},
									"scope": 1584,
									"src": "6658:153:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										148
									],
									"body": {
										"id": 1188,
										"nodeType": "Block",
										"src": "6931:40:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1185,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1179,
															"src": "6958:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1184,
														"name": "balanceOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 407,
														"src": "6948:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6948:16:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1183,
												"id": 1187,
												"nodeType": "Return",
												"src": "6941:23:4"
											}
										]
									},
									"documentation": {
										"id": 1177,
										"nodeType": "StructuredDocumentation",
										"src": "6817:37:4",
										"text": "@dev See {IERC4626-maxRedeem}. "
									},
									"functionSelector": "d905777e",
									"id": 1189,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxRedeem",
									"nameLocation": "6868:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1179,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6886:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1189,
												"src": "6878:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1178,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6878:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6877:15:4"
									},
									"returnParameters": {
										"id": 1183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1182,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1189,
												"src": "6922:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1181,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6922:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6921:9:4"
									},
									"scope": 1584,
									"src": "6859:112:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										76
									],
									"body": {
										"id": 1204,
										"nodeType": "Block",
										"src": "7102:69:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1198,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1192,
															"src": "7136:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1199,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3273,
																	"src": "7144:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3273_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1200,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7149:8:4",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2230,
																"src": "7144:13:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2230_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1201,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7158:5:4",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2226,
															"src": "7144:19:4",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1197,
														"name": "_convertToShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1463,
														"src": "7119:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2230_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7119:45:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1196,
												"id": 1203,
												"nodeType": "Return",
												"src": "7112:52:4"
											}
										]
									},
									"documentation": {
										"id": 1190,
										"nodeType": "StructuredDocumentation",
										"src": "6977:42:4",
										"text": "@dev See {IERC4626-previewDeposit}. "
									},
									"functionSelector": "ef8b30f7",
									"id": 1205,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewDeposit",
									"nameLocation": "7033:14:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1192,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "7056:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1205,
												"src": "7048:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1191,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7048:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7047:16:4"
									},
									"returnParameters": {
										"id": 1196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1205,
												"src": "7093:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7093:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7092:9:4"
									},
									"scope": 1584,
									"src": "7024:147:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										102
									],
									"body": {
										"id": 1220,
										"nodeType": "Block",
										"src": "7296:68:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1214,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1208,
															"src": "7330:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1215,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3273,
																	"src": "7338:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3273_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1216,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7343:8:4",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2230,
																"src": "7338:13:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2230_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1217,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7352:4:4",
															"memberName": "Ceil",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2227,
															"src": "7338:18:4",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1213,
														"name": "_convertToAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1491,
														"src": "7313:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2230_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1218,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7313:44:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1212,
												"id": 1219,
												"nodeType": "Return",
												"src": "7306:51:4"
											}
										]
									},
									"documentation": {
										"id": 1206,
										"nodeType": "StructuredDocumentation",
										"src": "7177:39:4",
										"text": "@dev See {IERC4626-previewMint}. "
									},
									"functionSelector": "b3d7f6b9",
									"id": 1221,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewMint",
									"nameLocation": "7230:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1208,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "7250:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1221,
												"src": "7242:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1207,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7242:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7241:16:4"
									},
									"returnParameters": {
										"id": 1212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1211,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1221,
												"src": "7287:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1210,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7287:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7286:9:4"
									},
									"scope": 1584,
									"src": "7221:143:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										128
									],
									"body": {
										"id": 1236,
										"nodeType": "Block",
										"src": "7497:68:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1230,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "7531:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1231,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3273,
																	"src": "7539:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3273_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1232,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7544:8:4",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2230,
																"src": "7539:13:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2230_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1233,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7553:4:4",
															"memberName": "Ceil",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2227,
															"src": "7539:18:4",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1229,
														"name": "_convertToShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1463,
														"src": "7514:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2230_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1234,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7514:44:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1228,
												"id": 1235,
												"nodeType": "Return",
												"src": "7507:51:4"
											}
										]
									},
									"documentation": {
										"id": 1222,
										"nodeType": "StructuredDocumentation",
										"src": "7370:43:4",
										"text": "@dev See {IERC4626-previewWithdraw}. "
									},
									"functionSelector": "0a28a477",
									"id": 1237,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewWithdraw",
									"nameLocation": "7427:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1224,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "7451:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1237,
												"src": "7443:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7443:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7442:16:4"
									},
									"returnParameters": {
										"id": 1228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1227,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1237,
												"src": "7488:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7488:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7487:9:4"
									},
									"scope": 1584,
									"src": "7418:147:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										156
									],
									"body": {
										"id": 1252,
										"nodeType": "Block",
										"src": "7694:69:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1246,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1240,
															"src": "7728:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1247,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3273,
																	"src": "7736:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3273_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1248,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7741:8:4",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2230,
																"src": "7736:13:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2230_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1249,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7750:5:4",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2226,
															"src": "7736:19:4",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1245,
														"name": "_convertToAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1491,
														"src": "7711:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2230_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7711:45:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1244,
												"id": 1251,
												"nodeType": "Return",
												"src": "7704:52:4"
											}
										]
									},
									"documentation": {
										"id": 1238,
										"nodeType": "StructuredDocumentation",
										"src": "7571:41:4",
										"text": "@dev See {IERC4626-previewRedeem}. "
									},
									"functionSelector": "4cdad506",
									"id": 1253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewRedeem",
									"nameLocation": "7626:13:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1240,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "7648:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1253,
												"src": "7640:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7640:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7639:16:4"
									},
									"returnParameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1253,
												"src": "7685:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7685:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7684:9:4"
									},
									"scope": 1584,
									"src": "7617:146:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										86
									],
									"body": {
										"id": 1296,
										"nodeType": "Block",
										"src": "7893:308:4",
										"statements": [
											{
												"assignments": [
													1264
												],
												"declarations": [
													{
														"constant": false,
														"id": 1264,
														"mutability": "mutable",
														"name": "maxAssets",
														"nameLocation": "7911:9:4",
														"nodeType": "VariableDeclaration",
														"scope": 1296,
														"src": "7903:17:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1263,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7903:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1268,
												"initialValue": {
													"arguments": [
														{
															"id": 1266,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1258,
															"src": "7934:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1265,
														"name": "maxDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1143,
														"src": "7923:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7923:20:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7903:40:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1271,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1269,
														"name": "assets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1256,
														"src": "7957:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1270,
														"name": "maxAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1264,
														"src": "7966:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7957:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1279,
												"nodeType": "IfStatement",
												"src": "7953:110:4",
												"trueBody": {
													"id": 1278,
													"nodeType": "Block",
													"src": "7977:86:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1273,
																		"name": "receiver",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1258,
																		"src": "8024:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1274,
																		"name": "assets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1256,
																		"src": "8034:6:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1275,
																		"name": "maxAssets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1264,
																		"src": "8042:9:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1272,
																	"name": "ERC4626ExceededMaxDeposit",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 933,
																	"src": "7998:25:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (address,uint256,uint256) pure returns (error)"
																	}
																},
																"id": 1276,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7998:54:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1277,
															"nodeType": "RevertStatement",
															"src": "7991:61:4"
														}
													]
												}
											},
											{
												"assignments": [
													1281
												],
												"declarations": [
													{
														"constant": false,
														"id": 1281,
														"mutability": "mutable",
														"name": "shares",
														"nameLocation": "8081:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 1296,
														"src": "8073:14:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1280,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8073:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1285,
												"initialValue": {
													"arguments": [
														{
															"id": 1283,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1256,
															"src": "8105:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1282,
														"name": "previewDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1205,
														"src": "8090:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1284,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8090:22:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8073:39:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1287,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2201,
																"src": "8131:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1288,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8131:12:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1289,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1258,
															"src": "8145:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1290,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1256,
															"src": "8155:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1291,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1281,
															"src": "8163:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1286,
														"name": "_deposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1528,
														"src": "8122:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1292,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8122:48:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1293,
												"nodeType": "ExpressionStatement",
												"src": "8122:48:4"
											},
											{
												"expression": {
													"id": 1294,
													"name": "shares",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1281,
													"src": "8188:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1262,
												"id": 1295,
												"nodeType": "Return",
												"src": "8181:13:4"
											}
										]
									},
									"documentation": {
										"id": 1254,
										"nodeType": "StructuredDocumentation",
										"src": "7769:35:4",
										"text": "@dev See {IERC4626-deposit}. "
									},
									"functionSelector": "6e553f65",
									"id": 1297,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "7818:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1256,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "7834:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1297,
												"src": "7826:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7826:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1258,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "7850:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1297,
												"src": "7842:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7842:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7825:34:4"
									},
									"returnParameters": {
										"id": 1262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1261,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1297,
												"src": "7884:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1260,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7884:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7883:9:4"
									},
									"scope": 1584,
									"src": "7809:392:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										112
									],
									"body": {
										"id": 1340,
										"nodeType": "Block",
										"src": "8549:299:4",
										"statements": [
											{
												"assignments": [
													1308
												],
												"declarations": [
													{
														"constant": false,
														"id": 1308,
														"mutability": "mutable",
														"name": "maxShares",
														"nameLocation": "8567:9:4",
														"nodeType": "VariableDeclaration",
														"scope": 1340,
														"src": "8559:17:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1307,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8559:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1312,
												"initialValue": {
													"arguments": [
														{
															"id": 1310,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1302,
															"src": "8587:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1309,
														"name": "maxMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1158,
														"src": "8579:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8579:17:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8559:37:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1315,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1313,
														"name": "shares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1300,
														"src": "8610:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1314,
														"name": "maxShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1308,
														"src": "8619:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8610:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1323,
												"nodeType": "IfStatement",
												"src": "8606:107:4",
												"trueBody": {
													"id": 1322,
													"nodeType": "Block",
													"src": "8630:83:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1317,
																		"name": "receiver",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1302,
																		"src": "8674:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1318,
																		"name": "shares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1300,
																		"src": "8684:6:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1319,
																		"name": "maxShares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1308,
																		"src": "8692:9:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1316,
																	"name": "ERC4626ExceededMaxMint",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 942,
																	"src": "8651:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (address,uint256,uint256) pure returns (error)"
																	}
																},
																"id": 1320,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8651:51:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1321,
															"nodeType": "RevertStatement",
															"src": "8644:58:4"
														}
													]
												}
											},
											{
												"assignments": [
													1325
												],
												"declarations": [
													{
														"constant": false,
														"id": 1325,
														"mutability": "mutable",
														"name": "assets",
														"nameLocation": "8731:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 1340,
														"src": "8723:14:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1324,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8723:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1329,
												"initialValue": {
													"arguments": [
														{
															"id": 1327,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1300,
															"src": "8752:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1326,
														"name": "previewMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1221,
														"src": "8740:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8740:19:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8723:36:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1331,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2201,
																"src": "8778:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1332,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8778:12:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1333,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1302,
															"src": "8792:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1334,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1325,
															"src": "8802:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1335,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1300,
															"src": "8810:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1330,
														"name": "_deposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1528,
														"src": "8769:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8769:48:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1337,
												"nodeType": "ExpressionStatement",
												"src": "8769:48:4"
											},
											{
												"expression": {
													"id": 1338,
													"name": "assets",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1325,
													"src": "8835:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1306,
												"id": 1339,
												"nodeType": "Return",
												"src": "8828:13:4"
											}
										]
									},
									"documentation": {
										"id": 1298,
										"nodeType": "StructuredDocumentation",
										"src": "8207:256:4",
										"text": "@dev See {IERC4626-mint}.\n As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n In this case, the shares will be minted without requiring any assets to be deposited."
									},
									"functionSelector": "94bf804d",
									"id": 1341,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "8477:4:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1300,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "8490:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "8482:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1299,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8482:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1302,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "8506:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "8498:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1301,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8498:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8481:34:4"
									},
									"returnParameters": {
										"id": 1306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1305,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "8540:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1304,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8540:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8539:9:4"
									},
									"scope": 1584,
									"src": "8468:380:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										140
									],
									"body": {
										"id": 1387,
										"nodeType": "Block",
										"src": "8995:313:4",
										"statements": [
											{
												"assignments": [
													1354
												],
												"declarations": [
													{
														"constant": false,
														"id": 1354,
														"mutability": "mutable",
														"name": "maxAssets",
														"nameLocation": "9013:9:4",
														"nodeType": "VariableDeclaration",
														"scope": 1387,
														"src": "9005:17:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1353,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9005:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1358,
												"initialValue": {
													"arguments": [
														{
															"id": 1356,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1348,
															"src": "9037:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1355,
														"name": "maxWithdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1176,
														"src": "9025:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1357,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9025:18:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9005:38:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1359,
														"name": "assets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1344,
														"src": "9057:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1360,
														"name": "maxAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1354,
														"src": "9066:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9057:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1369,
												"nodeType": "IfStatement",
												"src": "9053:108:4",
												"trueBody": {
													"id": 1368,
													"nodeType": "Block",
													"src": "9077:84:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1363,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1348,
																		"src": "9125:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1364,
																		"name": "assets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1344,
																		"src": "9132:6:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1365,
																		"name": "maxAssets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1354,
																		"src": "9140:9:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1362,
																	"name": "ERC4626ExceededMaxWithdraw",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 951,
																	"src": "9098:26:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (address,uint256,uint256) pure returns (error)"
																	}
																},
																"id": 1366,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9098:52:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1367,
															"nodeType": "RevertStatement",
															"src": "9091:59:4"
														}
													]
												}
											},
											{
												"assignments": [
													1371
												],
												"declarations": [
													{
														"constant": false,
														"id": 1371,
														"mutability": "mutable",
														"name": "shares",
														"nameLocation": "9179:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 1387,
														"src": "9171:14:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1370,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9171:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1375,
												"initialValue": {
													"arguments": [
														{
															"id": 1373,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1344,
															"src": "9204:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1372,
														"name": "previewWithdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1237,
														"src": "9188:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9188:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9171:40:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1377,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2201,
																"src": "9231:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9231:12:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1379,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1346,
															"src": "9245:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1380,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1348,
															"src": "9255:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1381,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1344,
															"src": "9262:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1382,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1371,
															"src": "9270:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1376,
														"name": "_withdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1575,
														"src": "9221:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256)"
														}
													},
													"id": 1383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9221:56:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1384,
												"nodeType": "ExpressionStatement",
												"src": "9221:56:4"
											},
											{
												"expression": {
													"id": 1385,
													"name": "shares",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1371,
													"src": "9295:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1352,
												"id": 1386,
												"nodeType": "Return",
												"src": "9288:13:4"
											}
										]
									},
									"documentation": {
										"id": 1342,
										"nodeType": "StructuredDocumentation",
										"src": "8854:36:4",
										"text": "@dev See {IERC4626-withdraw}. "
									},
									"functionSelector": "b460af94",
									"id": 1388,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "8904:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1344,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "8921:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1388,
												"src": "8913:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1343,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8913:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1346,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "8937:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1388,
												"src": "8929:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1345,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8929:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1348,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "8955:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1388,
												"src": "8947:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1347,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8947:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8912:49:4"
									},
									"returnParameters": {
										"id": 1352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1351,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1388,
												"src": "8986:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1350,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8986:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8985:9:4"
									},
									"scope": 1584,
									"src": "8895:413:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										168
									],
									"body": {
										"id": 1434,
										"nodeType": "Block",
										"src": "9451:307:4",
										"statements": [
											{
												"assignments": [
													1401
												],
												"declarations": [
													{
														"constant": false,
														"id": 1401,
														"mutability": "mutable",
														"name": "maxShares",
														"nameLocation": "9469:9:4",
														"nodeType": "VariableDeclaration",
														"scope": 1434,
														"src": "9461:17:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1400,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9461:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1405,
												"initialValue": {
													"arguments": [
														{
															"id": 1403,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1395,
															"src": "9491:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1402,
														"name": "maxRedeem",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1189,
														"src": "9481:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9481:16:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9461:36:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1408,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1406,
														"name": "shares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1391,
														"src": "9511:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1407,
														"name": "maxShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1401,
														"src": "9520:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9511:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1416,
												"nodeType": "IfStatement",
												"src": "9507:106:4",
												"trueBody": {
													"id": 1415,
													"nodeType": "Block",
													"src": "9531:82:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1410,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1395,
																		"src": "9577:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1411,
																		"name": "shares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1391,
																		"src": "9584:6:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1412,
																		"name": "maxShares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1401,
																		"src": "9592:9:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1409,
																	"name": "ERC4626ExceededMaxRedeem",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 960,
																	"src": "9552:24:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (address,uint256,uint256) pure returns (error)"
																	}
																},
																"id": 1413,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9552:50:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1414,
															"nodeType": "RevertStatement",
															"src": "9545:57:4"
														}
													]
												}
											},
											{
												"assignments": [
													1418
												],
												"declarations": [
													{
														"constant": false,
														"id": 1418,
														"mutability": "mutable",
														"name": "assets",
														"nameLocation": "9631:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 1434,
														"src": "9623:14:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1417,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9623:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1422,
												"initialValue": {
													"arguments": [
														{
															"id": 1420,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1391,
															"src": "9654:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1419,
														"name": "previewRedeem",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1253,
														"src": "9640:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1421,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9640:21:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9623:38:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1424,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2201,
																"src": "9681:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1425,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9681:12:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1426,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1393,
															"src": "9695:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1427,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1395,
															"src": "9705:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1428,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1418,
															"src": "9712:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1429,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1391,
															"src": "9720:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1423,
														"name": "_withdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1575,
														"src": "9671:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256)"
														}
													},
													"id": 1430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9671:56:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1431,
												"nodeType": "ExpressionStatement",
												"src": "9671:56:4"
											},
											{
												"expression": {
													"id": 1432,
													"name": "assets",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1418,
													"src": "9745:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1399,
												"id": 1433,
												"nodeType": "Return",
												"src": "9738:13:4"
											}
										]
									},
									"documentation": {
										"id": 1389,
										"nodeType": "StructuredDocumentation",
										"src": "9314:34:4",
										"text": "@dev See {IERC4626-redeem}. "
									},
									"functionSelector": "ba087652",
									"id": 1435,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "redeem",
									"nameLocation": "9362:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1391,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "9377:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1435,
												"src": "9369:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1390,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9369:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1393,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "9393:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1435,
												"src": "9385:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1392,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9385:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1395,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9411:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1435,
												"src": "9403:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1394,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9403:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9368:49:4"
									},
									"returnParameters": {
										"id": 1399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1398,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1435,
												"src": "9442:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1397,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9442:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9441:9:4"
									},
									"scope": 1584,
									"src": "9353:405:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1462,
										"nodeType": "Block",
										"src": "9988:107:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1454,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1448,
																	"name": "totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 394,
																	"src": "10019:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1449,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10019:13:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1453,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1450,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10035:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1451,
																		"name": "_decimalsOffset",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1583,
																		"src": "10041:15:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 1452,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10041:17:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "10035:23:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10019:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1455,
																	"name": "totalAssets",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1096,
																	"src": "10060:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1456,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10060:13:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1457,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10076:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "10060:17:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1459,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1441,
															"src": "10079:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														],
														"expression": {
															"id": 1446,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1438,
															"src": "10005:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1447,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10012:6:4",
														"memberName": "mulDiv",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2650,
														"src": "10005:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_enum$_Rounding_$2230_$returns$_t_uint256_$attached_to$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256,enum Math.Rounding) pure returns (uint256)"
														}
													},
													"id": 1460,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10005:83:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1445,
												"id": 1461,
												"nodeType": "Return",
												"src": "9998:90:4"
											}
										]
									},
									"documentation": {
										"id": 1436,
										"nodeType": "StructuredDocumentation",
										"src": "9764:113:4",
										"text": " @dev Internal conversion function (from assets to shares) with support for rounding direction."
									},
									"id": 1463,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_convertToShares",
									"nameLocation": "9891:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1442,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1438,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "9916:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "9908:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1437,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9908:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1441,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "9938:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "9924:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2230",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1440,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1439,
														"name": "Math.Rounding",
														"nameLocations": [
															"9924:4:4",
															"9929:8:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2230,
														"src": "9924:13:4"
													},
													"referencedDeclaration": 2230,
													"src": "9924:13:4",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2230",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9907:40:4"
									},
									"returnParameters": {
										"id": 1445,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1444,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "9979:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1443,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9979:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9978:9:4"
									},
									"scope": 1584,
									"src": "9882:213:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1490,
										"nodeType": "Block",
										"src": "10325:107:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1476,
																	"name": "totalAssets",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1096,
																	"src": "10356:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1477,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10356:13:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1478,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10372:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "10356:17:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1486,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1480,
																	"name": "totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 394,
																	"src": "10375:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1481,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10375:13:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1485,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1482,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10391:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1483,
																		"name": "_decimalsOffset",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1583,
																		"src": "10397:15:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 1484,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10397:17:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "10391:23:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10375:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1487,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1469,
															"src": "10416:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2230",
																"typeString": "enum Math.Rounding"
															}
														],
														"expression": {
															"id": 1474,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1466,
															"src": "10342:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1475,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10349:6:4",
														"memberName": "mulDiv",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2650,
														"src": "10342:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_enum$_Rounding_$2230_$returns$_t_uint256_$attached_to$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256,enum Math.Rounding) pure returns (uint256)"
														}
													},
													"id": 1488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10342:83:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1473,
												"id": 1489,
												"nodeType": "Return",
												"src": "10335:90:4"
											}
										]
									},
									"documentation": {
										"id": 1464,
										"nodeType": "StructuredDocumentation",
										"src": "10101:113:4",
										"text": " @dev Internal conversion function (from shares to assets) with support for rounding direction."
									},
									"id": 1491,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_convertToAssets",
									"nameLocation": "10228:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1470,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1466,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "10253:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1491,
												"src": "10245:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1465,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10245:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1469,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10275:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1491,
												"src": "10261:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2230",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1468,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1467,
														"name": "Math.Rounding",
														"nameLocations": [
															"10261:4:4",
															"10266:8:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2230,
														"src": "10261:13:4"
													},
													"referencedDeclaration": 2230,
													"src": "10261:13:4",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2230",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10244:40:4"
									},
									"returnParameters": {
										"id": 1473,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1472,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1491,
												"src": "10316:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1471,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10316:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10315:9:4"
									},
									"scope": 1584,
									"src": "10219:213:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1527,
										"nodeType": "Block",
										"src": "10597:729:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1506,
															"name": "_asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 922,
															"src": "11191:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$899",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 1507,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1494,
															"src": "11199:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1510,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "11215:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC4626_$1584",
																		"typeString": "contract ERC4626"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC4626_$1584",
																		"typeString": "contract ERC4626"
																	}
																],
																"id": 1509,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11207:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1508,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11207:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 1511,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11207:13:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1512,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1498,
															"src": "11222:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$899",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1503,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1936,
															"src": "11164:9:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$1936_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1505,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "11174:16:4",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1723,
														"src": "11164:26:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$899_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1513,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11164:65:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1514,
												"nodeType": "ExpressionStatement",
												"src": "11164:65:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1516,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1496,
															"src": "11245:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1517,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1500,
															"src": "11255:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1515,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 661,
														"src": "11239:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1518,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11239:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1519,
												"nodeType": "ExpressionStatement",
												"src": "11239:23:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1521,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1494,
															"src": "11286:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1522,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1496,
															"src": "11294:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1523,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1498,
															"src": "11304:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1524,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1500,
															"src": "11312:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1520,
														"name": "Deposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 20,
														"src": "11278:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11278:41:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1526,
												"nodeType": "EmitStatement",
												"src": "11273:46:4"
											}
										]
									},
									"documentation": {
										"id": 1492,
										"nodeType": "StructuredDocumentation",
										"src": "10438:53:4",
										"text": " @dev Deposit/mint common workflow."
									},
									"id": 1528,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_deposit",
									"nameLocation": "10505:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1494,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "10522:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1528,
												"src": "10514:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1493,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10514:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1496,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "10538:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1528,
												"src": "10530:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10530:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1498,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "10556:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1528,
												"src": "10548:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1497,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10548:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1500,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "10572:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1528,
												"src": "10564:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1499,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10564:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10513:66:4"
									},
									"returnParameters": {
										"id": 1502,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10597:0:4"
									},
									"scope": 1584,
									"src": "10496:830:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1574,
										"nodeType": "Block",
										"src": "11556:751:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1544,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1542,
														"name": "caller",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1531,
														"src": "11570:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1543,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1535,
														"src": "11580:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11570:15:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1552,
												"nodeType": "IfStatement",
												"src": "11566:84:4",
												"trueBody": {
													"id": 1551,
													"nodeType": "Block",
													"src": "11587:63:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1546,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1535,
																		"src": "11617:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1547,
																		"name": "caller",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1531,
																		"src": "11624:6:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1548,
																		"name": "shares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1539,
																		"src": "11632:6:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1545,
																	"name": "_spendAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 820,
																	"src": "11601:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 1549,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11601:38:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1550,
															"nodeType": "ExpressionStatement",
															"src": "11601:38:4"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1554,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1535,
															"src": "12163:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1555,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1539,
															"src": "12170:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1553,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 694,
														"src": "12157:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1556,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12157:20:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1557,
												"nodeType": "ExpressionStatement",
												"src": "12157:20:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1561,
															"name": "_asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 922,
															"src": "12210:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$899",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 1562,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1533,
															"src": "12218:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1563,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1537,
															"src": "12228:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$899",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1558,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1936,
															"src": "12187:9:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$1936_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1560,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "12197:12:4",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1696,
														"src": "12187:22:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$899_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1564,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12187:48:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1565,
												"nodeType": "ExpressionStatement",
												"src": "12187:48:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1567,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1531,
															"src": "12260:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1568,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1533,
															"src": "12268:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1569,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1535,
															"src": "12278:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1570,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1537,
															"src": "12285:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1571,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1539,
															"src": "12293:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1566,
														"name": "Withdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 32,
														"src": "12251:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256)"
														}
													},
													"id": 1572,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12251:49:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1573,
												"nodeType": "EmitStatement",
												"src": "12246:54:4"
											}
										]
									},
									"documentation": {
										"id": 1529,
										"nodeType": "StructuredDocumentation",
										"src": "11332:56:4",
										"text": " @dev Withdraw/redeem common workflow."
									},
									"id": 1575,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_withdraw",
									"nameLocation": "11402:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1531,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "11429:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1575,
												"src": "11421:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1530,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11421:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1533,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "11453:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1575,
												"src": "11445:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1532,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11445:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1535,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11479:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1575,
												"src": "11471:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1534,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11471:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1537,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "11502:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1575,
												"src": "11494:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1536,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11494:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1539,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "11526:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1575,
												"src": "11518:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1538,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11518:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11411:127:4"
									},
									"returnParameters": {
										"id": 1541,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11556:0:4"
									},
									"scope": 1584,
									"src": "11393:914:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1582,
										"nodeType": "Block",
										"src": "12378:25:4",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1580,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12395:1:4",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1579,
												"id": 1581,
												"nodeType": "Return",
												"src": "12388:8:4"
											}
										]
									},
									"id": 1583,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_decimalsOffset",
									"nameLocation": "12322:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1576,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12337:2:4"
									},
									"returnParameters": {
										"id": 1579,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1578,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1583,
												"src": "12371:5:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1577,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "12371:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12370:7:4"
									},
									"scope": 1584,
									"src": "12313:90:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1585,
							"src": "3158:9247:4",
							"usedErrors": [
								181,
								186,
								191,
								200,
								205,
								210,
								933,
								942,
								951,
								960,
								1663,
								1944,
								1949,
								1952,
								2225
							],
							"usedEvents": [
								20,
								32,
								833,
								842
							]
						}
					],
					"src": "118:12288:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							899
						],
						"IERC20Metadata": [
							1610
						]
					},
					"id": 1611,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1586,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1588,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1611,
							"sourceUnit": 900,
							"src": "151:37:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1587,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 899,
										"src": "159:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1590,
										"name": "IERC20",
										"nameLocations": [
											"305:6:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 899,
										"src": "305:6:5"
									},
									"id": 1591,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:5"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1589,
								"nodeType": "StructuredDocumentation",
								"src": "190:86:5",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard."
							},
							"fullyImplemented": false,
							"id": 1610,
							"linearizedBaseContracts": [
								1610,
								899
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1592,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:5",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1597,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1593,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:5"
									},
									"returnParameters": {
										"id": 1596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1595,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1597,
												"src": "416:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1594,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:5"
									},
									"scope": 1610,
									"src": "377:54:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1598,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:5",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1603,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1599,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:5"
									},
									"returnParameters": {
										"id": 1602,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1601,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1603,
												"src": "539:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1600,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:5"
									},
									"scope": 1610,
									"src": "498:56:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1604,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:5",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1609,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1605,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:5"
									},
									"returnParameters": {
										"id": 1608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1607,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1609,
												"src": "673:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1606,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:5"
									},
									"scope": 1610,
									"src": "630:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1611,
							"src": "277:405:5",
							"usedErrors": [],
							"usedEvents": [
								833,
								842
							]
						}
					],
					"src": "125:558:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							1646
						]
					},
					"id": 1647,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1612,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1613,
								"nodeType": "StructuredDocumentation",
								"src": "149:1963:6",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 1646,
							"linearizedBaseContracts": [
								1646
							],
							"name": "IERC20Permit",
							"nameLocation": "2123:12:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1614,
										"nodeType": "StructuredDocumentation",
										"src": "2142:850:6",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 1631,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3006:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1629,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1616,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3030:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1631,
												"src": "3022:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1615,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3022:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1618,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3053:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1631,
												"src": "3045:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1617,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3045:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1620,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3078:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1631,
												"src": "3070:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1619,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3070:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1622,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3101:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1631,
												"src": "3093:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1621,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3093:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1624,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3125:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 1631,
												"src": "3119:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1623,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3119:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1626,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3144:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 1631,
												"src": "3136:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1625,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3136:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1628,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3163:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 1631,
												"src": "3155:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1627,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3155:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3012:158:6"
									},
									"returnParameters": {
										"id": 1630,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3179:0:6"
									},
									"scope": 1646,
									"src": "2997:183:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1632,
										"nodeType": "StructuredDocumentation",
										"src": "3186:294:6",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 1639,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3494:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1635,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1634,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3509:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "3501:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1633,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3501:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3500:15:6"
									},
									"returnParameters": {
										"id": 1638,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1637,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "3539:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1636,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3539:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3538:9:6"
									},
									"scope": 1646,
									"src": "3485:63:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1640,
										"nodeType": "StructuredDocumentation",
										"src": "3554:128:6",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 1645,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3749:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1641,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3765:2:6"
									},
									"returnParameters": {
										"id": 1644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1643,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1645,
												"src": "3791:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1642,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3791:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3790:9:6"
									},
									"scope": 1646,
									"src": "3740:60:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1647,
							"src": "2113:1689:6",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3680:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							2189
						],
						"IERC20": [
							899
						],
						"IERC20Permit": [
							1646
						],
						"SafeERC20": [
							1936
						]
					},
					"id": 1937,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1648,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1650,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1937,
							"sourceUnit": 900,
							"src": "141:37:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1649,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 899,
										"src": "149:6:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "../extensions/IERC20Permit.sol",
							"id": 1652,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1937,
							"sourceUnit": 1647,
							"src": "179:60:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1651,
										"name": "IERC20Permit",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1646,
										"src": "187:12:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 1654,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1937,
							"sourceUnit": 2190,
							"src": "240:51:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1653,
										"name": "Address",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2189,
										"src": "248:7:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1655,
								"nodeType": "StructuredDocumentation",
								"src": "293:457:7",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 1936,
							"linearizedBaseContracts": [
								1936
							],
							"name": "SafeERC20",
							"nameLocation": "759:9:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1658,
									"libraryName": {
										"id": 1656,
										"name": "Address",
										"nameLocations": [
											"781:7:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2189,
										"src": "781:7:7"
									},
									"nodeType": "UsingForDirective",
									"src": "775:26:7",
									"typeName": {
										"id": 1657,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "793:7:7",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"documentation": {
										"id": 1659,
										"nodeType": "StructuredDocumentation",
										"src": "807:64:7",
										"text": " @dev An operation with an ERC20 token failed."
									},
									"errorSelector": "5274afe7",
									"id": 1663,
									"name": "SafeERC20FailedOperation",
									"nameLocation": "882:24:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1661,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "915:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1663,
												"src": "907:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1660,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "907:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "906:15:7"
									},
									"src": "876:46:7"
								},
								{
									"documentation": {
										"id": 1664,
										"nodeType": "StructuredDocumentation",
										"src": "928:71:7",
										"text": " @dev Indicates a failed `decreaseAllowance` request."
									},
									"errorSelector": "e570110f",
									"id": 1672,
									"name": "SafeERC20FailedDecreaseAllowance",
									"nameLocation": "1010:32:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1671,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1666,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1051:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1672,
												"src": "1043:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1665,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1043:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1668,
												"mutability": "mutable",
												"name": "currentAllowance",
												"nameLocation": "1068:16:7",
												"nodeType": "VariableDeclaration",
												"scope": 1672,
												"src": "1060:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1667,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1060:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1670,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "1094:17:7",
												"nodeType": "VariableDeclaration",
												"scope": 1672,
												"src": "1086:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1669,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1086:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1042:70:7"
									},
									"src": "1004:109:7"
								},
								{
									"body": {
										"id": 1695,
										"nodeType": "Block",
										"src": "1375:88:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1684,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1676,
															"src": "1405:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$899",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1687,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1676,
																		"src": "1427:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$899",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1688,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1433:8:7",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 866,
																	"src": "1427:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 1689,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1678,
																			"src": "1444:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1690,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1680,
																			"src": "1448:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1691,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1443:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 1685,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1412:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1686,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1416:10:7",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1412:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1692,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1412:43:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$899",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1683,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1886,
														"src": "1385:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$899_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1693,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1385:71:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1694,
												"nodeType": "ExpressionStatement",
												"src": "1385:71:7"
											}
										]
									},
									"documentation": {
										"id": 1673,
										"nodeType": "StructuredDocumentation",
										"src": "1119:179:7",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 1696,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1312:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1676,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1332:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1696,
												"src": "1325:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$899",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1675,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1674,
														"name": "IERC20",
														"nameLocations": [
															"1325:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 899,
														"src": "1325:6:7"
													},
													"referencedDeclaration": 899,
													"src": "1325:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$899",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1678,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1347:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1696,
												"src": "1339:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1677,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1339:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1680,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1359:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1696,
												"src": "1351:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1679,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1351:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1324:41:7"
									},
									"returnParameters": {
										"id": 1682,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1375:0:7"
									},
									"scope": 1936,
									"src": "1303:160:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1722,
										"nodeType": "Block",
										"src": "1792:98:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1710,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1700,
															"src": "1822:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$899",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1713,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1700,
																		"src": "1844:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$899",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1714,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1850:12:7",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 898,
																	"src": "1844:18:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 1715,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1702,
																			"src": "1865:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1716,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1704,
																			"src": "1871:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1717,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1706,
																			"src": "1875:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1718,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1864:17:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 1711,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1829:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1712,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1833:10:7",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1829:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1719,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1829:53:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$899",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1709,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1886,
														"src": "1802:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$899_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1720,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1802:81:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1721,
												"nodeType": "ExpressionStatement",
												"src": "1802:81:7"
											}
										]
									},
									"documentation": {
										"id": 1697,
										"nodeType": "StructuredDocumentation",
										"src": "1469:228:7",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 1723,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1711:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1700,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1735:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1723,
												"src": "1728:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$899",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1699,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1698,
														"name": "IERC20",
														"nameLocations": [
															"1728:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 899,
														"src": "1728:6:7"
													},
													"referencedDeclaration": 899,
													"src": "1728:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$899",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1702,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1750:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1723,
												"src": "1742:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1701,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1742:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1704,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1764:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1723,
												"src": "1756:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1703,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1756:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1706,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1776:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1723,
												"src": "1768:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1705,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1768:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1727:55:7"
									},
									"returnParameters": {
										"id": 1708,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1792:0:7"
									},
									"scope": 1936,
									"src": "1702:188:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1753,
										"nodeType": "Block",
										"src": "2167:139:7",
										"statements": [
											{
												"assignments": [
													1735
												],
												"declarations": [
													{
														"constant": false,
														"id": 1735,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "2185:12:7",
														"nodeType": "VariableDeclaration",
														"scope": 1753,
														"src": "2177:20:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1734,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2177:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1744,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1740,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2224:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$1936",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$1936",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 1739,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2216:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1738,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2216:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1741,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2216:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1742,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1729,
															"src": "2231:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1736,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1727,
															"src": "2200:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$899",
																"typeString": "contract IERC20"
															}
														},
														"id": 1737,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2206:9:7",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 876,
														"src": "2200:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 1743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2200:39:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2177:62:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1746,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1727,
															"src": "2262:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$899",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 1747,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1729,
															"src": "2269:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1750,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1748,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1735,
																"src": "2278:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1749,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1731,
																"src": "2293:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2278:20:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$899",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1745,
														"name": "forceApprove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1844,
														"src": "2249:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$899_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1751,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2249:50:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1752,
												"nodeType": "ExpressionStatement",
												"src": "2249:50:7"
											}
										]
									},
									"documentation": {
										"id": 1724,
										"nodeType": "StructuredDocumentation",
										"src": "1896:180:7",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 1754,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2090:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1727,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2119:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1754,
												"src": "2112:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$899",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1726,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1725,
														"name": "IERC20",
														"nameLocations": [
															"2112:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 899,
														"src": "2112:6:7"
													},
													"referencedDeclaration": 899,
													"src": "2112:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$899",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1729,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2134:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1754,
												"src": "2126:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1728,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2126:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1731,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2151:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1754,
												"src": "2143:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1730,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2143:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2111:46:7"
									},
									"returnParameters": {
										"id": 1733,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2167:0:7"
									},
									"scope": 1936,
									"src": "2081:225:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1796,
										"nodeType": "Block",
										"src": "2607:370:7",
										"statements": [
											{
												"id": 1795,
												"nodeType": "UncheckedBlock",
												"src": "2617:354:7",
												"statements": [
													{
														"assignments": [
															1766
														],
														"declarations": [
															{
																"constant": false,
																"id": 1766,
																"mutability": "mutable",
																"name": "currentAllowance",
																"nameLocation": "2649:16:7",
																"nodeType": "VariableDeclaration",
																"scope": 1795,
																"src": "2641:24:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1765,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2641:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1775,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1771,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2692:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$1936",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$1936",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 1770,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2684:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1769,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2684:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1772,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2684:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1773,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1760,
																	"src": "2699:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1767,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1758,
																	"src": "2668:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$899",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 1768,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2674:9:7",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 876,
																"src": "2668:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 1774,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2668:39:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2641:66:7"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1778,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1776,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1766,
																"src": "2725:16:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1777,
																"name": "requestedDecrease",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1762,
																"src": "2744:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2725:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1786,
														"nodeType": "IfStatement",
														"src": "2721:160:7",
														"trueBody": {
															"id": 1785,
															"nodeType": "Block",
															"src": "2763:118:7",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"id": 1780,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1760,
																				"src": "2821:7:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1781,
																				"name": "currentAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1766,
																				"src": "2830:16:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 1782,
																				"name": "requestedDecrease",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1762,
																				"src": "2848:17:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1779,
																			"name": "SafeERC20FailedDecreaseAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1672,
																			"src": "2788:32:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																				"typeString": "function (address,uint256,uint256) pure returns (error)"
																			}
																		},
																		"id": 1783,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2788:78:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 1784,
																	"nodeType": "RevertStatement",
																	"src": "2781:85:7"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 1788,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1758,
																	"src": "2907:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$899",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"id": 1789,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1760,
																	"src": "2914:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1792,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1790,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1766,
																		"src": "2923:16:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1791,
																		"name": "requestedDecrease",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1762,
																		"src": "2942:17:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2923:36:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$899",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1787,
																"name": "forceApprove",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1844,
																"src": "2894:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$899_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (contract IERC20,address,uint256)"
																}
															},
															"id": 1793,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2894:66:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1794,
														"nodeType": "ExpressionStatement",
														"src": "2894:66:7"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1755,
										"nodeType": "StructuredDocumentation",
										"src": "2312:192:7",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful."
									},
									"id": 1797,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2518:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1758,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2547:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1797,
												"src": "2540:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$899",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1757,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1756,
														"name": "IERC20",
														"nameLocations": [
															"2540:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 899,
														"src": "2540:6:7"
													},
													"referencedDeclaration": 899,
													"src": "2540:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$899",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1760,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2562:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1797,
												"src": "2554:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1759,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2554:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1762,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "2579:17:7",
												"nodeType": "VariableDeclaration",
												"scope": 1797,
												"src": "2571:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1761,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2571:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2539:58:7"
									},
									"returnParameters": {
										"id": 1764,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2607:0:7"
									},
									"scope": 1936,
									"src": "2509:468:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1843,
										"nodeType": "Block",
										"src": "3373:303:7",
										"statements": [
											{
												"assignments": [
													1809
												],
												"declarations": [
													{
														"constant": false,
														"id": 1809,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "3396:12:7",
														"nodeType": "VariableDeclaration",
														"scope": 1843,
														"src": "3383:25:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1808,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3383:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1818,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1812,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1801,
																"src": "3426:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$899",
																	"typeString": "contract IERC20"
																}
															},
															"id": 1813,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3432:7:7",
															"memberName": "approve",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 886,
															"src": "3426:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															}
														},
														{
															"components": [
																{
																	"id": 1814,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1803,
																	"src": "3442:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1815,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1805,
																	"src": "3451:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1816,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3441:16:7",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															},
															{
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														],
														"expression": {
															"id": 1810,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3411:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1811,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "3415:10:7",
														"memberName": "encodeCall",
														"nodeType": "MemberAccess",
														"src": "3411:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 1817,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3411:47:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3383:75:7"
											},
											{
												"condition": {
													"id": 1823,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3473:45:7",
													"subExpression": {
														"arguments": [
															{
																"id": 1820,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1801,
																"src": "3498:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$899",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 1821,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1809,
																"src": "3505:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$899",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1819,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1935,
															"src": "3474:23:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$899_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 1822,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3474:44:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1842,
												"nodeType": "IfStatement",
												"src": "3469:201:7",
												"trueBody": {
													"id": 1841,
													"nodeType": "Block",
													"src": "3520:150:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1825,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1801,
																		"src": "3554:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$899",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1828,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1801,
																					"src": "3576:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$899",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 1829,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "3582:7:7",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 886,
																				"src": "3576:13:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 1830,
																						"name": "spender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1803,
																						"src": "3592:7:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"hexValue": "30",
																						"id": 1831,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3601:1:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					}
																				],
																				"id": 1832,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3591:12:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				},
																				{
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			],
																			"expression": {
																				"id": 1826,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3561:3:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 1827,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "3565:10:7",
																			"memberName": "encodeCall",
																			"nodeType": "MemberAccess",
																			"src": "3561:14:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 1833,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3561:43:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$899",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 1824,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1886,
																	"src": "3534:19:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$899_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 1834,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3534:71:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1835,
															"nodeType": "ExpressionStatement",
															"src": "3534:71:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1837,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1801,
																		"src": "3639:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$899",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 1838,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1809,
																		"src": "3646:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$899",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 1836,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1886,
																	"src": "3619:19:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$899_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 1839,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3619:40:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1840,
															"nodeType": "ExpressionStatement",
															"src": "3619:40:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1798,
										"nodeType": "StructuredDocumentation",
										"src": "2983:308:7",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."
									},
									"id": 1844,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "3305:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1806,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1801,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3325:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1844,
												"src": "3318:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$899",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1800,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1799,
														"name": "IERC20",
														"nameLocations": [
															"3318:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 899,
														"src": "3318:6:7"
													},
													"referencedDeclaration": 899,
													"src": "3318:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$899",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1803,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3340:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1844,
												"src": "3332:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1802,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3332:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1805,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3357:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1844,
												"src": "3349:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1804,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3349:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:46:7"
									},
									"returnParameters": {
										"id": 1807,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3373:0:7"
									},
									"scope": 1936,
									"src": "3296:380:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1885,
										"nodeType": "Block",
										"src": "4129:559:7",
										"statements": [
											{
												"assignments": [
													1854
												],
												"declarations": [
													{
														"constant": false,
														"id": 1854,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4491:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 1885,
														"src": "4478:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1853,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4478:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1862,
												"initialValue": {
													"arguments": [
														{
															"id": 1860,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1850,
															"src": "4532:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1857,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1848,
																	"src": "4512:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$899",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$899",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1856,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4504:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1855,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4504:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1858,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4504:14:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1859,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4519:12:7",
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2010,
														"src": "4504:27:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$",
															"typeString": "function (address,bytes memory) returns (bytes memory)"
														}
													},
													"id": 1861,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4504:33:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4478:59:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1875,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1866,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 1863,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1854,
																"src": "4551:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1864,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4562:6:7",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4551:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 1865,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4572:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4551:22:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 1874,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4577:31:7",
														"subExpression": {
															"arguments": [
																{
																	"id": 1869,
																	"name": "returndata",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1854,
																	"src": "4589:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"components": [
																		{
																			"id": 1871,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4602:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bool_$",
																				"typeString": "type(bool)"
																			},
																			"typeName": {
																				"id": 1870,
																				"name": "bool",
																				"nodeType": "ElementaryTypeName",
																				"src": "4602:4:7",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"id": 1872,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4601:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bool_$",
																		"typeString": "type(bool)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_type$_t_bool_$",
																		"typeString": "type(bool)"
																	}
																],
																"expression": {
																	"id": 1867,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4578:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1868,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4582:6:7",
																"memberName": "decode",
																"nodeType": "MemberAccess",
																"src": "4578:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1873,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4578:30:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4551:57:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1884,
												"nodeType": "IfStatement",
												"src": "4547:135:7",
												"trueBody": {
													"id": 1883,
													"nodeType": "Block",
													"src": "4610:72:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1879,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1848,
																				"src": "4664:5:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20_$899",
																					"typeString": "contract IERC20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC20_$899",
																					"typeString": "contract IERC20"
																				}
																			],
																			"id": 1878,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4656:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1877,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "4656:7:7",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1880,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4656:14:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1876,
																	"name": "SafeERC20FailedOperation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1663,
																	"src": "4631:24:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 1881,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4631:40:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1882,
															"nodeType": "RevertStatement",
															"src": "4624:47:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1845,
										"nodeType": "StructuredDocumentation",
										"src": "3682:372:7",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 1886,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "4068:19:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1851,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1848,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4095:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1886,
												"src": "4088:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$899",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1847,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1846,
														"name": "IERC20",
														"nameLocations": [
															"4088:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 899,
														"src": "4088:6:7"
													},
													"referencedDeclaration": 899,
													"src": "4088:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$899",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1850,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4115:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1886,
												"src": "4102:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1849,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4102:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4087:33:7"
									},
									"returnParameters": {
										"id": 1852,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4129:0:7"
									},
									"scope": 1936,
									"src": "4059:629:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1934,
										"nodeType": "Block",
										"src": "5278:489:7",
										"statements": [
											{
												"assignments": [
													1898,
													1900
												],
												"declarations": [
													{
														"constant": false,
														"id": 1898,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5579:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 1934,
														"src": "5574:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1897,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5574:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1900,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5601:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 1934,
														"src": "5588:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1899,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5588:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1908,
												"initialValue": {
													"arguments": [
														{
															"id": 1906,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1892,
															"src": "5635:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1903,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1890,
																	"src": "5623:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$899",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$899",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1902,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5615:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1901,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5615:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1904,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5615:14:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1905,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5630:4:7",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "5615:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1907,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5615:25:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5573:67:7"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1932,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 1923,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1909,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1898,
															"src": "5657:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 1921,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1913,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 1910,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1900,
																				"src": "5669:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 1911,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "5680:6:7",
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "5669:17:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1912,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5690:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "5669:22:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "||",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 1916,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1900,
																				"src": "5706:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 1918,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "5719:4:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 1917,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "5719:4:7",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 1919,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "5718:6:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 1914,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "5695:3:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 1915,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "5699:6:7",
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "5695:10:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 1920,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5695:30:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "5669:56:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 1922,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5668:58:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "5657:69:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1931,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1926,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1890,
																			"src": "5738:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$899",
																				"typeString": "contract IERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$899",
																				"typeString": "contract IERC20"
																			}
																		],
																		"id": 1925,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5730:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1924,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5730:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1927,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5730:14:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1928,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5745:4:7",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "5730:19:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1929,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5750:6:7",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "5730:26:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1930,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5759:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "5730:30:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5657:103:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1896,
												"id": 1933,
												"nodeType": "Return",
												"src": "5650:110:7"
											}
										]
									},
									"documentation": {
										"id": 1887,
										"nodeType": "StructuredDocumentation",
										"src": "4694:490:7",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."
									},
									"id": 1935,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "5198:23:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1893,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1890,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5229:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1935,
												"src": "5222:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$899",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1889,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1888,
														"name": "IERC20",
														"nameLocations": [
															"5222:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 899,
														"src": "5222:6:7"
													},
													"referencedDeclaration": 899,
													"src": "5222:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$899",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1892,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5249:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1935,
												"src": "5236:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1891,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5236:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5221:33:7"
									},
									"returnParameters": {
										"id": 1896,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1895,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1935,
												"src": "5272:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1894,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5272:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5271:6:7"
									},
									"scope": 1936,
									"src": "5189:578:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1937,
							"src": "751:5018:7",
							"usedErrors": [
								1663,
								1672
							],
							"usedEvents": []
						}
					],
					"src": "115:5655:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							2189
						]
					},
					"id": 2190,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1938,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1939,
								"nodeType": "StructuredDocumentation",
								"src": "127:67:8",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 2189,
							"linearizedBaseContracts": [
								2189
							],
							"name": "Address",
							"nameLocation": "203:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1940,
										"nodeType": "StructuredDocumentation",
										"src": "217:94:8",
										"text": " @dev The ETH balance of the account is not enough to perform the operation."
									},
									"errorSelector": "cd786059",
									"id": 1944,
									"name": "AddressInsufficientBalance",
									"nameLocation": "322:26:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1942,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "357:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1944,
												"src": "349:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1941,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "349:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "348:17:8"
									},
									"src": "316:50:8"
								},
								{
									"documentation": {
										"id": 1945,
										"nodeType": "StructuredDocumentation",
										"src": "372:75:8",
										"text": " @dev There's no code at `target` (it is not a contract)."
									},
									"errorSelector": "9996b315",
									"id": 1949,
									"name": "AddressEmptyCode",
									"nameLocation": "458:16:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1948,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1947,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "483:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1949,
												"src": "475:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1946,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "475:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "474:16:8"
									},
									"src": "452:39:8"
								},
								{
									"documentation": {
										"id": 1950,
										"nodeType": "StructuredDocumentation",
										"src": "497:89:8",
										"text": " @dev A call to an address target failed. The target may have reverted."
									},
									"errorSelector": "1425ea42",
									"id": 1952,
									"name": "FailedInnerCall",
									"nameLocation": "597:15:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1951,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "612:2:8"
									},
									"src": "591:24:8"
								},
								{
									"body": {
										"id": 1992,
										"nodeType": "Block",
										"src": "1602:260:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1966,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1962,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1624:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$2189",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$2189",
																		"typeString": "library Address"
																	}
																],
																"id": 1961,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1616:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1960,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1616:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1963,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1616:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1964,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1630:7:8",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "1616:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1965,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1957,
														"src": "1640:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1616:30:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1975,
												"nodeType": "IfStatement",
												"src": "1612:109:8",
												"trueBody": {
													"id": 1974,
													"nodeType": "Block",
													"src": "1648:73:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1970,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "1704:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Address_$2189",
																					"typeString": "library Address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Address_$2189",
																					"typeString": "library Address"
																				}
																			],
																			"id": 1969,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1696:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1968,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1696:7:8",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1971,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1696:13:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1967,
																	"name": "AddressInsufficientBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1944,
																	"src": "1669:26:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 1972,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1669:41:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1973,
															"nodeType": "RevertStatement",
															"src": "1662:48:8"
														}
													]
												}
											},
											{
												"assignments": [
													1977,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1977,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1737:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1992,
														"src": "1732:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1976,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1732:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1984,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1982,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1780:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1978,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1955,
																"src": "1750:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1979,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1760:4:8",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "1750:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1981,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1980,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1957,
																"src": "1772:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "1750:29:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1983,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1750:33:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1731:52:8"
											},
											{
												"condition": {
													"id": 1986,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1797:8:8",
													"subExpression": {
														"id": 1985,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1977,
														"src": "1798:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1991,
												"nodeType": "IfStatement",
												"src": "1793:63:8",
												"trueBody": {
													"id": 1990,
													"nodeType": "Block",
													"src": "1807:49:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1987,
																	"name": "FailedInnerCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1952,
																	"src": "1828:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1988,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1828:17:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1989,
															"nodeType": "RevertStatement",
															"src": "1821:24:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1953,
										"nodeType": "StructuredDocumentation",
										"src": "621:905:8",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 1993,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "1540:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1958,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1955,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1566:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 1993,
												"src": "1550:25:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1954,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1550:15:8",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1957,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1585:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1993,
												"src": "1577:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1956,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1577:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1549:43:8"
									},
									"returnParameters": {
										"id": 1959,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1602:0:8"
									},
									"scope": 2189,
									"src": "1531:331:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2009,
										"nodeType": "Block",
										"src": "2794:62:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2004,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1996,
															"src": "2833:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2005,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1998,
															"src": "2841:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 2006,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2847:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 2003,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2056,
														"src": "2811:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256) returns (bytes memory)"
														}
													},
													"id": 2007,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2811:38:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2002,
												"id": 2008,
												"nodeType": "Return",
												"src": "2804:45:8"
											}
										]
									},
									"documentation": {
										"id": 1994,
										"nodeType": "StructuredDocumentation",
										"src": "1868:832:8",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {FailedInnerCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."
									},
									"id": 2010,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "2714:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1999,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1996,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "2735:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 2010,
												"src": "2727:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1995,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2727:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1998,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2756:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 2010,
												"src": "2743:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1997,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2743:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2726:35:8"
									},
									"returnParameters": {
										"id": 2002,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2001,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2010,
												"src": "2780:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2000,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2780:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2779:14:8"
									},
									"scope": 2189,
									"src": "2705:151:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2055,
										"nodeType": "Block",
										"src": "3293:279:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2028,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 2024,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3315:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$2189",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$2189",
																		"typeString": "library Address"
																	}
																],
																"id": 2023,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3307:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2022,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3307:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 2025,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3307:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2026,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3321:7:8",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "3307:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2027,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2017,
														"src": "3331:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3307:29:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2037,
												"nodeType": "IfStatement",
												"src": "3303:108:8",
												"trueBody": {
													"id": 2036,
													"nodeType": "Block",
													"src": "3338:73:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 2032,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "3394:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Address_$2189",
																					"typeString": "library Address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Address_$2189",
																					"typeString": "library Address"
																				}
																			],
																			"id": 2031,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3386:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2030,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3386:7:8",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2033,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3386:13:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 2029,
																	"name": "AddressInsufficientBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1944,
																	"src": "3359:26:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 2034,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3359:41:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 2035,
															"nodeType": "RevertStatement",
															"src": "3352:48:8"
														}
													]
												}
											},
											{
												"assignments": [
													2039,
													2041
												],
												"declarations": [
													{
														"constant": false,
														"id": 2039,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3426:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 2055,
														"src": "3421:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2038,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3421:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2041,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3448:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 2055,
														"src": "3435:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2040,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3435:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2048,
												"initialValue": {
													"arguments": [
														{
															"id": 2046,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2015,
															"src": "3488:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 2042,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2013,
																"src": "3462:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2043,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3469:4:8",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "3462:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2045,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2044,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2017,
																"src": "3481:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "3462:25:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2047,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3462:31:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3420:73:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2050,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2013,
															"src": "3537:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2051,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2039,
															"src": "3545:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2052,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2041,
															"src": "3554:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2049,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2148,
														"src": "3510:26:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 2053,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3510:55:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2021,
												"id": 2054,
												"nodeType": "Return",
												"src": "3503:62:8"
											}
										]
									},
									"documentation": {
										"id": 2011,
										"nodeType": "StructuredDocumentation",
										"src": "2862:313:8",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."
									},
									"id": 2056,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "3189:21:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2018,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2013,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3219:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 2056,
												"src": "3211:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2012,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3211:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2015,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3240:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 2056,
												"src": "3227:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2014,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3227:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2017,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3254:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2056,
												"src": "3246:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2016,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3246:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3210:50:8"
									},
									"returnParameters": {
										"id": 2021,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2020,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2056,
												"src": "3279:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2019,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3279:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3278:14:8"
									},
									"scope": 2189,
									"src": "3180:392:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2081,
										"nodeType": "Block",
										"src": "3811:154:8",
										"statements": [
											{
												"assignments": [
													2067,
													2069
												],
												"declarations": [
													{
														"constant": false,
														"id": 2067,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3827:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 2081,
														"src": "3822:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2066,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3822:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2069,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3849:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 2081,
														"src": "3836:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2068,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3836:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2074,
												"initialValue": {
													"arguments": [
														{
															"id": 2072,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2061,
															"src": "3881:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2070,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2059,
															"src": "3863:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2071,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3870:10:8",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "3863:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 2073,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3863:23:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3821:65:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2076,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2059,
															"src": "3930:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2077,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2067,
															"src": "3938:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2078,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2069,
															"src": "3947:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2075,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2148,
														"src": "3903:26:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 2079,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3903:55:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2065,
												"id": 2080,
												"nodeType": "Return",
												"src": "3896:62:8"
											}
										]
									},
									"documentation": {
										"id": 2057,
										"nodeType": "StructuredDocumentation",
										"src": "3578:128:8",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."
									},
									"id": 2082,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "3720:18:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2059,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3747:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 2082,
												"src": "3739:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2058,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3739:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2061,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3768:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 2082,
												"src": "3755:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2060,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3755:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3738:35:8"
									},
									"returnParameters": {
										"id": 2065,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2064,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2082,
												"src": "3797:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2063,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3797:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3796:14:8"
									},
									"scope": 2189,
									"src": "3711:254:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2107,
										"nodeType": "Block",
										"src": "4203:156:8",
										"statements": [
											{
												"assignments": [
													2093,
													2095
												],
												"declarations": [
													{
														"constant": false,
														"id": 2093,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4219:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 2107,
														"src": "4214:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2092,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4214:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2095,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4241:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 2107,
														"src": "4228:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2094,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4228:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2100,
												"initialValue": {
													"arguments": [
														{
															"id": 2098,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2087,
															"src": "4275:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2096,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2085,
															"src": "4255:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2097,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4262:12:8",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "4255:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 2099,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4255:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4213:67:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2102,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2085,
															"src": "4324:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2103,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2093,
															"src": "4332:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2104,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2095,
															"src": "4341:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2101,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2148,
														"src": "4297:26:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 2105,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4297:55:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2091,
												"id": 2106,
												"nodeType": "Return",
												"src": "4290:62:8"
											}
										]
									},
									"documentation": {
										"id": 2083,
										"nodeType": "StructuredDocumentation",
										"src": "3971:130:8",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."
									},
									"id": 2108,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "4115:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2088,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2085,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4144:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 2108,
												"src": "4136:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2084,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4136:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2087,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4165:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 2108,
												"src": "4152:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2086,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4152:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4135:35:8"
									},
									"returnParameters": {
										"id": 2091,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2090,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2108,
												"src": "4189:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2089,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4189:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4188:14:8"
									},
									"scope": 2189,
									"src": "4106:253:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2147,
										"nodeType": "Block",
										"src": "4783:424:8",
										"statements": [
											{
												"condition": {
													"id": 2121,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4797:8:8",
													"subExpression": {
														"id": 2120,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2113,
														"src": "4798:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2145,
													"nodeType": "Block",
													"src": "4857:344:8",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 2136,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2130,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 2127,
																			"name": "returndata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2115,
																			"src": "5045:10:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 2128,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5056:6:8",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "5045:17:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 2129,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5066:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5045:22:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2135,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"expression": {
																				"id": 2131,
																				"name": "target",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2111,
																				"src": "5071:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 2132,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "5078:4:8",
																			"memberName": "code",
																			"nodeType": "MemberAccess",
																			"src": "5071:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 2133,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5083:6:8",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "5071:18:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 2134,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5093:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5071:23:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "5045:49:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2142,
															"nodeType": "IfStatement",
															"src": "5041:119:8",
															"trueBody": {
																"id": 2141,
																"nodeType": "Block",
																"src": "5096:64:8",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 2138,
																					"name": "target",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2111,
																					"src": "5138:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 2137,
																				"name": "AddressEmptyCode",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1949,
																				"src": "5121:16:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																					"typeString": "function (address) pure returns (error)"
																				}
																			},
																			"id": 2139,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5121:24:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 2140,
																		"nodeType": "RevertStatement",
																		"src": "5114:31:8"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 2143,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2115,
																"src": "5180:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 2119,
															"id": 2144,
															"nodeType": "Return",
															"src": "5173:17:8"
														}
													]
												},
												"id": 2146,
												"nodeType": "IfStatement",
												"src": "4793:408:8",
												"trueBody": {
													"id": 2126,
													"nodeType": "Block",
													"src": "4807:44:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2123,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2115,
																		"src": "4829:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 2122,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2188,
																	"src": "4821:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 2124,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4821:19:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2125,
															"nodeType": "ExpressionStatement",
															"src": "4821:19:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2109,
										"nodeType": "StructuredDocumentation",
										"src": "4365:255:8",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n unsuccessful call."
									},
									"id": 2148,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "4634:26:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2111,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4678:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 2148,
												"src": "4670:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2110,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4670:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2113,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "4699:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 2148,
												"src": "4694:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2112,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4694:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2115,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "4729:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 2148,
												"src": "4716:23:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2114,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4716:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4660:85:8"
									},
									"returnParameters": {
										"id": 2119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2118,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2148,
												"src": "4769:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2117,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4769:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4768:14:8"
									},
									"scope": 2189,
									"src": "4625:582:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2169,
										"nodeType": "Block",
										"src": "5509:122:8",
										"statements": [
											{
												"condition": {
													"id": 2159,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "5523:8:8",
													"subExpression": {
														"id": 2158,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2151,
														"src": "5524:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2167,
													"nodeType": "Block",
													"src": "5583:42:8",
													"statements": [
														{
															"expression": {
																"id": 2165,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2153,
																"src": "5604:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 2157,
															"id": 2166,
															"nodeType": "Return",
															"src": "5597:17:8"
														}
													]
												},
												"id": 2168,
												"nodeType": "IfStatement",
												"src": "5519:106:8",
												"trueBody": {
													"id": 2164,
													"nodeType": "Block",
													"src": "5533:44:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2161,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2153,
																		"src": "5555:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 2160,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2188,
																	"src": "5547:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 2162,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5547:19:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2163,
															"nodeType": "ExpressionStatement",
															"src": "5547:19:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2149,
										"nodeType": "StructuredDocumentation",
										"src": "5213:189:8",
										"text": " @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {FailedInnerCall} error."
									},
									"id": 2170,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "5416:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2151,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "5438:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 2170,
												"src": "5433:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2150,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5433:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2153,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5460:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 2170,
												"src": "5447:23:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2152,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5447:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5432:39:8"
									},
									"returnParameters": {
										"id": 2157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2156,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2170,
												"src": "5495:12:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2155,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5495:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5494:14:8"
									},
									"scope": 2189,
									"src": "5407:224:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2187,
										"nodeType": "Block",
										"src": "5798:461:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2179,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2176,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2173,
															"src": "5874:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2177,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5885:6:8",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5874:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2178,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5894:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5874:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2185,
													"nodeType": "Block",
													"src": "6204:49:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2182,
																	"name": "FailedInnerCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1952,
																	"src": "6225:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 2183,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6225:17:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 2184,
															"nodeType": "RevertStatement",
															"src": "6218:24:8"
														}
													]
												},
												"id": 2186,
												"nodeType": "IfStatement",
												"src": "5870:383:8",
												"trueBody": {
													"id": 2181,
													"nodeType": "Block",
													"src": "5897:301:8",
													"statements": [
														{
															"AST": {
																"nativeSrc": "6055:133:8",
																"nodeType": "YulBlock",
																"src": "6055:133:8",
																"statements": [
																	{
																		"nativeSrc": "6073:40:8",
																		"nodeType": "YulVariableDeclaration",
																		"src": "6073:40:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nativeSrc": "6102:10:8",
																					"nodeType": "YulIdentifier",
																					"src": "6102:10:8"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "6096:5:8",
																				"nodeType": "YulIdentifier",
																				"src": "6096:5:8"
																			},
																			"nativeSrc": "6096:17:8",
																			"nodeType": "YulFunctionCall",
																			"src": "6096:17:8"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nativeSrc": "6077:15:8",
																				"nodeType": "YulTypedName",
																				"src": "6077:15:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "6141:2:8",
																							"nodeType": "YulLiteral",
																							"src": "6141:2:8",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nativeSrc": "6145:10:8",
																							"nodeType": "YulIdentifier",
																							"src": "6145:10:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "6137:3:8",
																						"nodeType": "YulIdentifier",
																						"src": "6137:3:8"
																					},
																					"nativeSrc": "6137:19:8",
																					"nodeType": "YulFunctionCall",
																					"src": "6137:19:8"
																				},
																				{
																					"name": "returndata_size",
																					"nativeSrc": "6158:15:8",
																					"nodeType": "YulIdentifier",
																					"src": "6158:15:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "6130:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "6130:6:8"
																			},
																			"nativeSrc": "6130:44:8",
																			"nodeType": "YulFunctionCall",
																			"src": "6130:44:8"
																		},
																		"nativeSrc": "6130:44:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "6130:44:8"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "cancun",
															"externalReferences": [
																{
																	"declaration": 2173,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "6102:10:8",
																	"valueSize": 1
																},
																{
																	"declaration": 2173,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "6145:10:8",
																	"valueSize": 1
																}
															],
															"id": 2180,
															"nodeType": "InlineAssembly",
															"src": "6046:142:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2171,
										"nodeType": "StructuredDocumentation",
										"src": "5637:101:8",
										"text": " @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}."
									},
									"id": 2188,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "5752:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2173,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5773:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 2188,
												"src": "5760:23:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2172,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5760:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5759:25:8"
									},
									"returnParameters": {
										"id": 2175,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5798:0:8"
									},
									"scope": 2189,
									"src": "5743:516:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2190,
							"src": "195:6066:8",
							"usedErrors": [
								1944,
								1949,
								1952
							],
							"usedEvents": []
						}
					],
					"src": "101:6161:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							2219
						]
					},
					"id": 2220,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2191,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:9"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2192,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:9",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 2219,
							"linearizedBaseContracts": [
								2219
							],
							"name": "Context",
							"nameLocation": "642:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2200,
										"nodeType": "Block",
										"src": "718:34:9",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 2197,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 2198,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:9",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2196,
												"id": 2199,
												"nodeType": "Return",
												"src": "728:17:9"
											}
										]
									},
									"id": 2201,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2193,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:9"
									},
									"returnParameters": {
										"id": 2196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2195,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2201,
												"src": "709:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:9"
									},
									"scope": 2219,
									"src": "656:96:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2209,
										"nodeType": "Block",
										"src": "825:32:9",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 2206,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 2207,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:9",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 2205,
												"id": 2208,
												"nodeType": "Return",
												"src": "835:15:9"
											}
										]
									},
									"id": 2210,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2202,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:9"
									},
									"returnParameters": {
										"id": 2205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2204,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2210,
												"src": "809:14:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2203,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:9"
									},
									"scope": 2219,
									"src": "758:99:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2217,
										"nodeType": "Block",
										"src": "935:25:9",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 2215,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 2214,
												"id": 2216,
												"nodeType": "Return",
												"src": "945:8:9"
											}
										]
									},
									"id": 2218,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2211,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:9"
									},
									"returnParameters": {
										"id": 2214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2213,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2218,
												"src": "926:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2212,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:9"
									},
									"scope": 2219,
									"src": "863:97:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 2220,
							"src": "624:338:9",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							3273
						]
					},
					"id": 3274,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2221,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "103:24:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2222,
								"nodeType": "StructuredDocumentation",
								"src": "129:73:10",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3273,
							"linearizedBaseContracts": [
								3273
							],
							"name": "Math",
							"nameLocation": "211:4:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2223,
										"nodeType": "StructuredDocumentation",
										"src": "222:50:10",
										"text": " @dev Muldiv operation overflow."
									},
									"errorSelector": "227bc153",
									"id": 2225,
									"name": "MathOverflowedMulDiv",
									"nameLocation": "283:20:10",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2224,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "303:2:10"
									},
									"src": "277:29:10"
								},
								{
									"canonicalName": "Math.Rounding",
									"id": 2230,
									"members": [
										{
											"id": 2226,
											"name": "Floor",
											"nameLocation": "336:5:10",
											"nodeType": "EnumValue",
											"src": "336:5:10"
										},
										{
											"id": 2227,
											"name": "Ceil",
											"nameLocation": "379:4:10",
											"nodeType": "EnumValue",
											"src": "379:4:10"
										},
										{
											"id": 2228,
											"name": "Trunc",
											"nameLocation": "421:5:10",
											"nodeType": "EnumValue",
											"src": "421:5:10"
										},
										{
											"id": 2229,
											"name": "Expand",
											"nameLocation": "451:6:10",
											"nodeType": "EnumValue",
											"src": "451:6:10"
										}
									],
									"name": "Rounding",
									"nameLocation": "317:8:10",
									"nodeType": "EnumDefinition",
									"src": "312:169:10"
								},
								{
									"body": {
										"id": 2261,
										"nodeType": "Block",
										"src": "661:140:10",
										"statements": [
											{
												"id": 2260,
												"nodeType": "UncheckedBlock",
												"src": "671:124:10",
												"statements": [
													{
														"assignments": [
															2243
														],
														"declarations": [
															{
																"constant": false,
																"id": 2243,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "703:1:10",
																"nodeType": "VariableDeclaration",
																"scope": 2260,
																"src": "695:9:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2242,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "695:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2247,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2246,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2244,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2233,
																"src": "707:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 2245,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2235,
																"src": "711:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "707:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "695:17:10"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2250,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2248,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2243,
																"src": "730:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2249,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2233,
																"src": "734:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "730:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2255,
														"nodeType": "IfStatement",
														"src": "726:28:10",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2251,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "745:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2252,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "752:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2253,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "744:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2241,
															"id": 2254,
															"nodeType": "Return",
															"src": "737:17:10"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2256,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "776:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2257,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2243,
																	"src": "782:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2258,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "775:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2241,
														"id": 2259,
														"nodeType": "Return",
														"src": "768:16:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2231,
										"nodeType": "StructuredDocumentation",
										"src": "487:93:10",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag."
									},
									"id": 2262,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "594:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2233,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2262,
												"src": "601:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2235,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2262,
												"src": "612:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2234,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:10"
									},
									"returnParameters": {
										"id": 2241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2238,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2262,
												"src": "646:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2237,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "646:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2240,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2262,
												"src": "652:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:15:10"
									},
									"scope": 3273,
									"src": "585:216:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2289,
										"nodeType": "Block",
										"src": "984:113:10",
										"statements": [
											{
												"id": 2288,
												"nodeType": "UncheckedBlock",
												"src": "994:97:10",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2276,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2274,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2267,
																"src": "1022:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 2275,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2265,
																"src": "1026:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1022:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2281,
														"nodeType": "IfStatement",
														"src": "1018:28:10",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2277,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1037:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2278,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1044:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2279,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1036:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2273,
															"id": 2280,
															"nodeType": "Return",
															"src": "1029:17:10"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2282,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1068:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2285,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2283,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2265,
																		"src": "1074:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 2284,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2267,
																		"src": "1078:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1074:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2286,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1067:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2273,
														"id": 2287,
														"nodeType": "Return",
														"src": "1060:20:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2263,
										"nodeType": "StructuredDocumentation",
										"src": "807:96:10",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag."
									},
									"id": 2290,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "917:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2265,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "932:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2290,
												"src": "924:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2264,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "924:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2267,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "943:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2290,
												"src": "935:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:22:10"
									},
									"returnParameters": {
										"id": 2273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2270,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2290,
												"src": "969:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2269,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "969:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2272,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2290,
												"src": "975:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2271,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "975:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "968:15:10"
									},
									"scope": 3273,
									"src": "908:189:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2331,
										"nodeType": "Block",
										"src": "1283:417:10",
										"statements": [
											{
												"id": 2330,
												"nodeType": "UncheckedBlock",
												"src": "1293:401:10",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2304,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2302,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2293,
																"src": "1551:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2303,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1556:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1551:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2309,
														"nodeType": "IfStatement",
														"src": "1547:28:10",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 2305,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1567:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 2306,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1573:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2307,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1566:9:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2301,
															"id": 2308,
															"nodeType": "Return",
															"src": "1559:16:10"
														}
													},
													{
														"assignments": [
															2311
														],
														"declarations": [
															{
																"constant": false,
																"id": 2311,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1597:1:10",
																"nodeType": "VariableDeclaration",
																"scope": 2330,
																"src": "1589:9:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2310,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1589:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2315,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2314,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2312,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2293,
																"src": "1601:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2313,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2295,
																"src": "1605:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1601:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1589:17:10"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2320,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2318,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2316,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2311,
																	"src": "1624:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2317,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2293,
																	"src": "1628:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1624:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2319,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2295,
																"src": "1633:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1624:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2325,
														"nodeType": "IfStatement",
														"src": "1620:33:10",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2321,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1644:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2322,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1651:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2323,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1643:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2301,
															"id": 2324,
															"nodeType": "Return",
															"src": "1636:17:10"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2326,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1675:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2327,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2311,
																	"src": "1681:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2328,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1674:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2301,
														"id": 2329,
														"nodeType": "Return",
														"src": "1667:16:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2291,
										"nodeType": "StructuredDocumentation",
										"src": "1103:99:10",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag."
									},
									"id": 2332,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1216:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2293,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1231:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2332,
												"src": "1223:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2292,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2295,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1242:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2332,
												"src": "1234:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2294,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:22:10"
									},
									"returnParameters": {
										"id": 2301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2298,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2332,
												"src": "1268:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2297,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2300,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2332,
												"src": "1274:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2299,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:15:10"
									},
									"scope": 3273,
									"src": "1207:493:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2359,
										"nodeType": "Block",
										"src": "1887:114:10",
										"statements": [
											{
												"id": 2358,
												"nodeType": "UncheckedBlock",
												"src": "1897:98:10",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2346,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2344,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2337,
																"src": "1925:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2345,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1930:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1925:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2351,
														"nodeType": "IfStatement",
														"src": "1921:29:10",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2347,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1941:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2348,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1948:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2349,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1940:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2343,
															"id": 2350,
															"nodeType": "Return",
															"src": "1933:17:10"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2352,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1972:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2355,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2353,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2335,
																		"src": "1978:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2354,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2337,
																		"src": "1982:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1978:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2356,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1971:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2343,
														"id": 2357,
														"nodeType": "Return",
														"src": "1964:20:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2333,
										"nodeType": "StructuredDocumentation",
										"src": "1706:100:10",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag."
									},
									"id": 2360,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1820:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2335,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1835:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2360,
												"src": "1827:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1827:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2337,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1846:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2360,
												"src": "1838:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2336,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1838:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1826:22:10"
									},
									"returnParameters": {
										"id": 2343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2340,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2360,
												"src": "1872:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2339,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1872:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2342,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2360,
												"src": "1878:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2341,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1878:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1871:15:10"
									},
									"scope": 3273,
									"src": "1811:190:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2387,
										"nodeType": "Block",
										"src": "2198:114:10",
										"statements": [
											{
												"id": 2386,
												"nodeType": "UncheckedBlock",
												"src": "2208:98:10",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2374,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2372,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2365,
																"src": "2236:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2373,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2241:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2236:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2379,
														"nodeType": "IfStatement",
														"src": "2232:29:10",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2375,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2252:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2376,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2259:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2377,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2251:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2371,
															"id": 2378,
															"nodeType": "Return",
															"src": "2244:17:10"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2380,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2283:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2383,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2381,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2363,
																		"src": "2289:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 2382,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2365,
																		"src": "2293:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2289:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2384,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2282:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2371,
														"id": 2385,
														"nodeType": "Return",
														"src": "2275:20:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2361,
										"nodeType": "StructuredDocumentation",
										"src": "2007:110:10",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."
									},
									"id": 2388,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2131:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2363,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2146:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2388,
												"src": "2138:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2362,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2138:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2365,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2157:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2388,
												"src": "2149:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2364,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2137:22:10"
									},
									"returnParameters": {
										"id": 2371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2368,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2388,
												"src": "2183:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2367,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2183:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2370,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2388,
												"src": "2189:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2369,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2189:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2182:15:10"
									},
									"scope": 3273,
									"src": "2122:190:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2405,
										"nodeType": "Block",
										"src": "2449:37:10",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2400,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2398,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2391,
															"src": "2466:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2399,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2393,
															"src": "2470:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2466:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2402,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2393,
														"src": "2478:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2403,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2466:13:10",
													"trueExpression": {
														"id": 2401,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2391,
														"src": "2474:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2397,
												"id": 2404,
												"nodeType": "Return",
												"src": "2459:20:10"
											}
										]
									},
									"documentation": {
										"id": 2389,
										"nodeType": "StructuredDocumentation",
										"src": "2318:59:10",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2406,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "2391:3:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2394,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2391,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2403:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2406,
												"src": "2395:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2390,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2393,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2414:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2406,
												"src": "2406:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2392,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2406:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2394:22:10"
									},
									"returnParameters": {
										"id": 2397,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2396,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2406,
												"src": "2440:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2395,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2440:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2439:9:10"
									},
									"scope": 3273,
									"src": "2382:104:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2423,
										"nodeType": "Block",
										"src": "2624:37:10",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2418,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2416,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2409,
															"src": "2641:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2417,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2411,
															"src": "2645:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2641:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2420,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2411,
														"src": "2653:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2421,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2641:13:10",
													"trueExpression": {
														"id": 2419,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2409,
														"src": "2649:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2415,
												"id": 2422,
												"nodeType": "Return",
												"src": "2634:20:10"
											}
										]
									},
									"documentation": {
										"id": 2407,
										"nodeType": "StructuredDocumentation",
										"src": "2492:60:10",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 2424,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "2566:3:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2412,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2409,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2578:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2424,
												"src": "2570:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2408,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2411,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2589:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2424,
												"src": "2581:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2410,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2581:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:22:10"
									},
									"returnParameters": {
										"id": 2415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2414,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2424,
												"src": "2615:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2413,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2615:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2614:9:10"
									},
									"scope": 3273,
									"src": "2557:104:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2446,
										"nodeType": "Block",
										"src": "2845:82:10",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2436,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2434,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2427,
																	"src": "2900:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2435,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2429,
																	"src": "2904:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2900:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2437,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2899:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2443,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2440,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2438,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2427,
																		"src": "2910:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 2439,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2429,
																		"src": "2914:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2910:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2441,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2909:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 2442,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2919:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "2909:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2899:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2433,
												"id": 2445,
												"nodeType": "Return",
												"src": "2892:28:10"
											}
										]
									},
									"documentation": {
										"id": 2425,
										"nodeType": "StructuredDocumentation",
										"src": "2667:102:10",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 2447,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "2783:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2427,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2799:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2447,
												"src": "2791:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2426,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2791:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2429,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2810:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2447,
												"src": "2802:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2428,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2802:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2790:22:10"
									},
									"returnParameters": {
										"id": 2433,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2432,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2447,
												"src": "2836:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2431,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2836:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2835:9:10"
									},
									"scope": 3273,
									"src": "2774:153:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2480,
										"nodeType": "Block",
										"src": "3219:260:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2459,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2457,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2452,
														"src": "3233:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2458,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3238:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2465,
												"nodeType": "IfStatement",
												"src": "3229:127:10",
												"trueBody": {
													"id": 2464,
													"nodeType": "Block",
													"src": "3241:115:10",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2462,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2460,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2450,
																	"src": "3340:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2461,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2452,
																	"src": "3344:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3340:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2456,
															"id": 2463,
															"nodeType": "Return",
															"src": "3333:12:10"
														}
													]
												}
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2468,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2466,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2450,
															"src": "3444:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2467,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3449:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3444:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2477,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2475,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2472,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2470,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2450,
																			"src": "3458:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2471,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3458:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2473,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3457:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2474,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2452,
																"src": "3467:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3457:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2476,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3471:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "3457:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2478,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3444:28:10",
													"trueExpression": {
														"hexValue": "30",
														"id": 2469,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3453:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2456,
												"id": 2479,
												"nodeType": "Return",
												"src": "3437:35:10"
											}
										]
									},
									"documentation": {
										"id": 2448,
										"nodeType": "StructuredDocumentation",
										"src": "2933:210:10",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."
									},
									"id": 2481,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "3157:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2450,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3173:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2481,
												"src": "3165:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2449,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3165:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2452,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3184:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2481,
												"src": "3176:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2451,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3176:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3164:22:10"
									},
									"returnParameters": {
										"id": 2456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2455,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2481,
												"src": "3210:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2454,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3210:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3209:9:10"
									},
									"scope": 3273,
									"src": "3148:331:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2606,
										"nodeType": "Block",
										"src": "3901:4018:10",
										"statements": [
											{
												"id": 2605,
												"nodeType": "UncheckedBlock",
												"src": "3911:4002:10",
												"statements": [
													{
														"assignments": [
															2494
														],
														"declarations": [
															{
																"constant": false,
																"id": 2494,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "4240:5:10",
																"nodeType": "VariableDeclaration",
																"scope": 2605,
																"src": "4232:13:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2493,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4232:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2498,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2497,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2495,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2484,
																"src": "4248:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2496,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2486,
																"src": "4252:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4248:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4232:21:10"
													},
													{
														"assignments": [
															2500
														],
														"declarations": [
															{
																"constant": false,
																"id": 2500,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "4320:5:10",
																"nodeType": "VariableDeclaration",
																"scope": 2605,
																"src": "4312:13:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2499,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4312:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2501,
														"nodeType": "VariableDeclarationStatement",
														"src": "4312:13:10"
													},
													{
														"AST": {
															"nativeSrc": "4392:122:10",
															"nodeType": "YulBlock",
															"src": "4392:122:10",
															"statements": [
																{
																	"nativeSrc": "4410:30:10",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4410:30:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "4427:1:10",
																				"nodeType": "YulIdentifier",
																				"src": "4427:1:10"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "4430:1:10",
																				"nodeType": "YulIdentifier",
																				"src": "4430:1:10"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4437:1:10",
																						"nodeType": "YulLiteral",
																						"src": "4437:1:10",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4433:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "4433:3:10"
																				},
																				"nativeSrc": "4433:6:10",
																				"nodeType": "YulFunctionCall",
																				"src": "4433:6:10"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "4420:6:10",
																			"nodeType": "YulIdentifier",
																			"src": "4420:6:10"
																		},
																		"nativeSrc": "4420:20:10",
																		"nodeType": "YulFunctionCall",
																		"src": "4420:20:10"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nativeSrc": "4414:2:10",
																			"nodeType": "YulTypedName",
																			"src": "4414:2:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4457:43:10",
																	"nodeType": "YulAssignment",
																	"src": "4457:43:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4474:2:10",
																						"nodeType": "YulIdentifier",
																						"src": "4474:2:10"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4478:5:10",
																						"nodeType": "YulIdentifier",
																						"src": "4478:5:10"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "4470:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "4470:3:10"
																				},
																				"nativeSrc": "4470:14:10",
																				"nodeType": "YulFunctionCall",
																				"src": "4470:14:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4489:2:10",
																						"nodeType": "YulIdentifier",
																						"src": "4489:2:10"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4493:5:10",
																						"nodeType": "YulIdentifier",
																						"src": "4493:5:10"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4486:2:10",
																					"nodeType": "YulIdentifier",
																					"src": "4486:2:10"
																				},
																				"nativeSrc": "4486:13:10",
																				"nodeType": "YulFunctionCall",
																				"src": "4486:13:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4466:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "4466:3:10"
																		},
																		"nativeSrc": "4466:34:10",
																		"nodeType": "YulFunctionCall",
																		"src": "4466:34:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "4457:5:10",
																			"nodeType": "YulIdentifier",
																			"src": "4457:5:10"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2494,
																"isOffset": false,
																"isSlot": false,
																"src": "4478:5:10",
																"valueSize": 1
															},
															{
																"declaration": 2494,
																"isOffset": false,
																"isSlot": false,
																"src": "4493:5:10",
																"valueSize": 1
															},
															{
																"declaration": 2500,
																"isOffset": false,
																"isSlot": false,
																"src": "4457:5:10",
																"valueSize": 1
															},
															{
																"declaration": 2484,
																"isOffset": false,
																"isSlot": false,
																"src": "4427:1:10",
																"valueSize": 1
															},
															{
																"declaration": 2486,
																"isOffset": false,
																"isSlot": false,
																"src": "4430:1:10",
																"valueSize": 1
															}
														],
														"id": 2502,
														"nodeType": "InlineAssembly",
														"src": "4383:131:10"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2505,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2503,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2500,
																"src": "4595:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2504,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4604:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4595:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2511,
														"nodeType": "IfStatement",
														"src": "4591:368:10",
														"trueBody": {
															"id": 2510,
															"nodeType": "Block",
															"src": "4607:352:10",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2508,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2506,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2494,
																			"src": "4925:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 2507,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2488,
																			"src": "4933:11:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4925:19:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2492,
																	"id": 2509,
																	"nodeType": "Return",
																	"src": "4918:26:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2514,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2512,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2488,
																"src": "5065:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2513,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2500,
																"src": "5080:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5065:20:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2519,
														"nodeType": "IfStatement",
														"src": "5061:88:10",
														"trueBody": {
															"id": 2518,
															"nodeType": "Block",
															"src": "5087:62:10",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2515,
																			"name": "MathOverflowedMulDiv",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2225,
																			"src": "5112:20:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																				"typeString": "function () pure returns (error)"
																			}
																		},
																		"id": 2516,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5112:22:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 2517,
																	"nodeType": "RevertStatement",
																	"src": "5105:29:10"
																}
															]
														}
													},
													{
														"assignments": [
															2521
														],
														"declarations": [
															{
																"constant": false,
																"id": 2521,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "5412:9:10",
																"nodeType": "VariableDeclaration",
																"scope": 2605,
																"src": "5404:17:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2520,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5404:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2522,
														"nodeType": "VariableDeclarationStatement",
														"src": "5404:17:10"
													},
													{
														"AST": {
															"nativeSrc": "5444:291:10",
															"nodeType": "YulBlock",
															"src": "5444:291:10",
															"statements": [
																{
																	"nativeSrc": "5513:38:10",
																	"nodeType": "YulAssignment",
																	"src": "5513:38:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "5533:1:10",
																				"nodeType": "YulIdentifier",
																				"src": "5533:1:10"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "5536:1:10",
																				"nodeType": "YulIdentifier",
																				"src": "5536:1:10"
																			},
																			{
																				"name": "denominator",
																				"nativeSrc": "5539:11:10",
																				"nodeType": "YulIdentifier",
																				"src": "5539:11:10"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "5526:6:10",
																			"nodeType": "YulIdentifier",
																			"src": "5526:6:10"
																		},
																		"nativeSrc": "5526:25:10",
																		"nodeType": "YulFunctionCall",
																		"src": "5526:25:10"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nativeSrc": "5513:9:10",
																			"nodeType": "YulIdentifier",
																			"src": "5513:9:10"
																		}
																	]
																},
																{
																	"nativeSrc": "5633:41:10",
																	"nodeType": "YulAssignment",
																	"src": "5633:41:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nativeSrc": "5646:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "5646:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nativeSrc": "5656:9:10",
																						"nodeType": "YulIdentifier",
																						"src": "5656:9:10"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "5667:5:10",
																						"nodeType": "YulIdentifier",
																						"src": "5667:5:10"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nativeSrc": "5653:2:10",
																					"nodeType": "YulIdentifier",
																					"src": "5653:2:10"
																				},
																				"nativeSrc": "5653:20:10",
																				"nodeType": "YulFunctionCall",
																				"src": "5653:20:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5642:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "5642:3:10"
																		},
																		"nativeSrc": "5642:32:10",
																		"nodeType": "YulFunctionCall",
																		"src": "5642:32:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "5633:5:10",
																			"nodeType": "YulIdentifier",
																			"src": "5633:5:10"
																		}
																	]
																},
																{
																	"nativeSrc": "5691:30:10",
																	"nodeType": "YulAssignment",
																	"src": "5691:30:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "5704:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "5704:5:10"
																			},
																			{
																				"name": "remainder",
																				"nativeSrc": "5711:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "5711:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5700:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "5700:3:10"
																		},
																		"nativeSrc": "5700:21:10",
																		"nodeType": "YulFunctionCall",
																		"src": "5700:21:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "5691:5:10",
																			"nodeType": "YulIdentifier",
																			"src": "5691:5:10"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2488,
																"isOffset": false,
																"isSlot": false,
																"src": "5539:11:10",
																"valueSize": 1
															},
															{
																"declaration": 2494,
																"isOffset": false,
																"isSlot": false,
																"src": "5667:5:10",
																"valueSize": 1
															},
															{
																"declaration": 2494,
																"isOffset": false,
																"isSlot": false,
																"src": "5691:5:10",
																"valueSize": 1
															},
															{
																"declaration": 2494,
																"isOffset": false,
																"isSlot": false,
																"src": "5704:5:10",
																"valueSize": 1
															},
															{
																"declaration": 2500,
																"isOffset": false,
																"isSlot": false,
																"src": "5633:5:10",
																"valueSize": 1
															},
															{
																"declaration": 2500,
																"isOffset": false,
																"isSlot": false,
																"src": "5646:5:10",
																"valueSize": 1
															},
															{
																"declaration": 2521,
																"isOffset": false,
																"isSlot": false,
																"src": "5513:9:10",
																"valueSize": 1
															},
															{
																"declaration": 2521,
																"isOffset": false,
																"isSlot": false,
																"src": "5656:9:10",
																"valueSize": 1
															},
															{
																"declaration": 2521,
																"isOffset": false,
																"isSlot": false,
																"src": "5711:9:10",
																"valueSize": 1
															},
															{
																"declaration": 2484,
																"isOffset": false,
																"isSlot": false,
																"src": "5533:1:10",
																"valueSize": 1
															},
															{
																"declaration": 2486,
																"isOffset": false,
																"isSlot": false,
																"src": "5536:1:10",
																"valueSize": 1
															}
														],
														"id": 2523,
														"nodeType": "InlineAssembly",
														"src": "5435:300:10"
													},
													{
														"assignments": [
															2525
														],
														"declarations": [
															{
																"constant": false,
																"id": 2525,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "5947:4:10",
																"nodeType": "VariableDeclaration",
																"scope": 2605,
																"src": "5939:12:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2524,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5939:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2532,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2531,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2526,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2488,
																"src": "5954:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2529,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "30",
																			"id": 2527,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5969:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 2528,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2488,
																			"src": "5973:11:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5969:15:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2530,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5968:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5954:31:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "5939:46:10"
													},
													{
														"AST": {
															"nativeSrc": "6008:362:10",
															"nodeType": "YulBlock",
															"src": "6008:362:10",
															"statements": [
																{
																	"nativeSrc": "6073:37:10",
																	"nodeType": "YulAssignment",
																	"src": "6073:37:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nativeSrc": "6092:11:10",
																				"nodeType": "YulIdentifier",
																				"src": "6092:11:10"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6105:4:10",
																				"nodeType": "YulIdentifier",
																				"src": "6105:4:10"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6088:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "6088:3:10"
																		},
																		"nativeSrc": "6088:22:10",
																		"nodeType": "YulFunctionCall",
																		"src": "6088:22:10"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nativeSrc": "6073:11:10",
																			"nodeType": "YulIdentifier",
																			"src": "6073:11:10"
																		}
																	]
																},
																{
																	"nativeSrc": "6177:25:10",
																	"nodeType": "YulAssignment",
																	"src": "6177:25:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "6190:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "6190:5:10"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6197:4:10",
																				"nodeType": "YulIdentifier",
																				"src": "6197:4:10"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6186:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "6186:3:10"
																		},
																		"nativeSrc": "6186:16:10",
																		"nodeType": "YulFunctionCall",
																		"src": "6186:16:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "6177:5:10",
																			"nodeType": "YulIdentifier",
																			"src": "6177:5:10"
																		}
																	]
																},
																{
																	"nativeSrc": "6317:39:10",
																	"nodeType": "YulAssignment",
																	"src": "6317:39:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6337:1:10",
																								"nodeType": "YulLiteral",
																								"src": "6337:1:10",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nativeSrc": "6340:4:10",
																								"nodeType": "YulIdentifier",
																								"src": "6340:4:10"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "6333:3:10",
																							"nodeType": "YulIdentifier",
																							"src": "6333:3:10"
																						},
																						"nativeSrc": "6333:12:10",
																						"nodeType": "YulFunctionCall",
																						"src": "6333:12:10"
																					},
																					{
																						"name": "twos",
																						"nativeSrc": "6347:4:10",
																						"nodeType": "YulIdentifier",
																						"src": "6347:4:10"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nativeSrc": "6329:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "6329:3:10"
																				},
																				"nativeSrc": "6329:23:10",
																				"nodeType": "YulFunctionCall",
																				"src": "6329:23:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6354:1:10",
																				"nodeType": "YulLiteral",
																				"src": "6354:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6325:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "6325:3:10"
																		},
																		"nativeSrc": "6325:31:10",
																		"nodeType": "YulFunctionCall",
																		"src": "6325:31:10"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nativeSrc": "6317:4:10",
																			"nodeType": "YulIdentifier",
																			"src": "6317:4:10"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2488,
																"isOffset": false,
																"isSlot": false,
																"src": "6073:11:10",
																"valueSize": 1
															},
															{
																"declaration": 2488,
																"isOffset": false,
																"isSlot": false,
																"src": "6092:11:10",
																"valueSize": 1
															},
															{
																"declaration": 2494,
																"isOffset": false,
																"isSlot": false,
																"src": "6177:5:10",
																"valueSize": 1
															},
															{
																"declaration": 2494,
																"isOffset": false,
																"isSlot": false,
																"src": "6190:5:10",
																"valueSize": 1
															},
															{
																"declaration": 2525,
																"isOffset": false,
																"isSlot": false,
																"src": "6105:4:10",
																"valueSize": 1
															},
															{
																"declaration": 2525,
																"isOffset": false,
																"isSlot": false,
																"src": "6197:4:10",
																"valueSize": 1
															},
															{
																"declaration": 2525,
																"isOffset": false,
																"isSlot": false,
																"src": "6317:4:10",
																"valueSize": 1
															},
															{
																"declaration": 2525,
																"isOffset": false,
																"isSlot": false,
																"src": "6340:4:10",
																"valueSize": 1
															},
															{
																"declaration": 2525,
																"isOffset": false,
																"isSlot": false,
																"src": "6347:4:10",
																"valueSize": 1
															}
														],
														"id": 2533,
														"nodeType": "InlineAssembly",
														"src": "5999:371:10"
													},
													{
														"expression": {
															"id": 2538,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2534,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2494,
																"src": "6436:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2537,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2535,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2500,
																	"src": "6445:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2536,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2525,
																	"src": "6453:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6445:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6436:21:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2539,
														"nodeType": "ExpressionStatement",
														"src": "6436:21:10"
													},
													{
														"assignments": [
															2541
														],
														"declarations": [
															{
																"constant": false,
																"id": 2541,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "6783:7:10",
																"nodeType": "VariableDeclaration",
																"scope": 2605,
																"src": "6775:15:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2540,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6775:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2548,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2547,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2544,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 2542,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6794:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 2543,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2488,
																			"src": "6798:11:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6794:15:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2545,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6793:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 2546,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6813:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "6793:21:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "6775:39:10"
													},
													{
														"expression": {
															"id": 2555,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2549,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2541,
																"src": "7031:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2554,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2550,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7042:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2553,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2551,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2488,
																		"src": "7046:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2552,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2541,
																		"src": "7060:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7046:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7042:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7031:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2556,
														"nodeType": "ExpressionStatement",
														"src": "7031:36:10"
													},
													{
														"expression": {
															"id": 2563,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2557,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2541,
																"src": "7100:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2562,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2558,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7111:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2561,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2559,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2488,
																		"src": "7115:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2560,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2541,
																		"src": "7129:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7115:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7111:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7100:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2564,
														"nodeType": "ExpressionStatement",
														"src": "7100:36:10"
													},
													{
														"expression": {
															"id": 2571,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2565,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2541,
																"src": "7170:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2570,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2566,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7181:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2569,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2567,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2488,
																		"src": "7185:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2568,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2541,
																		"src": "7199:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7185:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7181:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7170:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2572,
														"nodeType": "ExpressionStatement",
														"src": "7170:36:10"
													},
													{
														"expression": {
															"id": 2579,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2573,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2541,
																"src": "7240:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2578,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2574,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7251:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2577,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2575,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2488,
																		"src": "7255:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2576,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2541,
																		"src": "7269:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7255:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7251:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7240:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2580,
														"nodeType": "ExpressionStatement",
														"src": "7240:36:10"
													},
													{
														"expression": {
															"id": 2587,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2581,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2541,
																"src": "7310:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2586,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2582,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7321:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2585,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2583,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2488,
																		"src": "7325:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2584,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2541,
																		"src": "7339:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7325:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7321:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7310:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2588,
														"nodeType": "ExpressionStatement",
														"src": "7310:36:10"
													},
													{
														"expression": {
															"id": 2595,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2589,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2541,
																"src": "7381:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2594,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2590,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7392:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2593,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2591,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2488,
																		"src": "7396:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2592,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2541,
																		"src": "7410:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7396:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7392:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7381:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2596,
														"nodeType": "ExpressionStatement",
														"src": "7381:36:10"
													},
													{
														"expression": {
															"id": 2601,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2597,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2491,
																"src": "7851:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2600,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2598,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2494,
																	"src": "7860:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2599,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2541,
																	"src": "7868:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7860:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7851:24:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2602,
														"nodeType": "ExpressionStatement",
														"src": "7851:24:10"
													},
													{
														"expression": {
															"id": 2603,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2491,
															"src": "7896:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2492,
														"id": 2604,
														"nodeType": "Return",
														"src": "7889:13:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2482,
										"nodeType": "StructuredDocumentation",
										"src": "3485:313:10",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."
									},
									"id": 2607,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "3812:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2484,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3827:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2607,
												"src": "3819:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2483,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3819:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2486,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "3838:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2607,
												"src": "3830:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2485,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3830:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2488,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "3849:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 2607,
												"src": "3841:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2487,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3841:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3818:43:10"
									},
									"returnParameters": {
										"id": 2492,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2491,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "3893:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2607,
												"src": "3885:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2490,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3885:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3884:16:10"
									},
									"scope": 3273,
									"src": "3803:4116:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2649,
										"nodeType": "Block",
										"src": "8161:192:10",
										"statements": [
											{
												"assignments": [
													2623
												],
												"declarations": [
													{
														"constant": false,
														"id": 2623,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8179:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2649,
														"src": "8171:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2622,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8171:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2629,
												"initialValue": {
													"arguments": [
														{
															"id": 2625,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2610,
															"src": "8195:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2626,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2612,
															"src": "8198:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2627,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2614,
															"src": "8201:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2624,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2607,
															2650
														],
														"referencedDeclaration": 2607,
														"src": "8188:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2628,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8188:25:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8171:42:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2640,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2631,
																"name": "rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2617,
																"src": "8244:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Rounding_$2230",
																	"typeString": "enum Math.Rounding"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_enum$_Rounding_$2230",
																	"typeString": "enum Math.Rounding"
																}
															],
															"id": 2630,
															"name": "unsignedRoundsUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3272,
															"src": "8227:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2230_$returns$_t_bool_$",
																"typeString": "function (enum Math.Rounding) pure returns (bool)"
															}
														},
														"id": 2632,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8227:26:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2639,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2634,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2610,
																	"src": "8264:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2635,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2612,
																	"src": "8267:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2636,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2614,
																	"src": "8270:11:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2633,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "8257:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2637,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8257:25:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2638,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8285:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8257:29:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8227:59:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2646,
												"nodeType": "IfStatement",
												"src": "8223:101:10",
												"trueBody": {
													"id": 2645,
													"nodeType": "Block",
													"src": "8288:36:10",
													"statements": [
														{
															"expression": {
																"id": 2643,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2641,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2623,
																	"src": "8302:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 2642,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8312:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8302:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2644,
															"nodeType": "ExpressionStatement",
															"src": "8302:11:10"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2647,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2623,
													"src": "8340:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2621,
												"id": 2648,
												"nodeType": "Return",
												"src": "8333:13:10"
											}
										]
									},
									"documentation": {
										"id": 2608,
										"nodeType": "StructuredDocumentation",
										"src": "7925:121:10",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 2650,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "8060:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2610,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "8075:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2650,
												"src": "8067:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2609,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8067:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2612,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "8086:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2650,
												"src": "8078:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2611,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8078:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2614,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "8097:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 2650,
												"src": "8089:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2613,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8089:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2617,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8119:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2650,
												"src": "8110:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2230",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2616,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2615,
														"name": "Rounding",
														"nameLocations": [
															"8110:8:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2230,
														"src": "8110:8:10"
													},
													"referencedDeclaration": 2230,
													"src": "8110:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2230",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8066:62:10"
									},
									"returnParameters": {
										"id": 2621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2620,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2650,
												"src": "8152:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2619,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8152:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8151:9:10"
									},
									"scope": 3273,
									"src": "8051:302:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2761,
										"nodeType": "Block",
										"src": "8644:1585:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2660,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2658,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2653,
														"src": "8658:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2659,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8663:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8658:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2664,
												"nodeType": "IfStatement",
												"src": "8654:45:10",
												"trueBody": {
													"id": 2663,
													"nodeType": "Block",
													"src": "8666:33:10",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2661,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8687:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2657,
															"id": 2662,
															"nodeType": "Return",
															"src": "8680:8:10"
														}
													]
												}
											},
											{
												"assignments": [
													2666
												],
												"declarations": [
													{
														"constant": false,
														"id": 2666,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9386:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2761,
														"src": "9378:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2665,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9378:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2675,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2674,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2667,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9395:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2672,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2669,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2653,
																			"src": "9406:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2668,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			2929,
																			2964
																		],
																		"referencedDeclaration": 2929,
																		"src": "9401:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2670,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9401:7:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2671,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9412:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9401:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2673,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9400:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9395:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9378:36:10"
											},
											{
												"id": 2760,
												"nodeType": "UncheckedBlock",
												"src": "9815:408:10",
												"statements": [
													{
														"expression": {
															"id": 2685,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2676,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2666,
																"src": "9839:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2684,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2681,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2677,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2666,
																				"src": "9849:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2680,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2678,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2653,
																					"src": "9858:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2679,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2666,
																					"src": "9862:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9858:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9849:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2682,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9848:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2683,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9873:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9848:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9839:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2686,
														"nodeType": "ExpressionStatement",
														"src": "9839:35:10"
													},
													{
														"expression": {
															"id": 2696,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2687,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2666,
																"src": "9888:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2695,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2692,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2688,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2666,
																				"src": "9898:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2691,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2689,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2653,
																					"src": "9907:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2690,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2666,
																					"src": "9911:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9907:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9898:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2693,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9897:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2694,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9922:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9897:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9888:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2697,
														"nodeType": "ExpressionStatement",
														"src": "9888:35:10"
													},
													{
														"expression": {
															"id": 2707,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2698,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2666,
																"src": "9937:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2706,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2703,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2699,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2666,
																				"src": "9947:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2702,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2700,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2653,
																					"src": "9956:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2701,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2666,
																					"src": "9960:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9956:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9947:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2704,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9946:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2705,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9971:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9946:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9937:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2708,
														"nodeType": "ExpressionStatement",
														"src": "9937:35:10"
													},
													{
														"expression": {
															"id": 2718,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2709,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2666,
																"src": "9986:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2717,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2714,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2710,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2666,
																				"src": "9996:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2713,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2711,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2653,
																					"src": "10005:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2712,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2666,
																					"src": "10009:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10005:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9996:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2715,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9995:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2716,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10020:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9995:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9986:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2719,
														"nodeType": "ExpressionStatement",
														"src": "9986:35:10"
													},
													{
														"expression": {
															"id": 2729,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2720,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2666,
																"src": "10035:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2728,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2725,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2721,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2666,
																				"src": "10045:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2724,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2722,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2653,
																					"src": "10054:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2723,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2666,
																					"src": "10058:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10054:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10045:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2726,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10044:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2727,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10069:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10044:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10035:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2730,
														"nodeType": "ExpressionStatement",
														"src": "10035:35:10"
													},
													{
														"expression": {
															"id": 2740,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2731,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2666,
																"src": "10084:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2739,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2736,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2732,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2666,
																				"src": "10094:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2735,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2733,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2653,
																					"src": "10103:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2734,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2666,
																					"src": "10107:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10103:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10094:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2737,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10093:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2738,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10118:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10093:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10084:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2741,
														"nodeType": "ExpressionStatement",
														"src": "10084:35:10"
													},
													{
														"expression": {
															"id": 2751,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2742,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2666,
																"src": "10133:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2750,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2747,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2743,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2666,
																				"src": "10143:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2746,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2744,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2653,
																					"src": "10152:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2745,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2666,
																					"src": "10156:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10152:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10143:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2748,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10142:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2749,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10167:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10142:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10133:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2752,
														"nodeType": "ExpressionStatement",
														"src": "10133:35:10"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2754,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2666,
																	"src": "10193:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2757,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2755,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2653,
																		"src": "10201:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2756,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2666,
																		"src": "10205:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10201:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2753,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2424,
																"src": "10189:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2758,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10189:23:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2657,
														"id": 2759,
														"nodeType": "Return",
														"src": "10182:30:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2651,
										"nodeType": "StructuredDocumentation",
										"src": "8359:223:10",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 2762,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8596:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2654,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2653,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8609:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2762,
												"src": "8601:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2652,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8601:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8600:11:10"
									},
									"returnParameters": {
										"id": 2657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2656,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2762,
												"src": "8635:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2655,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8635:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8634:9:10"
									},
									"scope": 3273,
									"src": "8587:1642:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2796,
										"nodeType": "Block",
										"src": "10405:164:10",
										"statements": [
											{
												"id": 2795,
												"nodeType": "UncheckedBlock",
												"src": "10415:148:10",
												"statements": [
													{
														"assignments": [
															2774
														],
														"declarations": [
															{
																"constant": false,
																"id": 2774,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "10447:6:10",
																"nodeType": "VariableDeclaration",
																"scope": 2795,
																"src": "10439:14:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2773,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "10439:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2778,
														"initialValue": {
															"arguments": [
																{
																	"id": 2776,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2765,
																	"src": "10461:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2775,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2762,
																	2797
																],
																"referencedDeclaration": 2762,
																"src": "10456:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2777,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10456:7:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "10439:24:10"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2793,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2779,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2774,
																"src": "10484:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2788,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2781,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2768,
																						"src": "10511:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2230",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2230",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 2780,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3272,
																					"src": "10494:16:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2230_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 2782,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10494:26:10",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2787,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2785,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2783,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2774,
																						"src": "10524:6:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 2784,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2774,
																						"src": "10533:6:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "10524:15:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2786,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2765,
																					"src": "10542:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10524:19:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "10494:49:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2790,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10550:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2791,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "10494:57:10",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2789,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10546:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2792,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10493:59:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "10484:68:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2772,
														"id": 2794,
														"nodeType": "Return",
														"src": "10477:75:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2763,
										"nodeType": "StructuredDocumentation",
										"src": "10235:89:10",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 2797,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "10338:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2769,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2765,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "10351:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2797,
												"src": "10343:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2764,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10343:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2768,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10363:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2797,
												"src": "10354:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2230",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2767,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2766,
														"name": "Rounding",
														"nameLocations": [
															"10354:8:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2230,
														"src": "10354:8:10"
													},
													"referencedDeclaration": 2230,
													"src": "10354:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2230",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10342:30:10"
									},
									"returnParameters": {
										"id": 2772,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2771,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2797,
												"src": "10396:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2770,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10396:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10395:9:10"
									},
									"scope": 3273,
									"src": "10329:240:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2928,
										"nodeType": "Block",
										"src": "10760:922:10",
										"statements": [
											{
												"assignments": [
													2806
												],
												"declarations": [
													{
														"constant": false,
														"id": 2806,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10778:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2928,
														"src": "10770:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2805,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10770:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2808,
												"initialValue": {
													"hexValue": "30",
													"id": 2807,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10787:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10770:18:10"
											},
											{
												"id": 2925,
												"nodeType": "UncheckedBlock",
												"src": "10798:855:10",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2813,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2811,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2809,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2800,
																	"src": "10826:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2810,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10835:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "10826:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2812,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10841:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10826:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2823,
														"nodeType": "IfStatement",
														"src": "10822:99:10",
														"trueBody": {
															"id": 2822,
															"nodeType": "Block",
															"src": "10844:77:10",
															"statements": [
																{
																	"expression": {
																		"id": 2816,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2814,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2800,
																			"src": "10862:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2815,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10872:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10862:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2817,
																	"nodeType": "ExpressionStatement",
																	"src": "10862:13:10"
																},
																{
																	"expression": {
																		"id": 2820,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2818,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2806,
																			"src": "10893:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2819,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10903:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10893:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2821,
																	"nodeType": "ExpressionStatement",
																	"src": "10893:13:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2828,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2826,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2824,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2800,
																	"src": "10938:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2825,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10947:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10938:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2827,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10952:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10938:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2838,
														"nodeType": "IfStatement",
														"src": "10934:96:10",
														"trueBody": {
															"id": 2837,
															"nodeType": "Block",
															"src": "10955:75:10",
															"statements": [
																{
																	"expression": {
																		"id": 2831,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2829,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2800,
																			"src": "10973:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2830,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10983:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10973:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2832,
																	"nodeType": "ExpressionStatement",
																	"src": "10973:12:10"
																},
																{
																	"expression": {
																		"id": 2835,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2833,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2806,
																			"src": "11003:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2834,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11013:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11003:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2836,
																	"nodeType": "ExpressionStatement",
																	"src": "11003:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2843,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2841,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2839,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2800,
																	"src": "11047:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2840,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11056:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11047:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2842,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11061:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11047:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2853,
														"nodeType": "IfStatement",
														"src": "11043:96:10",
														"trueBody": {
															"id": 2852,
															"nodeType": "Block",
															"src": "11064:75:10",
															"statements": [
																{
																	"expression": {
																		"id": 2846,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2844,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2800,
																			"src": "11082:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2845,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11092:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11082:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2847,
																	"nodeType": "ExpressionStatement",
																	"src": "11082:12:10"
																},
																{
																	"expression": {
																		"id": 2850,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2848,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2806,
																			"src": "11112:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2849,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11122:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11112:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2851,
																	"nodeType": "ExpressionStatement",
																	"src": "11112:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2858,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2856,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2854,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2800,
																	"src": "11156:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2855,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11165:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11156:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2857,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11170:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11156:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2868,
														"nodeType": "IfStatement",
														"src": "11152:96:10",
														"trueBody": {
															"id": 2867,
															"nodeType": "Block",
															"src": "11173:75:10",
															"statements": [
																{
																	"expression": {
																		"id": 2861,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2859,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2800,
																			"src": "11191:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2860,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11201:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11191:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2862,
																	"nodeType": "ExpressionStatement",
																	"src": "11191:12:10"
																},
																{
																	"expression": {
																		"id": 2865,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2863,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2806,
																			"src": "11221:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2864,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11231:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11221:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2866,
																	"nodeType": "ExpressionStatement",
																	"src": "11221:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2873,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2871,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2869,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2800,
																	"src": "11265:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2870,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11274:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11265:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2872,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11278:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11265:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2883,
														"nodeType": "IfStatement",
														"src": "11261:93:10",
														"trueBody": {
															"id": 2882,
															"nodeType": "Block",
															"src": "11281:73:10",
															"statements": [
																{
																	"expression": {
																		"id": 2876,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2874,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2800,
																			"src": "11299:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2875,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11309:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11299:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2877,
																	"nodeType": "ExpressionStatement",
																	"src": "11299:11:10"
																},
																{
																	"expression": {
																		"id": 2880,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2878,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2806,
																			"src": "11328:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2879,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11338:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11328:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2881,
																	"nodeType": "ExpressionStatement",
																	"src": "11328:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2888,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2886,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2884,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2800,
																	"src": "11371:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2885,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11380:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "11371:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2887,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11384:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11371:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2898,
														"nodeType": "IfStatement",
														"src": "11367:93:10",
														"trueBody": {
															"id": 2897,
															"nodeType": "Block",
															"src": "11387:73:10",
															"statements": [
																{
																	"expression": {
																		"id": 2891,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2889,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2800,
																			"src": "11405:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2890,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11415:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11405:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2892,
																	"nodeType": "ExpressionStatement",
																	"src": "11405:11:10"
																},
																{
																	"expression": {
																		"id": 2895,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2893,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2806,
																			"src": "11434:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2894,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11444:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11434:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2896,
																	"nodeType": "ExpressionStatement",
																	"src": "11434:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2903,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2901,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2899,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2800,
																	"src": "11477:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2900,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11486:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "11477:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2902,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11490:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11477:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2913,
														"nodeType": "IfStatement",
														"src": "11473:93:10",
														"trueBody": {
															"id": 2912,
															"nodeType": "Block",
															"src": "11493:73:10",
															"statements": [
																{
																	"expression": {
																		"id": 2906,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2904,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2800,
																			"src": "11511:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2905,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11521:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11511:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2907,
																	"nodeType": "ExpressionStatement",
																	"src": "11511:11:10"
																},
																{
																	"expression": {
																		"id": 2910,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2908,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2806,
																			"src": "11540:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2909,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11550:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11540:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2911,
																	"nodeType": "ExpressionStatement",
																	"src": "11540:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2918,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2916,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2914,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2800,
																	"src": "11583:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2915,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11592:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "11583:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2917,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11596:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11583:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2924,
														"nodeType": "IfStatement",
														"src": "11579:64:10",
														"trueBody": {
															"id": 2923,
															"nodeType": "Block",
															"src": "11599:44:10",
															"statements": [
																{
																	"expression": {
																		"id": 2921,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2919,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2806,
																			"src": "11617:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2920,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11627:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "11617:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2922,
																	"nodeType": "ExpressionStatement",
																	"src": "11617:11:10"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2926,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2806,
													"src": "11669:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2804,
												"id": 2927,
												"nodeType": "Return",
												"src": "11662:13:10"
											}
										]
									},
									"documentation": {
										"id": 2798,
										"nodeType": "StructuredDocumentation",
										"src": "10575:119:10",
										"text": " @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 2929,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "10708:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2801,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2800,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10721:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2929,
												"src": "10713:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2799,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10713:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10712:15:10"
									},
									"returnParameters": {
										"id": 2804,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2803,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2929,
												"src": "10751:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2802,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10751:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10750:9:10"
									},
									"scope": 3273,
									"src": "10699:983:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2963,
										"nodeType": "Block",
										"src": "11915:168:10",
										"statements": [
											{
												"id": 2962,
												"nodeType": "UncheckedBlock",
												"src": "11925:152:10",
												"statements": [
													{
														"assignments": [
															2941
														],
														"declarations": [
															{
																"constant": false,
																"id": 2941,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11957:6:10",
																"nodeType": "VariableDeclaration",
																"scope": 2962,
																"src": "11949:14:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2940,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11949:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2945,
														"initialValue": {
															"arguments": [
																{
																	"id": 2943,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2932,
																	"src": "11971:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2942,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2929,
																	2964
																],
																"referencedDeclaration": 2929,
																"src": "11966:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2944,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11966:11:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11949:28:10"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2960,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2946,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2941,
																"src": "11998:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2955,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2948,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2935,
																						"src": "12025:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2230",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2230",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 2947,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3272,
																					"src": "12008:16:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2230_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 2949,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "12008:26:10",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2954,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2952,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2950,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12038:1:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 2951,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2941,
																						"src": "12043:6:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12038:11:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2953,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2932,
																					"src": "12052:5:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12038:19:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12008:49:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2957,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12064:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2958,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12008:57:10",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2956,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12060:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2959,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12007:59:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11998:68:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2939,
														"id": 2961,
														"nodeType": "Return",
														"src": "11991:75:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2930,
										"nodeType": "StructuredDocumentation",
										"src": "11688:142:10",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2964,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "11844:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2936,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2932,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11857:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2964,
												"src": "11849:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2931,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11849:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2935,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11873:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2964,
												"src": "11864:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2230",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2934,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2933,
														"name": "Rounding",
														"nameLocations": [
															"11864:8:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2230,
														"src": "11864:8:10"
													},
													"referencedDeclaration": 2230,
													"src": "11864:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2230",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11848:34:10"
									},
									"returnParameters": {
										"id": 2939,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2938,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2964,
												"src": "11906:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2937,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11906:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11905:9:10"
									},
									"scope": 3273,
									"src": "11835:248:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3092,
										"nodeType": "Block",
										"src": "12276:854:10",
										"statements": [
											{
												"assignments": [
													2973
												],
												"declarations": [
													{
														"constant": false,
														"id": 2973,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12294:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 3092,
														"src": "12286:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2972,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12286:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2975,
												"initialValue": {
													"hexValue": "30",
													"id": 2974,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12303:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12286:18:10"
											},
											{
												"id": 3089,
												"nodeType": "UncheckedBlock",
												"src": "12314:787:10",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2980,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2976,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2967,
																"src": "12342:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 2979,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2977,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12351:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2978,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12357:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "12351:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "12342:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2992,
														"nodeType": "IfStatement",
														"src": "12338:103:10",
														"trueBody": {
															"id": 2991,
															"nodeType": "Block",
															"src": "12361:80:10",
															"statements": [
																{
																	"expression": {
																		"id": 2985,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2981,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2967,
																			"src": "12379:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 2984,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2982,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12388:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 2983,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12394:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "12388:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "12379:17:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2986,
																	"nodeType": "ExpressionStatement",
																	"src": "12379:17:10"
																},
																{
																	"expression": {
																		"id": 2989,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2987,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2973,
																			"src": "12414:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2988,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12424:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "12414:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2990,
																	"nodeType": "ExpressionStatement",
																	"src": "12414:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2997,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2993,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2967,
																"src": "12458:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 2996,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2994,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12467:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2995,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12473:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12467:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "12458:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3009,
														"nodeType": "IfStatement",
														"src": "12454:103:10",
														"trueBody": {
															"id": 3008,
															"nodeType": "Block",
															"src": "12477:80:10",
															"statements": [
																{
																	"expression": {
																		"id": 3002,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2998,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2967,
																			"src": "12495:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 3001,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2999,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12504:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 3000,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12510:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "12504:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "12495:17:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3003,
																	"nodeType": "ExpressionStatement",
																	"src": "12495:17:10"
																},
																{
																	"expression": {
																		"id": 3006,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3004,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2973,
																			"src": "12530:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3005,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12540:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12530:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3007,
																	"nodeType": "ExpressionStatement",
																	"src": "12530:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3014,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3010,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2967,
																"src": "12574:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 3013,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3011,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12583:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3012,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12589:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12583:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "12574:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3026,
														"nodeType": "IfStatement",
														"src": "12570:103:10",
														"trueBody": {
															"id": 3025,
															"nodeType": "Block",
															"src": "12593:80:10",
															"statements": [
																{
																	"expression": {
																		"id": 3019,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3015,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2967,
																			"src": "12611:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 3018,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3016,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12620:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 3017,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12626:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "12620:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "12611:17:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3020,
																	"nodeType": "ExpressionStatement",
																	"src": "12611:17:10"
																},
																{
																	"expression": {
																		"id": 3023,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3021,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2973,
																			"src": "12646:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3022,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12656:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12646:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3024,
																	"nodeType": "ExpressionStatement",
																	"src": "12646:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3031,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3027,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2967,
																"src": "12690:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 3030,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3028,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12699:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3029,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12705:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12699:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "12690:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3043,
														"nodeType": "IfStatement",
														"src": "12686:100:10",
														"trueBody": {
															"id": 3042,
															"nodeType": "Block",
															"src": "12708:78:10",
															"statements": [
																{
																	"expression": {
																		"id": 3036,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3032,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2967,
																			"src": "12726:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 3035,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3033,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12735:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 3034,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12741:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "12735:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "12726:16:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3037,
																	"nodeType": "ExpressionStatement",
																	"src": "12726:16:10"
																},
																{
																	"expression": {
																		"id": 3040,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3038,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2973,
																			"src": "12760:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3039,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12770:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12760:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3041,
																	"nodeType": "ExpressionStatement",
																	"src": "12760:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3048,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3044,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2967,
																"src": "12803:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 3047,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3045,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12812:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3046,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12818:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "12812:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "12803:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3060,
														"nodeType": "IfStatement",
														"src": "12799:100:10",
														"trueBody": {
															"id": 3059,
															"nodeType": "Block",
															"src": "12821:78:10",
															"statements": [
																{
																	"expression": {
																		"id": 3053,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3049,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2967,
																			"src": "12839:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 3052,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3050,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12848:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 3051,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12854:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "12848:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "12839:16:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3054,
																	"nodeType": "ExpressionStatement",
																	"src": "12839:16:10"
																},
																{
																	"expression": {
																		"id": 3057,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3055,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2973,
																			"src": "12873:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3056,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12883:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12873:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3058,
																	"nodeType": "ExpressionStatement",
																	"src": "12873:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3065,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3061,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2967,
																"src": "12916:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 3064,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3062,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12925:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3063,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12931:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "12925:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "12916:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3077,
														"nodeType": "IfStatement",
														"src": "12912:100:10",
														"trueBody": {
															"id": 3076,
															"nodeType": "Block",
															"src": "12934:78:10",
															"statements": [
																{
																	"expression": {
																		"id": 3070,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3066,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2967,
																			"src": "12952:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 3069,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3067,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12961:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 3068,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12967:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "12961:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "12952:16:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3071,
																	"nodeType": "ExpressionStatement",
																	"src": "12952:16:10"
																},
																{
																	"expression": {
																		"id": 3074,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3072,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2973,
																			"src": "12986:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3073,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12996:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12986:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3075,
																	"nodeType": "ExpressionStatement",
																	"src": "12986:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3082,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3078,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2967,
																"src": "13029:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 3081,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3079,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13038:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3080,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13044:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "13038:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "13029:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3088,
														"nodeType": "IfStatement",
														"src": "13025:66:10",
														"trueBody": {
															"id": 3087,
															"nodeType": "Block",
															"src": "13047:44:10",
															"statements": [
																{
																	"expression": {
																		"id": 3085,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3083,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2973,
																			"src": "13065:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3084,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13075:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "13065:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3086,
																	"nodeType": "ExpressionStatement",
																	"src": "13065:11:10"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3090,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2973,
													"src": "13117:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2971,
												"id": 3091,
												"nodeType": "Return",
												"src": "13110:13:10"
											}
										]
									},
									"documentation": {
										"id": 2965,
										"nodeType": "StructuredDocumentation",
										"src": "12089:120:10",
										"text": " @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3093,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "12223:5:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2968,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2967,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12237:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 3093,
												"src": "12229:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2966,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12229:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12228:15:10"
									},
									"returnParameters": {
										"id": 2971,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2970,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3093,
												"src": "12267:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2969,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12267:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12266:9:10"
									},
									"scope": 3273,
									"src": "12214:916:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3127,
										"nodeType": "Block",
										"src": "13365:170:10",
										"statements": [
											{
												"id": 3126,
												"nodeType": "UncheckedBlock",
												"src": "13375:154:10",
												"statements": [
													{
														"assignments": [
															3105
														],
														"declarations": [
															{
																"constant": false,
																"id": 3105,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "13407:6:10",
																"nodeType": "VariableDeclaration",
																"scope": 3126,
																"src": "13399:14:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3104,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13399:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3109,
														"initialValue": {
															"arguments": [
																{
																	"id": 3107,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3096,
																	"src": "13422:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3106,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3093,
																	3128
																],
																"referencedDeclaration": 3093,
																"src": "13416:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3108,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13416:12:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13399:29:10"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3124,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3110,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3105,
																"src": "13449:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3119,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3112,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3099,
																						"src": "13476:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2230",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2230",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3111,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3272,
																					"src": "13459:16:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2230_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3113,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "13459:26:10",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3118,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3116,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 3114,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "13489:2:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 3115,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3105,
																						"src": "13495:6:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "13489:12:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3117,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3096,
																					"src": "13504:5:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "13489:20:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "13459:50:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3121,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13516:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3122,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "13459:58:10",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3120,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13512:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3123,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "13458:60:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "13449:69:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3103,
														"id": 3125,
														"nodeType": "Return",
														"src": "13442:76:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3094,
										"nodeType": "StructuredDocumentation",
										"src": "13136:143:10",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3128,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "13293:5:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3096,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13307:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 3128,
												"src": "13299:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3095,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13299:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3099,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "13323:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 3128,
												"src": "13314:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2230",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3098,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3097,
														"name": "Rounding",
														"nameLocations": [
															"13314:8:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2230,
														"src": "13314:8:10"
													},
													"referencedDeclaration": 2230,
													"src": "13314:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2230",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13298:34:10"
									},
									"returnParameters": {
										"id": 3103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3102,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3128,
												"src": "13356:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3101,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13356:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13355:9:10"
									},
									"scope": 3273,
									"src": "13284:251:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3214,
										"nodeType": "Block",
										"src": "13855:600:10",
										"statements": [
											{
												"assignments": [
													3137
												],
												"declarations": [
													{
														"constant": false,
														"id": 3137,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "13873:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 3214,
														"src": "13865:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3136,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13865:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3139,
												"initialValue": {
													"hexValue": "30",
													"id": 3138,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "13882:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13865:18:10"
											},
											{
												"id": 3211,
												"nodeType": "UncheckedBlock",
												"src": "13893:533:10",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3144,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3142,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3140,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3131,
																	"src": "13921:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3141,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13930:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "13921:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3143,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13936:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13921:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3154,
														"nodeType": "IfStatement",
														"src": "13917:98:10",
														"trueBody": {
															"id": 3153,
															"nodeType": "Block",
															"src": "13939:76:10",
															"statements": [
																{
																	"expression": {
																		"id": 3147,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3145,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3131,
																			"src": "13957:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3146,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13967:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "13957:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3148,
																	"nodeType": "ExpressionStatement",
																	"src": "13957:13:10"
																},
																{
																	"expression": {
																		"id": 3151,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3149,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3137,
																			"src": "13988:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3150,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13998:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "13988:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3152,
																	"nodeType": "ExpressionStatement",
																	"src": "13988:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3159,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3157,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3155,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3131,
																	"src": "14032:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3156,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14041:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "14032:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3158,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14046:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14032:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3169,
														"nodeType": "IfStatement",
														"src": "14028:95:10",
														"trueBody": {
															"id": 3168,
															"nodeType": "Block",
															"src": "14049:74:10",
															"statements": [
																{
																	"expression": {
																		"id": 3162,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3160,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3131,
																			"src": "14067:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3161,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14077:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "14067:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3163,
																	"nodeType": "ExpressionStatement",
																	"src": "14067:12:10"
																},
																{
																	"expression": {
																		"id": 3166,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3164,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3137,
																			"src": "14097:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3165,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14107:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "14097:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3167,
																	"nodeType": "ExpressionStatement",
																	"src": "14097:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3174,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3172,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3170,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3131,
																	"src": "14140:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3171,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14149:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "14140:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3173,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14154:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14140:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3184,
														"nodeType": "IfStatement",
														"src": "14136:95:10",
														"trueBody": {
															"id": 3183,
															"nodeType": "Block",
															"src": "14157:74:10",
															"statements": [
																{
																	"expression": {
																		"id": 3177,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3175,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3131,
																			"src": "14175:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3176,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14185:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "14175:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3178,
																	"nodeType": "ExpressionStatement",
																	"src": "14175:12:10"
																},
																{
																	"expression": {
																		"id": 3181,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3179,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3137,
																			"src": "14205:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3180,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14215:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "14205:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3182,
																	"nodeType": "ExpressionStatement",
																	"src": "14205:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3189,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3187,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3185,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3131,
																	"src": "14248:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3186,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14257:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "14248:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3188,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14262:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14248:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3199,
														"nodeType": "IfStatement",
														"src": "14244:95:10",
														"trueBody": {
															"id": 3198,
															"nodeType": "Block",
															"src": "14265:74:10",
															"statements": [
																{
																	"expression": {
																		"id": 3192,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3190,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3131,
																			"src": "14283:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3191,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14293:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "14283:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3193,
																	"nodeType": "ExpressionStatement",
																	"src": "14283:12:10"
																},
																{
																	"expression": {
																		"id": 3196,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3194,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3137,
																			"src": "14313:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3195,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14323:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "14313:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3197,
																	"nodeType": "ExpressionStatement",
																	"src": "14313:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3204,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3202,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3200,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3131,
																	"src": "14356:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3201,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14365:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "14356:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3203,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14369:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14356:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3210,
														"nodeType": "IfStatement",
														"src": "14352:64:10",
														"trueBody": {
															"id": 3209,
															"nodeType": "Block",
															"src": "14372:44:10",
															"statements": [
																{
																	"expression": {
																		"id": 3207,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3205,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3137,
																			"src": "14390:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3206,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14400:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "14390:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3208,
																	"nodeType": "ExpressionStatement",
																	"src": "14390:11:10"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3212,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3137,
													"src": "14442:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3135,
												"id": 3213,
												"nodeType": "Return",
												"src": "14435:13:10"
											}
										]
									},
									"documentation": {
										"id": 3129,
										"nodeType": "StructuredDocumentation",
										"src": "13541:246:10",
										"text": " @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 3215,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "13801:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3131,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13816:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 3215,
												"src": "13808:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13808:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13807:15:10"
									},
									"returnParameters": {
										"id": 3135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3134,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3215,
												"src": "13846:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3133,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13846:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13845:9:10"
									},
									"scope": 3273,
									"src": "13792:663:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3252,
										"nodeType": "Block",
										"src": "14692:177:10",
										"statements": [
											{
												"id": 3251,
												"nodeType": "UncheckedBlock",
												"src": "14702:161:10",
												"statements": [
													{
														"assignments": [
															3227
														],
														"declarations": [
															{
																"constant": false,
																"id": 3227,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "14734:6:10",
																"nodeType": "VariableDeclaration",
																"scope": 3251,
																"src": "14726:14:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3226,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "14726:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3231,
														"initialValue": {
															"arguments": [
																{
																	"id": 3229,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3218,
																	"src": "14750:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3228,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3215,
																	3253
																],
																"referencedDeclaration": 3215,
																"src": "14743:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3230,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14743:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "14726:30:10"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3249,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3232,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3227,
																"src": "14777:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3244,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3234,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3221,
																						"src": "14804:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2230",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2230",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3233,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3272,
																					"src": "14787:16:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2230_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3235,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "14787:26:10",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3243,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3241,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3236,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "14817:1:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3239,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3237,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3227,
																									"src": "14823:6:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 3238,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "14833:1:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "14823:11:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 3240,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "14822:13:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "14817:18:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3242,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3218,
																					"src": "14838:5:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "14817:26:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "14787:56:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3246,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14850:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3247,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "14787:64:10",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3245,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14846:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3248,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "14786:66:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "14777:75:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3225,
														"id": 3250,
														"nodeType": "Return",
														"src": "14770:82:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3216,
										"nodeType": "StructuredDocumentation",
										"src": "14461:144:10",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "14619:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3218,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14634:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 3253,
												"src": "14626:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3217,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14626:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3221,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "14650:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 3253,
												"src": "14641:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2230",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3220,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3219,
														"name": "Rounding",
														"nameLocations": [
															"14641:8:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2230,
														"src": "14641:8:10"
													},
													"referencedDeclaration": 2230,
													"src": "14641:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2230",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14625:34:10"
									},
									"returnParameters": {
										"id": 3225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3224,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3253,
												"src": "14683:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14683:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14682:9:10"
									},
									"scope": 3273,
									"src": "14610:259:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3271,
										"nodeType": "Block",
										"src": "15067:48:10",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 3269,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 3267,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3264,
																	"name": "rounding",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3257,
																	"src": "15090:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_Rounding_$2230",
																		"typeString": "enum Math.Rounding"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_Rounding_$2230",
																		"typeString": "enum Math.Rounding"
																	}
																],
																"id": 3263,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15084:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 3262,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "15084:5:10",
																	"typeDescriptions": {}
																}
															},
															"id": 3265,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15084:15:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "%",
														"rightExpression": {
															"hexValue": "32",
															"id": 3266,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15102:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "15084:19:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 3268,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15107:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "15084:24:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 3261,
												"id": 3270,
												"nodeType": "Return",
												"src": "15077:31:10"
											}
										]
									},
									"documentation": {
										"id": 3254,
										"nodeType": "StructuredDocumentation",
										"src": "14875:113:10",
										"text": " @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."
									},
									"id": 3272,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsignedRoundsUp",
									"nameLocation": "15002:16:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3257,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "15028:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 3272,
												"src": "15019:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2230",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3256,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3255,
														"name": "Rounding",
														"nameLocations": [
															"15019:8:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2230,
														"src": "15019:8:10"
													},
													"referencedDeclaration": 2230,
													"src": "15019:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2230",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15018:19:10"
									},
									"returnParameters": {
										"id": 3261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3260,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3272,
												"src": "15061:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3259,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15061:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15060:6:10"
									},
									"scope": 3273,
									"src": "14993:122:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3274,
							"src": "203:14914:10",
							"usedErrors": [
								2225
							],
							"usedEvents": []
						}
					],
					"src": "103:15015:10"
				},
				"id": 10
			},
			"contracts/Vault.sol": {
				"ast": {
					"absolutePath": "contracts/Vault.sol",
					"exportedSymbols": {
						"Address": [
							2189
						],
						"ERC20": [
							821
						],
						"ERC4626": [
							1584
						],
						"IERC20": [
							899
						],
						"IERC20Metadata": [
							1610
						],
						"IERC20Permit": [
							1646
						],
						"IERC4626": [
							169
						],
						"LiquidityVault": [
							3465
						],
						"Math": [
							3273
						],
						"SafeERC20": [
							1936
						]
					},
					"id": 3466,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3275,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:11"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
							"id": 3276,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3466,
							"sourceUnit": 1585,
							"src": "57:68:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 3277,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3466,
							"sourceUnit": 1937,
							"src": "126:65:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3278,
										"name": "ERC4626",
										"nameLocations": [
											"220:7:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1584,
										"src": "220:7:11"
									},
									"id": 3279,
									"nodeType": "InheritanceSpecifier",
									"src": "220:7:11"
								}
							],
							"canonicalName": "LiquidityVault",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 3465,
							"linearizedBaseContracts": [
								3465,
								1584,
								169,
								821,
								211,
								1610,
								899,
								2219
							],
							"name": "LiquidityVault",
							"nameLocation": "202:14:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "92bdf9ba",
									"id": 3283,
									"mutability": "mutable",
									"name": "lockedCollateral",
									"nameLocation": "314:16:11",
									"nodeType": "VariableDeclaration",
									"scope": 3465,
									"src": "279:51:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 3282,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 3280,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "287:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "279:27:11",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 3281,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "298:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "9d76ea58",
									"id": 3285,
									"mutability": "mutable",
									"name": "tokenAddress",
									"nameLocation": "352:12:11",
									"nodeType": "VariableDeclaration",
									"scope": 3465,
									"src": "337:27:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 3284,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "337:7:11",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "2251f6a4ed7fe619e9e8ce557d05a63dd484284f9c95c9ab334f6a7707cd0800",
									"id": 3291,
									"name": "CollateralLocked",
									"nameLocation": "424:16:11",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3287,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "457:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 3291,
												"src": "441:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3286,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "441:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3289,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "471:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 3291,
												"src": "463:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3288,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "463:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "440:38:11"
									},
									"src": "418:61:11"
								},
								{
									"anonymous": false,
									"eventSelector": "b4eaf47ecd4bc76248f192433e8067c96cb3e17aced42fbc47a512742fb74216",
									"id": 3297,
									"name": "CollateralUnlocked",
									"nameLocation": "540:18:11",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3293,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "575:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 3297,
												"src": "559:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3292,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "559:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3295,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "589:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 3297,
												"src": "581:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3294,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "581:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "558:38:11"
									},
									"src": "534:63:11"
								},
								{
									"body": {
										"id": 3311,
										"nodeType": "Block",
										"src": "698:3:11",
										"statements": []
									},
									"id": 3312,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 3303,
															"name": "assetAddress_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3299,
															"src": "653:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 3302,
														"name": "IERC20",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 899,
														"src": "646:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_IERC20_$899_$",
															"typeString": "type(contract IERC20)"
														}
													},
													"id": 3304,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "646:21:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$899",
														"typeString": "contract IERC20"
													}
												}
											],
											"id": 3305,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3301,
												"name": "ERC4626",
												"nameLocations": [
													"638:7:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1584,
												"src": "638:7:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "638:30:11"
										},
										{
											"arguments": [
												{
													"hexValue": "4d795661756c74536861726573",
													"id": 3307,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "675:15:11",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_a19f347e5bda195824ea58ef4c033fd394e24b74fbf2c6e8bf344bae868473f4",
														"typeString": "literal_string \"MyVaultShares\""
													},
													"value": "MyVaultShares"
												},
												{
													"hexValue": "4d5653",
													"id": 3308,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "692:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_9810a8e942f7050d2159e7d574a041f6eb54cfd007106c36bb5cfad825961fd4",
														"typeString": "literal_string \"MVS\""
													},
													"value": "MVS"
												}
											],
											"id": 3309,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3306,
												"name": "ERC20",
												"nameLocations": [
													"669:5:11"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 821,
												"src": "669:5:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "669:29:11"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3299,
												"mutability": "mutable",
												"name": "assetAddress_",
												"nameLocation": "623:13:11",
												"nodeType": "VariableDeclaration",
												"scope": 3312,
												"src": "615:21:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3298,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "615:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "614:23:11"
									},
									"returnParameters": {
										"id": 3310,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "698:0:11"
									},
									"scope": 3465,
									"src": "603:98:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1297
									],
									"body": {
										"id": 3343,
										"nodeType": "Block",
										"src": "844:202:11",
										"statements": [
											{
												"assignments": [
													3323
												],
												"declarations": [
													{
														"constant": false,
														"id": 3323,
														"mutability": "mutable",
														"name": "shares",
														"nameLocation": "862:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 3343,
														"src": "854:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3322,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "854:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3329,
												"initialValue": {
													"arguments": [
														{
															"id": 3326,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3314,
															"src": "885:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3327,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3316,
															"src": "893:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 3324,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "871:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_LiquidityVault_$3465_$",
																"typeString": "type(contract super LiquidityVault)"
															}
														},
														"id": 3325,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "877:7:11",
														"memberName": "deposit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1297,
														"src": "871:13:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (uint256,address) returns (uint256)"
														}
													},
													"id": 3328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "871:31:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "854:48:11"
											},
											{
												"expression": {
													"id": 3334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 3330,
															"name": "lockedCollateral",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3283,
															"src": "912:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 3332,
														"indexExpression": {
															"id": 3331,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3316,
															"src": "929:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "912:26:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 3333,
														"name": "assets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3314,
														"src": "942:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "912:36:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3335,
												"nodeType": "ExpressionStatement",
												"src": "912:36:11"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 3337,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3316,
															"src": "999:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3338,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3314,
															"src": "1009:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3336,
														"name": "CollateralLocked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3291,
														"src": "982:16:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3339,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "982:34:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3340,
												"nodeType": "EmitStatement",
												"src": "977:39:11"
											},
											{
												"expression": {
													"id": 3341,
													"name": "shares",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3323,
													"src": "1033:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3321,
												"id": 3342,
												"nodeType": "Return",
												"src": "1026:13:11"
											}
										]
									},
									"functionSelector": "6e553f65",
									"id": 3344,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "768:7:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3318,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "817:8:11"
									},
									"parameters": {
										"id": 3317,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3314,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "784:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 3344,
												"src": "776:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3313,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "776:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3316,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "800:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 3344,
												"src": "792:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3315,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "792:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "775:34:11"
									},
									"returnParameters": {
										"id": 3321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3320,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3344,
												"src": "835:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3319,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "835:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "834:9:11"
									},
									"scope": 3465,
									"src": "759:287:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1388
									],
									"body": {
										"id": 3396,
										"nodeType": "Block",
										"src": "1215:375:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3361,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3357,
																"name": "assets",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3346,
																"src": "1233:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 3359,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3350,
																		"src": "1255:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 3358,
																	"name": "maxWithdraw",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		3464
																	],
																	"referencedDeclaration": 3464,
																	"src": "1243:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view returns (uint256)"
																	}
																},
																"id": 3360,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1243:18:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1233:28:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45786365656473206d617820776974686472617720616d6f756e74",
															"id": 3362,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1263:29:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef106c0bbb744e74987954b239ff90422a58d8a59de2058902bb4271029d7abf",
																"typeString": "literal_string \"Exceeds max withdraw amount\""
															},
															"value": "Exceeds max withdraw amount"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef106c0bbb744e74987954b239ff90422a58d8a59de2058902bb4271029d7abf",
																"typeString": "literal_string \"Exceeds max withdraw amount\""
															}
														],
														"id": 3356,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1225:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3363,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1225:68:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3364,
												"nodeType": "ExpressionStatement",
												"src": "1225:68:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3370,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3366,
																"name": "assets",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3346,
																"src": "1311:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"baseExpression": {
																	"id": 3367,
																	"name": "lockedCollateral",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3283,
																	"src": "1321:16:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 3369,
																"indexExpression": {
																	"id": 3368,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3350,
																	"src": "1338:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1321:23:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1311:33:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616e6e6f74207769746864726177206c6f636b656420636f6c6c61746572616c",
															"id": 3371,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1346:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_806ba8ee32c103c2a737750386240fe468a7ec44d5136f2c1c91c5d6ce999f73",
																"typeString": "literal_string \"Cannot withdraw locked collateral\""
															},
															"value": "Cannot withdraw locked collateral"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_806ba8ee32c103c2a737750386240fe468a7ec44d5136f2c1c91c5d6ce999f73",
																"typeString": "literal_string \"Cannot withdraw locked collateral\""
															}
														],
														"id": 3365,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1303:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3372,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1303:79:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3373,
												"nodeType": "ExpressionStatement",
												"src": "1303:79:11"
											},
											{
												"assignments": [
													3375
												],
												"declarations": [
													{
														"constant": false,
														"id": 3375,
														"mutability": "mutable",
														"name": "shares",
														"nameLocation": "1400:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 3396,
														"src": "1392:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3374,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1392:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3382,
												"initialValue": {
													"arguments": [
														{
															"id": 3378,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3346,
															"src": "1424:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3379,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3348,
															"src": "1432:8:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3380,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3350,
															"src": "1442:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 3376,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1409:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_LiquidityVault_$3465_$",
																"typeString": "type(contract super LiquidityVault)"
															}
														},
														"id": 3377,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1415:8:11",
														"memberName": "withdraw",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1388,
														"src": "1409:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (uint256,address,address) returns (uint256)"
														}
													},
													"id": 3381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1409:39:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1392:56:11"
											},
											{
												"expression": {
													"id": 3387,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 3383,
															"name": "lockedCollateral",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3283,
															"src": "1458:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 3385,
														"indexExpression": {
															"id": 3384,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3350,
															"src": "1475:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1458:23:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 3386,
														"name": "assets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3346,
														"src": "1485:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1458:33:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3388,
												"nodeType": "ExpressionStatement",
												"src": "1458:33:11"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 3390,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3350,
															"src": "1546:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3391,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3346,
															"src": "1553:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3389,
														"name": "CollateralUnlocked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3297,
														"src": "1527:18:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3392,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1527:33:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3393,
												"nodeType": "EmitStatement",
												"src": "1522:38:11"
											},
											{
												"expression": {
													"id": 3394,
													"name": "shares",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3375,
													"src": "1577:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3355,
												"id": 3395,
												"nodeType": "Return",
												"src": "1570:13:11"
											}
										]
									},
									"functionSelector": "b460af94",
									"id": 3397,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "1123:8:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3352,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1188:8:11"
									},
									"parameters": {
										"id": 3351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3346,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "1140:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 3397,
												"src": "1132:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1132:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3348,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1156:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 3397,
												"src": "1148:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3347,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1148:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3350,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1174:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3397,
												"src": "1166:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3349,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1166:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1131:49:11"
									},
									"returnParameters": {
										"id": 3355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3354,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3397,
												"src": "1206:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3353,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1206:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1205:9:11"
									},
									"scope": 3465,
									"src": "1114:476:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1237
									],
									"body": {
										"id": 3430,
										"nodeType": "Block",
										"src": "1747:258:11",
										"statements": [
											{
												"assignments": [
													3406
												],
												"declarations": [
													{
														"constant": false,
														"id": 3406,
														"mutability": "mutable",
														"name": "availableAssets",
														"nameLocation": "1765:15:11",
														"nodeType": "VariableDeclaration",
														"scope": 3430,
														"src": "1757:23:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3405,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1757:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3411,
												"initialValue": {
													"arguments": [
														{
															"id": 3409,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3399,
															"src": "1805:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 3407,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1783:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_LiquidityVault_$3465_$",
																"typeString": "type(contract super LiquidityVault)"
															}
														},
														"id": 3408,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1789:15:11",
														"memberName": "previewWithdraw",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1237,
														"src": "1783:21:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 3410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1783:29:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1757:55:11"
											},
											{
												"assignments": [
													3413
												],
												"declarations": [
													{
														"constant": false,
														"id": 3413,
														"mutability": "mutable",
														"name": "lockedAssets",
														"nameLocation": "1830:12:11",
														"nodeType": "VariableDeclaration",
														"scope": 3430,
														"src": "1822:20:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3412,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1822:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3418,
												"initialValue": {
													"baseExpression": {
														"id": 3414,
														"name": "lockedCollateral",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3283,
														"src": "1845:16:11",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 3417,
													"indexExpression": {
														"expression": {
															"id": 3415,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1862:3:11",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 3416,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1866:6:11",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1862:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1845:28:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1822:51:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3421,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3419,
														"name": "availableAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3406,
														"src": "1887:15:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 3420,
														"name": "lockedAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3413,
														"src": "1905:12:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1887:30:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3427,
												"nodeType": "IfStatement",
												"src": "1883:98:11",
												"trueBody": {
													"id": 3426,
													"nodeType": "Block",
													"src": "1919:62:11",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3424,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3422,
																	"name": "availableAssets",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3406,
																	"src": "1940:15:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 3423,
																	"name": "lockedAssets",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3413,
																	"src": "1958:12:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1940:30:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 3404,
															"id": 3425,
															"nodeType": "Return",
															"src": "1933:37:11"
														}
													]
												}
											},
											{
												"expression": {
													"hexValue": "30",
													"id": 3428,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1997:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 3404,
												"id": 3429,
												"nodeType": "Return",
												"src": "1990:8:11"
											}
										]
									},
									"functionSelector": "0a28a477",
									"id": 3431,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewWithdraw",
									"nameLocation": "1676:15:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3401,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1720:8:11"
									},
									"parameters": {
										"id": 3400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3399,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "1700:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 3431,
												"src": "1692:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3398,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1692:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1691:16:11"
									},
									"returnParameters": {
										"id": 3404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3403,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3431,
												"src": "1738:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3402,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1738:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1737:9:11"
									},
									"scope": 3465,
									"src": "1667:338:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1176
									],
									"body": {
										"id": 3463,
										"nodeType": "Block",
										"src": "2579:254:11",
										"statements": [
											{
												"assignments": [
													3440
												],
												"declarations": [
													{
														"constant": false,
														"id": 3440,
														"mutability": "mutable",
														"name": "maxWithdrawAmount",
														"nameLocation": "2597:17:11",
														"nodeType": "VariableDeclaration",
														"scope": 3463,
														"src": "2589:25:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3439,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2589:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3445,
												"initialValue": {
													"arguments": [
														{
															"id": 3443,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3433,
															"src": "2635:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 3441,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2617:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_LiquidityVault_$3465_$",
																"typeString": "type(contract super LiquidityVault)"
															}
														},
														"id": 3442,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2623:11:11",
														"memberName": "maxWithdraw",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1176,
														"src": "2617:17:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 3444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2617:24:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2589:52:11"
											},
											{
												"assignments": [
													3447
												],
												"declarations": [
													{
														"constant": false,
														"id": 3447,
														"mutability": "mutable",
														"name": "lockedAssets",
														"nameLocation": "2659:12:11",
														"nodeType": "VariableDeclaration",
														"scope": 3463,
														"src": "2651:20:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3446,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2651:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3451,
												"initialValue": {
													"baseExpression": {
														"id": 3448,
														"name": "lockedCollateral",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3283,
														"src": "2674:16:11",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 3450,
													"indexExpression": {
														"id": 3449,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3433,
														"src": "2691:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2674:23:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2651:46:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3454,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3452,
														"name": "maxWithdrawAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3440,
														"src": "2711:17:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 3453,
														"name": "lockedAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3447,
														"src": "2731:12:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2711:32:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3460,
												"nodeType": "IfStatement",
												"src": "2707:102:11",
												"trueBody": {
													"id": 3459,
													"nodeType": "Block",
													"src": "2745:64:11",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3457,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3455,
																	"name": "maxWithdrawAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3440,
																	"src": "2766:17:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 3456,
																	"name": "lockedAssets",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3447,
																	"src": "2786:12:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2766:32:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 3438,
															"id": 3458,
															"nodeType": "Return",
															"src": "2759:39:11"
														}
													]
												}
											},
											{
												"expression": {
													"hexValue": "30",
													"id": 3461,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2825:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 3438,
												"id": 3462,
												"nodeType": "Return",
												"src": "2818:8:11"
											}
										]
									},
									"functionSelector": "ce96cb77",
									"id": 3464,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxWithdraw",
									"nameLocation": "2513:11:11",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3435,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2552:8:11"
									},
									"parameters": {
										"id": 3434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3433,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2533:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3464,
												"src": "2525:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3432,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2525:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2524:15:11"
									},
									"returnParameters": {
										"id": 3438,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3437,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3464,
												"src": "2570:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3436,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:9:11"
									},
									"scope": 3465,
									"src": "2504:329:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 3466,
							"src": "193:2642:11",
							"usedErrors": [
								181,
								186,
								191,
								200,
								205,
								210,
								933,
								942,
								951,
								960,
								1663,
								1944,
								1949,
								1952,
								2225
							],
							"usedEvents": [
								20,
								32,
								833,
								842,
								3291,
								3297
							]
						}
					],
					"src": "32:2803:11"
				},
				"id": 11
			}
		}
	}
}